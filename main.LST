     1                                  [org 0x0100]
     2                                  
     3 00000000 E909BA                      JMP start
     4                                  
     5                                  %include "C:\COAL_new\Code\number_cards.asm"
     1                              <1> 
     2 00000003 EB09                <1> jmp number_cards
     3                              <1> 
     4 00000005 000000000000000000  <1> save_count: db 0, 0, 0, 0, 0, 0, 0, 0, 0 ; Counter for numbers 1-9 initialized to 0
     5                              <1> 
     6                              <1> number_cards:
     7 0000000E 60                  <1>     pusha
     8 0000000F 8A1E[9667]          <1>     mov bl, byte [blink_number]
     9 00000013 80C330              <1>     add bl, 0x30
    10 00000016 38D3                <1>     cmp bl, dl
    11 00000018 7504                <1>     jne ooo1
    12 0000001A B4B4                <1>     mov ah, 10110100b
    13 0000001C EB02                <1>     jmp oo1
    14                              <1> ooo1:
    15 0000001E B434                <1>     mov ah, 00110100b  
    16                              <1> oo1:
    17                              <1> 
    18 00000020 B0C9                <1>     mov al, 201 ; Top left corner
    19 00000022 268905              <1>     mov [es:di], ax
    20 00000025 83C702              <1>     add di, 2
    21 00000028 B0CD                <1>     mov al, 205 ; Horizontal bar
    22 0000002A 268905              <1>     mov [es:di], ax
    23 0000002D 83C702              <1>     add di, 2
    24 00000030 268905              <1>     mov [es:di], ax
    25 00000033 83C702              <1>     add di, 2
    26 00000036 268905              <1>     mov [es:di], ax
    27 00000039 83C702              <1>     add di, 2
    28 0000003C B0BB                <1>     mov al, 187 ; Top right corner
    29 0000003E 268905              <1>     mov [es:di], ax
    30 00000041 83C702              <1>     add di, 2
    31                              <1> 
    32 00000044 81C79600            <1>     add di, 150
    33                              <1> 
    34 00000048 B0BA                <1>     mov al, 186 ; Vertical bar
    35 0000004A 268905              <1>     mov [es:di], ax
    36 0000004D 83C704              <1>     add di, 4
    37                              <1> 
    38 00000050 88D0                <1>     mov al, dl
    39 00000052 2C31                <1>     sub al, 0x31
    40 00000054 BE[0500]            <1>     mov si, save_count
    41 00000057 01C6                <1>     add si, ax
    42 00000059 83EE01              <1>     sub si, 1
    43 0000005C 8A04                <1>     mov al, [si]
    44 0000005E 3C09                <1>     cmp al, 9
    45 00000060 7408                <1>     je skip_display
    46                              <1> 
    47 00000062 88D0                <1>     mov al, dl
    48 00000064 268905              <1>     mov [es:di], ax
    49 00000067 83C704              <1>     add di, 4
    50                              <1> 
    51                              <1> skip_display:
    52 0000006A B0BA                <1>     mov al, 186
    53 0000006C 268905              <1>     mov [es:di], ax
    54 0000006F 83C702              <1>     add di, 2
    55                              <1> 
    56 00000072 81C79600            <1>     add di, 150
    57                              <1> 
    58 00000076 B0C8                <1>     mov al, 200 ; Bottom left corner
    59 00000078 268905              <1>     mov [es:di], ax
    60 0000007B 83C702              <1>     add di, 2
    61 0000007E B0CD                <1>     mov al, 205
    62 00000080 268905              <1>     mov [es:di], ax
    63 00000083 83C702              <1>     add di, 2
    64 00000086 268905              <1>     mov [es:di], ax
    65 00000089 83C702              <1>     add di, 2
    66 0000008C 268905              <1>     mov [es:di], ax
    67 0000008F 83C702              <1>     add di, 2
    68 00000092 B0BC                <1>     mov al, 188 ; Bottom right corner
    69 00000094 268905              <1>     mov [es:di], ax
    70 00000097 83C702              <1>     add di, 2
    71                              <1> 
    72 0000009A 81C79600            <1>     add di, 150
    73                              <1> 
    74 0000009E 61                  <1>     popa
    75 0000009F C3                  <1>     ret
     6                                  %include "C:\COAL_new\Code\grid.asm"
     1                              <1> 
     2 000000A0 0000                <1> index1: dw 0
     3                              <1> 
     4                              <1> ; ---------Print Grid---------------                
     5                              <1> 
     6                              <1> 
     7                              <1> print_boxes:
     8                              <1> 
     9 000000A2 BE0000              <1>    mov si, 0
    10 000000A5 BF0000              <1>    mov di, 0
    11                              <1>         
    12 000000A8 B90600              <1>     mov cx,6 ;loop counter for 6 rows
    13 000000AB BA4200              <1>     mov dx,66 ;160 will be added evertime...used for checking line end
    14 000000AE BE1800              <1>     mov si,24 ;horizontal line change after every 3 boxes
    15 000000B1 BB8007              <1>     mov bx,1920 ;used for comparison to see if 3 row is reached after every 2nd row
    16                              <1> 
    17                              <1> 
    18 000000B4 83C704              <1>     add di,4
    19                              <1>    
    20 000000B7 B430                <1>     MOV AH, 00110000b
    21                              <1> 
    22                              <1> 
    23 000000B9 83C71E              <1>     add di,30 ;for positioning--------------
    24 000000BC 01FA                <1>     add dx,di;same as above
    25 000000BE 01FB                <1>     add bx,di
    26                              <1> 
    27                              <1> 
    28 000000C0 01FE                <1>     add si,di ;adjust after positioning
    29                              <1> 
    30                              <1> 
    31 000000C2 B0C9                <1>     mov al,201 ;top left corner
    32 000000C4 268905              <1>     mov [es:di],ax
    33 000000C7 83C702              <1>     add di,2
    34                              <1> 
    35                              <1> 
    36                              <1>     horizontal_bars:
    37                              <1> 
    38                              <1> 
    39 000000CA B0CD                <1>     mov al,205 ;double horizontal bar
    40 000000CC 268905              <1>     mov [es:di],ax
    41 000000CF 83C702              <1>     add di,2
    42 000000D2 268905              <1>     mov [es:di],ax
    43 000000D5 83C702              <1>     add di,2
    44 000000D8 268905              <1>     mov [es:di],ax
    45 000000DB 83C702              <1>     add di,2
    46                              <1> 
    47                              <1> 
    48 000000DE 39F7                <1>     cmp di,si ;after every 3 boxes
    49 000000E0 750D                <1>     jnz .next
    50                              <1> 
    51                              <1> 
    52 000000E2 B0CB                <1>     mov al,203 ;double line after every 3 boxes
    53 000000E4 268905              <1>     mov [es:di],ax
    54 000000E7 83C702              <1>     add di,2
    55 000000EA 83C618              <1>     add si,24
    56 000000ED EB08                <1>     jmp .no_next
    57                              <1> 
    58                              <1> 
    59                              <1>     .next:
    60 000000EF B0D1                <1>     mov al,209 ;double horizontal + single vertical
    61 000000F1 268905              <1>     mov [es:di],ax
    62 000000F4 83C702              <1>     add di,2
    63                              <1> 
    64                              <1> 
    65                              <1>     .no_next:
    66 000000F7 39D7                <1>     cmp di,dx
    67 000000F9 75CF                <1>     jnz horizontal_bars
    68 000000FB 81C2A000            <1>     add dx,160
    69                              <1> 
    70                              <1> 
    71 000000FF B0CD                <1>     mov al,205 ;double horizontal bar
    72 00000101 268905              <1>     mov [es:di],ax
    73 00000104 83C702              <1>     add di,2
    74 00000107 268905              <1>     mov [es:di],ax
    75 0000010A 83C702              <1>     add di,2
    76 0000010D 268905              <1>     mov [es:di],ax
    77 00000110 83C702              <1>     add di,2
    78                              <1> 
    79                              <1> 
    80 00000113 B0BB                <1>     mov al,187 ;top right corner
    81 00000115 268905              <1>     mov [es:di],ax
    82 00000118 83C702              <1>     add di,2
    83                              <1> 
    84                              <1> 
    85 0000011B 83C756              <1>     add di,86 ;next line
    86 0000011E 89FE                <1>     mov si,di
    87 00000120 83C618              <1>     add si,24
    88                              <1> 
    89                              <1> 
    90                              <1>     nine_times:
    91                              <1> 
    92                              <1> 
    93 00000123 B0BA                <1>     mov al,186 ;double vertical bar
    94 00000125 268905              <1>     mov [es:di],ax
    95 00000128 83C702              <1>     add di,2
    96                              <1> 
    97                              <1> 
    98                              <1>     vertical_bars:
    99                              <1> 
   100                              <1> 
   101 0000012B 83C706              <1>     add di,6
   102                              <1> 
   103                              <1> 
   104 0000012E 39F7                <1>     cmp di,si
   105 00000130 750D                <1>     jnz .next1
   106                              <1> 
   107                              <1> 
   108 00000132 B0BA                <1>     mov al,186 ;double vertical bar
   109 00000134 268905              <1>     mov [es:di],ax
   110 00000137 83C702              <1>     add di,2
   111 0000013A 83C618              <1>     add si,24
   112 0000013D EB08                <1>     jmp .no_next1
   113                              <1> 
   114                              <1> 
   115                              <1>     .next1:
   116 0000013F B0B3                <1>     mov al,179 ;single vertical bar
   117 00000141 268905              <1>     mov [es:di],ax
   118 00000144 83C702              <1>     add di,2
   119                              <1> 
   120                              <1> 
   121                              <1>     .no_next1:
   122 00000147 39D7                <1>     cmp di,dx ;================
   123 00000149 75E0                <1>     jnz vertical_bars
   124                              <1> 
   125                              <1> 
   126 0000014B 81C2A000            <1>     add dx,160
   127                              <1> 
   128                              <1> 
   129 0000014F 83C706              <1>     add di,6
   130                              <1> 
   131                              <1> 
   132 00000152 B0BA                <1>     mov al,186 ;double vertical bar
   133 00000154 268905              <1>     mov [es:di],ax
   134 00000157 83C702              <1>     add di,2
   135                              <1> 
   136                              <1> 
   137 0000015A 83C756              <1>     add di,86
   138                              <1> 
   139                              <1> 
   140 0000015D 89FE                <1>     mov si,di
   141 0000015F 83C618              <1>     add si,24
   142                              <1> 
   143                              <1> 
   144 00000162 268905              <1>     mov [es:di],ax
   145 00000165 83C702              <1>     add di,2
   146                              <1> 
   147                              <1> 
   148                              <1>     second_line:
   149                              <1> 
   150                              <1> 
   151 00000168 83C702              <1>     add di,2
   152                              <1>     
   153 0000016B 53                  <1>     push bx
   154 0000016C 56                  <1>     push si
   155 0000016D 8B36[A000]          <1>     mov si, [index1]
   156 00000171 8B9C[12B1]          <1>     mov bx, word [grid + si]
   157 00000175 83FB00              <1>     cmp bx, 0
   158 00000178 740A                <1>     je qq1
   159 0000017A 83C330              <1>     add bx, 0x30
   160 0000017D 89D8                <1>     mov ax, bx                   ;number 5
   161 0000017F B430                <1>     MOV AH, 00110000b
   162 00000181 268905              <1>     mov [es:di],ax
   163                              <1>     qq1:
   164 00000184 83C602              <1>     add si, 2
   165 00000187 8936[A000]          <1>     mov [index1], si
   166 0000018B 5E                  <1>     pop si
   167 0000018C 5B                  <1>     pop bx
   168 0000018D 83C704              <1>     add di,4
   169                              <1> 
   170 00000190 39F7                <1>     cmp di,si
   171 00000192 750D                <1>     jnz .next2
   172 00000194 B0BA                <1>     mov al,186 ;double vertical bar
   173 00000196 268905              <1>     mov [es:di],ax
   174 00000199 83C702              <1>     add di,2
   175 0000019C 83C618              <1>     add si,24
   176 0000019F EB08                <1>     jmp .no_next2
   177                              <1> 
   178                              <1> 
   179                              <1>     .next2:
   180 000001A1 B0B3                <1>     mov al,179 ;single vertical bar
   181 000001A3 268905              <1>     mov [es:di],ax
   182 000001A6 83C702              <1>     add di,2
   183                              <1> 
   184                              <1> 
   185                              <1>     .no_next2:
   186 000001A9 39D7                <1>     cmp di,dx ;================
   187 000001AB 75BB                <1>     jnz second_line
   188 000001AD 81C2A000            <1>     add dx,160
   189                              <1> 
   190                              <1> 
   191 000001B1 83C702              <1>     add di,2
   192                              <1> 
   193                              <1> 
   194 000001B4 53                  <1>     push bx
   195 000001B5 56                  <1>     push si
   196 000001B6 8B36[A000]          <1>     mov si, [index1]
   197 000001BA 8B9C[12B1]          <1>     mov bx, word [grid + si]
   198 000001BE 83FB00              <1>     cmp bx, 0
   199 000001C1 740A                <1>     je qq2
   200 000001C3 83C330              <1>     add bx, 0x30
   201 000001C6 89D8                <1>     mov ax, bx                   ;number 5
   202 000001C8 B430                <1>     MOV AH, 00110000b
   203 000001CA 268905              <1>     mov [es:di],ax
   204                              <1>     qq2:
   205 000001CD 83C602              <1>     add si, 2
   206 000001D0 8936[A000]          <1>     mov [index1], si
   207 000001D4 5E                  <1>     pop si
   208 000001D5 5B                  <1>     pop bx
   209 000001D6 83C704              <1>     add di,4
   210                              <1> 
   211 000001D9 B0BA                <1>     mov al,186 ;double vertical bar
   212 000001DB 268905              <1>     mov [es:di],ax
   213 000001DE 83C702              <1>     add di,2
   214                              <1> 
   215                              <1> 
   216 000001E1 83C756              <1>     add di,86
   217                              <1> 
   218                              <1> 
   219 000001E4 89FE                <1>     mov si,di
   220 000001E6 83C618              <1>     add si,24
   221                              <1> 
   222                              <1> 
   223 000001E9 268905              <1>     mov [es:di],ax
   224 000001EC 83C702              <1>     add di,2
   225                              <1> 
   226                              <1> 
   227                              <1>     third_line:
   228                              <1> 
   229                              <1> 
   230 000001EF 83C706              <1>     add di,6
   231                              <1> 
   232                              <1> 
   233 000001F2 39F7                <1>     cmp di,si
   234 000001F4 750D                <1>     jnz .next3
   235 000001F6 B0BA                <1>     mov al,186 ;double vertical bar
   236 000001F8 268905              <1>     mov [es:di],ax
   237 000001FB 83C702              <1>     add di,2
   238 000001FE 83C618              <1>     add si,24
   239 00000201 EB08                <1>     jmp .no_next3
   240                              <1> 
   241                              <1> 
   242                              <1>     .next3:
   243 00000203 B0B3                <1>     mov al,179 ;single vertical bar
   244 00000205 268905              <1>     mov [es:di],ax
   245 00000208 83C702              <1>     add di,2
   246                              <1> 
   247                              <1> 
   248                              <1>     .no_next3:
   249 0000020B 39D7                <1>     cmp di,dx ;================
   250                              <1> 
   251                              <1> 
   252 0000020D 75E0                <1>     jnz third_line
   253 0000020F 81C2A000            <1>     add dx,160
   254 00000213 83C706              <1>     add di,6
   255                              <1> 
   256                              <1> 
   257 00000216 B0BA                <1>     mov al,186 ;vertical bar
   258 00000218 268905              <1>     mov [es:di],ax
   259 0000021B 83C702              <1>     add di,2
   260                              <1> 
   261                              <1> 
   262 0000021E 83C756              <1>     add di,86
   263                              <1> 
   264                              <1> 
   265 00000221 89FE                <1>     mov si,di
   266 00000223 83C618              <1>     add si,24
   267                              <1> 
   268                              <1> 
   269                              <1>     ;yahan comparing krrhy hain ky 2lines wali me bhejna ha ya 3rd line wali me
   270                              <1> 
   271                              <1> 
   272 00000226 39DF                <1>     cmp di,bx ;S==============
   273 00000228 7463                <1>     jz fourth_3rdline
   274                              <1> 
   275                              <1> 
   276                              <1>     fourth_line:
   277                              <1> 
   278                              <1> 
   279                              <1>     .fourth_2lines:
   280                              <1> 
   281                              <1> 
   282 0000022A B0C7                <1>     mov al,199 ;double vertical bar + single horizontal bar
   283 0000022C 268905              <1>     mov [es:di],ax
   284 0000022F 83C702              <1>     add di,2
   285                              <1> 
   286                              <1> 
   287                              <1>     .two_lines_next:
   288                              <1> 
   289                              <1> 
   290 00000232 B0C4                <1>     mov al,196 ;horizontal bar
   291 00000234 268905              <1>     mov [es:di],ax
   292 00000237 83C702              <1>     add di,2
   293 0000023A 268905              <1>     mov [es:di],ax
   294 0000023D 83C702              <1>     add di,2
   295 00000240 268905              <1>     mov [es:di],ax
   296 00000243 83C702              <1>     add di,2
   297                              <1> 
   298                              <1> 
   299 00000246 39FE                <1>     cmp si,di
   300 00000248 750D                <1>     jnz .next5
   301                              <1> 
   302                              <1> 
   303 0000024A B0D7                <1>     mov al,215 ;cross double vertical bar + single horizontal bar
   304 0000024C 268905              <1>     mov [es:di],ax
   305 0000024F 83C702              <1>     add di,2
   306 00000252 83C618              <1>     add si,24
   307 00000255 EB08                <1>     jmp .no_next5
   308                              <1> 
   309                              <1> 
   310                              <1>     .next5:
   311                              <1> 
   312                              <1> 
   313 00000257 B0C5                <1>     mov al,197 ;cross single bars
   314 00000259 268905              <1>     mov [es:di],ax
   315 0000025C 83C702              <1>     add di,2
   316                              <1> 
   317                              <1> 
   318                              <1>     .no_next5:
   319                              <1> 
   320                              <1> 
   321 0000025F 39D7                <1>     cmp di, dx
   322 00000261 75CF                <1>     jnz .two_lines_next
   323                              <1> 
   324                              <1> 
   325 00000263 81C2A000            <1>     add dx,160
   326                              <1> 
   327                              <1> 
   328 00000267 B0C4                <1>     mov al,196 ;single horizontal bar
   329 00000269 268905              <1>     mov [es:di],ax
   330 0000026C 83C702              <1>     add di,2
   331 0000026F 268905              <1>     mov [es:di],ax
   332 00000272 83C702              <1>     add di,2
   333 00000275 268905              <1>     mov [es:di],ax
   334 00000278 83C702              <1>     add di,2
   335                              <1> 
   336                              <1> 
   337 0000027B B0B6                <1>     mov al,182 ;right border double vertical bar + single horizontal bar
   338 0000027D 268905              <1>     mov [es:di],ax
   339 00000280 83C702              <1>     add di,2
   340                              <1> 
   341                              <1> 
   342 00000283 83C756              <1>     add di,86
   343                              <1> 
   344                              <1> 
   345 00000286 89FE                <1>     mov si,di
   346 00000288 83C618              <1>     add si,24
   347                              <1> 
   348                              <1> 
   349 0000028B EB65                <1>     jmp loop_check
   350                              <1> 
   351                              <1> 
   352                              <1>     fourth_3rdline:
   353                              <1> 
   354                              <1> 
   355 0000028D B0CC                <1>     mov al,204 ;double bars
   356 0000028F 268905              <1>     mov [es:di],ax
   357 00000292 83C702              <1>     add di,2
   358                              <1> 
   359                              <1> 
   360                              <1>     third_line_next:
   361                              <1> 
   362                              <1> 
   363 00000295 B0CD                <1>     mov al,205 ;double bars
   364 00000297 268905              <1>     mov [es:di],ax
   365 0000029A 83C702              <1>     add di,2
   366 0000029D 268905              <1>     mov [es:di],ax
   367 000002A0 83C702              <1>     add di,2
   368 000002A3 268905              <1>     mov [es:di],ax
   369 000002A6 83C702              <1>     add di,2
   370                              <1> 
   371                              <1> 
   372 000002A9 39F7                <1>     cmp di,si
   373 000002AB 750D                <1>     jnz .next4
   374                              <1> 
   375                              <1> 
   376 000002AD B0CE                <1>     mov al,206 ;cross double bars
   377 000002AF 268905              <1>     mov [es:di],ax
   378 000002B2 83C702              <1>     add di,2
   379 000002B5 83C618              <1>     add si,24
   380 000002B8 EB08                <1>     jmp .no_next4
   381                              <1> 
   382                              <1> 
   383                              <1>     .next4:
   384 000002BA B0D8                <1>     mov al,216 ;cross double horizontal bar + single vertical bar
   385 000002BC 268905              <1>     mov [es:di],ax
   386 000002BF 83C702              <1>     add di,2
   387                              <1> 
   388                              <1> 
   389                              <1>     .no_next4:
   390 000002C2 39D7                <1>     cmp di, dx
   391 000002C4 75CF                <1>     jnz third_line_next
   392                              <1> 
   393                              <1> 
   394 000002C6 81C2A000            <1>     add dx,160
   395                              <1> 
   396                              <1> 
   397 000002CA B0CD                <1>     mov al,205 ;double horizontal bar
   398 000002CC 268905              <1>     mov [es:di],ax
   399 000002CF 83C702              <1>     add di,2
   400 000002D2 268905              <1>     mov [es:di],ax
   401 000002D5 83C702              <1>     add di,2
   402 000002D8 268905              <1>     mov [es:di],ax
   403 000002DB 83C702              <1>     add di,2
   404                              <1> 
   405                              <1> 
   406 000002DE B0B9                <1>     mov al,185 ;right border double horizontal bar + double vertical bar
   407 000002E0 268905              <1>     mov [es:di],ax
   408 000002E3 83C702              <1>     add di,2
   409                              <1> 
   410                              <1> 
   411 000002E6 83C756              <1>     add di,86
   412                              <1> 
   413                              <1> 
   414 000002E9 89FE                <1>     mov si,di
   415 000002EB 83C618              <1>     add si,24
   416                              <1> 
   417                              <1> 
   418 000002EE 81C38007            <1>     add bx,1920
   419                              <1> 
   420                              <1> 
   421                              <1>     loop_check:
   422 000002F2 49                  <1>     dec cx
   423 000002F3 83F900              <1>     cmp cx,0
   424 000002F6 0F8529FE            <1>     jnz nine_times
   425 000002FA C706[A000]0000      <1>     mov word[index1], 0
   426                              <1> 
   427 00000300 C3                  <1> ret
     7                                  %include "C:\COAL_new\Code\options_box.asm"
     1                              <1> ; ------Options Box On The Right------------
     2                              <1> 
     3 00000301 204D495354414B4553- <1> mistakes: db ' MISTAKES:'
     3 0000030A 3A                  <1>
     4 0000030B 0A00                <1> size6: dw size6-mistakes
     5 0000030D 20202F2033          <1> mistakes_out_of: db '  / 3'
     6 00000312 0500                <1> size55: dw size55-mistakes_out_of
     7 00000314 204E4F54455320      <1> notes: db ' NOTES '
     8                              <1> 
     9 0000031B 0700                <1> size7: dw size7-notes
    10 0000031D 5072657373203E204E  <1> notes_extend: db 'Press > N'
    11 00000326 0900                <1> size8: dw size8-notes_extend
    12 00000328 20554E444F20        <1> undo: db ' UNDO '
    13 0000032E 0600                <1> size9: dw size9-undo
    14 00000330 5072657373203E2055  <1> undo_extend: db 'Press > U'
    15 00000339 0900                <1> size10: dw size10-undo_extend
    16 0000033B 20455241534520      <1> erase: db ' ERASE '
    17 00000342 0700                <1> size11: dw size11-erase
    18 00000344 5072657373203E2045  <1> erase_extend: db 'Press > E'
    19 0000034D 0900                <1> size12: dw size12-erase_extend
    20                              <1> 
    21                              <1> options_box:
    22                              <1> 
    23 0000034F 60                  <1>     pusha
    24                              <1> 
    25 00000350 B435                <1>     mov ah,00110101b
    26 00000352 BF9403              <1>     mov di,916
    27 00000355 BE0000              <1>     mov si,0
    28                              <1> 
    29                              <1>     .mistakes_display: ;mistakes text display
    30                              <1> 
    31 00000358 8A84[0103]          <1>     mov al,[mistakes+si]
    32 0000035C 268905              <1>     mov [es:di],AX
    33 0000035F 83C702              <1>     add di,2
    34 00000362 46                  <1>     inc si
    35 00000363 3B36[0B03]          <1>     cmp si,[size6]
    36 00000367 75EF                <1>     jnz .mistakes_display
    37                              <1> 
    38 00000369 B431                <1>     mov ah, 00110001b
    39 0000036B BE0000              <1>     mov si, 0
    40 0000036E 83C704              <1>     add di, 4
    41                              <1>     .mistakes_outof_display: ;mistakes text display
    42                              <1> 
    43 00000371 8A84[0D03]          <1>     mov al,[mistakes_out_of + si]
    44 00000375 268905              <1>     mov [es:di],AX
    45 00000378 83C702              <1>     add di,2
    46 0000037B 46                  <1>     inc si
    47 0000037C 3B36[1203]          <1>     cmp si,[size55]
    48 00000380 75EF                <1>     jnz .mistakes_outof_display
    49                              <1>    
    50 00000382 BF7205              <1>     mov di,1394 ;starting of line (top left corner of box)
    51 00000385 B430                <1>     mov ah,00110000b
    52 00000387 B91400              <1>     mov cx,20 ;width of box for upper line comparison
    53 0000038A B0DA                <1>     mov al,218 ;top left corner
    54 0000038C 268905              <1>     mov [es:di],ax
    55 0000038F 83C702              <1>     add di,2
    56 00000392 B0C4                <1>     mov al, 196
    57 00000394 F3AB                <1>     rep stosw
    58                              <1> 
    59 00000396 B0BF                <1>     mov al,191 ;top right corner
    60 00000398 268905              <1>     mov [es:di],ax
    61 0000039B 83C702              <1>     add di,2
    62                              <1>     
    63                              <1> 
    64 0000039E BF1206              <1>     mov di,1554 ;starting of second line
    65                              <1> 
    66 000003A1 B90200              <1>     mov cx, 2
    67                              <1> 
    68                              <1>     other_lines: ;right and left vertical line of box
    69                              <1> 
    70                              <1> 
    71 000003A4 B0B3                <1>     mov al,179 ;vertical bar
    72 000003A6 268905              <1>     mov [es:di],ax
    73 000003A9 83C72A              <1>     add di,42
    74 000003AC B0B3                <1>     mov al,179
    75 000003AE 268905              <1>     mov [es:di],ax
    76 000003B1 83C778              <1>     add di,120
    77 000003B4 83E902              <1>     sub cx,2
    78 000003B7 83F900              <1>     cmp cx,0
    79 000003BA 75E8                <1>     jnz other_lines
    80                              <1> 
    81 000003BC BFB206              <1>     mov di, 1714
    82 000003BF B0C0                <1>     mov al,192 ;bottom left corner
    83 000003C1 268905              <1>     mov [es:di],ax
    84                              <1> 
    85 000003C4 B91400              <1>     mov cx,20 ;width of box for upper line comparison
    86 000003C7 83C702              <1>     add di,2
    87 000003CA B0C4                <1>     mov al, 196
    88 000003CC F3AB                <1>     rep stosw
    89                              <1> 
    90 000003CE B0D9                <1>     mov al, 217
    91 000003D0 AB                  <1>     stosw
    92                              <1> 
    93                              <1> 
    94                              <1>     ;--------Options In Box--------------
    95                              <1> 
    96                              <1> 
    97 000003D1 B416                <1>     mov ah,00010110b
    98 000003D3 BF1606              <1>     mov di, 1558
    99 000003D6 BE0000              <1>     mov si,0
   100                              <1> 
   101 000003D9 B41E                <1>     mov ah,00011110b
   102                              <1> 
   103                              <1> 
   104                              <1>     .notes_text: ;-----------
   105 000003DB 8A84[1403]          <1>         mov al,[notes+si]
   106 000003DF 268905              <1>         mov [es:di],ax
   107 000003E2 83C702              <1>         add di,2
   108 000003E5 46                  <1>         inc si
   109 000003E6 3B36[1B03]          <1>         cmp si,[size7]
   110 000003EA 75EF                <1>         jnz .notes_text
   111                              <1> 
   112                              <1> 
   113 000003EC B434                <1>     mov ah,00110100b
   114 000003EE BE0000              <1>     mov si,0
   115 000003F1 83C704              <1>     add di, 4
   116                              <1> 
   117                              <1> 
   118                              <1>     .notes_buttons:
   119 000003F4 8A84[1D03]          <1>         mov al,[notes_extend+si]
   120 000003F8 268905              <1>         mov [es:di],ax
   121 000003FB 83C702              <1>         add di,2
   122 000003FE 46                  <1>         inc si
   123 000003FF 3B36[2603]          <1>         cmp si,[size8]
   124 00000403 75EF                <1>         jnz .notes_buttons
   125                              <1> 
   126                              <1> 
   127 00000405 BFF207              <1>     mov di,2034 ;starting of line (top left corner of box)
   128 00000408 B430                <1>     mov ah,00110000b
   129 0000040A B91400              <1>     mov cx,20 ;width of box for upper line comparison
   130 0000040D B0DA                <1>     mov al,218 ;top left corner
   131 0000040F 268905              <1>     mov [es:di],ax
   132 00000412 83C702              <1>     add di,2
   133 00000415 B0C4                <1>     mov al, 196
   134 00000417 F3AB                <1>     rep stosw
   135                              <1> 
   136 00000419 B0BF                <1>     mov al,191 ;top right corner
   137 0000041B 268905              <1>     mov [es:di],ax
   138 0000041E 83C702              <1>     add di,2
   139                              <1>     
   140                              <1> 
   141 00000421 BF9208              <1>     mov di,2194 ;starting of second line
   142                              <1> 
   143 00000424 B90200              <1>     mov cx, 2
   144                              <1> 
   145                              <1>     other_lines1: ;right and left vertical line of box
   146                              <1> 
   147                              <1> 
   148 00000427 B0B3                <1>     mov al,179 ;vertical bar
   149 00000429 268905              <1>     mov [es:di],ax
   150 0000042C 83C72A              <1>     add di,42
   151 0000042F B0B3                <1>     mov al,179
   152 00000431 268905              <1>     mov [es:di],ax
   153 00000434 83C778              <1>     add di,120
   154 00000437 83E902              <1>     sub cx,2
   155 0000043A 83F900              <1>     cmp cx,0
   156 0000043D 75E8                <1>     jnz other_lines1
   157                              <1> 
   158 0000043F BF3209              <1>     mov di, 2354
   159 00000442 B0C0                <1>     mov al,192 ;bottom left corner
   160 00000444 268905              <1>     mov [es:di],ax
   161                              <1> 
   162 00000447 B91400              <1>     mov cx,20 ;width of box for upper line comparison
   163 0000044A 83C702              <1>     add di,2
   164 0000044D B0C4                <1>     mov al, 196
   165 0000044F F3AB                <1>     rep stosw
   166                              <1> 
   167 00000451 B0D9                <1>     mov al, 217
   168 00000453 AB                  <1>     stosw
   169                              <1>     
   170 00000454 BF9208              <1>     mov di, 2194
   171 00000457 83C704              <1>     add di,4
   172                              <1> 
   173 0000045A BE0000              <1>     mov si,0
   174 0000045D B41E                <1>     mov ah,00011110b
   175                              <1> 
   176                              <1> 
   177                              <1>     .undo_text:;-----------
   178 0000045F 8A84[2803]          <1>         mov al,[undo+si]
   179 00000463 268905              <1>         mov [es:di],ax
   180 00000466 83C702              <1>         add di,2
   181 00000469 46                  <1>         inc si
   182 0000046A 3B36[2E03]          <1>         cmp si,[size9]
   183 0000046E 75EF                <1>         jnz .undo_text
   184                              <1> 
   185                              <1> 
   186 00000470 B434                <1>     mov ah,00110100b
   187 00000472 BE0000              <1>     mov si,0
   188 00000475 83C706              <1>     add di, 6
   189                              <1> 
   190                              <1>     .undo_button:
   191 00000478 8A84[3003]          <1>         mov al,[undo_extend+si]
   192 0000047C 268905              <1>         mov [es:di],ax
   193 0000047F 83C702              <1>         add di,2
   194 00000482 46                  <1>         inc si
   195 00000483 3B36[3903]          <1>         cmp si,[size10]
   196 00000487 75EF                <1>         jnz .undo_button
   197                              <1> 
   198                              <1> 
   199 00000489 BF720A              <1>     mov di,2674 ;starting of line (top left corner of box)
   200 0000048C B430                <1>     mov ah,00110000b
   201 0000048E B91400              <1>     mov cx,20 ;width of box for upper line comparison
   202 00000491 B0DA                <1>     mov al,218 ;top left corner
   203 00000493 268905              <1>     mov [es:di],ax
   204 00000496 83C702              <1>     add di,2
   205 00000499 B0C4                <1>     mov al, 196
   206 0000049B F3AB                <1>     rep stosw
   207                              <1> 
   208 0000049D B0BF                <1>     mov al,191 ;top right corner
   209 0000049F 268905              <1>     mov [es:di],ax
   210 000004A2 83C702              <1>     add di,2
   211                              <1>     
   212                              <1> 
   213 000004A5 BF120B              <1>     mov di,2834 ;starting of second line
   214                              <1> 
   215 000004A8 B90200              <1>     mov cx, 2
   216                              <1> 
   217                              <1>     other_lines2: ;right and left vertical line of box
   218                              <1> 
   219                              <1> 
   220 000004AB B0B3                <1>     mov al,179 ;vertical bar
   221 000004AD 268905              <1>     mov [es:di],ax
   222 000004B0 83C72A              <1>     add di,42
   223 000004B3 B0B3                <1>     mov al,179
   224 000004B5 268905              <1>     mov [es:di],ax
   225 000004B8 83C778              <1>     add di,120
   226 000004BB 83E902              <1>     sub cx,2
   227 000004BE 83F900              <1>     cmp cx,0
   228 000004C1 75E8                <1>     jnz other_lines2
   229                              <1> 
   230 000004C3 BFB20B              <1>     mov di, 2994
   231 000004C6 B0C0                <1>     mov al,192 ;bottom left corner
   232 000004C8 268905              <1>     mov [es:di],ax
   233                              <1> 
   234 000004CB B91400              <1>     mov cx,20 ;width of box for upper line comparison
   235 000004CE 83C702              <1>     add di,2
   236 000004D1 B0C4                <1>     mov al, 196
   237 000004D3 F3AB                <1>     rep stosw
   238                              <1> 
   239 000004D5 B0D9                <1>     mov al, 217
   240 000004D7 AB                  <1>     stosw
   241                              <1> 
   242 000004D8 BF120B              <1>     mov di, 2834
   243                              <1> 
   244 000004DB 83C704              <1>     add di,4
   245                              <1> 
   246 000004DE BE0000              <1>     mov si,0
   247                              <1> 
   248 000004E1 B41E                <1>     mov ah,00011110b
   249                              <1> 
   250                              <1> 
   251                              <1>     .erase_text:;-----------
   252 000004E3 8A84[3B03]          <1>         mov al,[erase+si]
   253 000004E7 268905              <1>         mov [es:di],ax
   254 000004EA 83C702              <1>         add di,2
   255 000004ED 46                  <1>         inc si
   256 000004EE 3B36[4203]          <1>         cmp si,[size11]
   257 000004F2 75EF                <1>         jnz .erase_text
   258                              <1> 
   259                              <1> 
   260 000004F4 B434                <1>     mov ah,00110100b
   261 000004F6 BE0000              <1>     mov si,0
   262 000004F9 83C704              <1>     add di, 4
   263                              <1> 
   264                              <1>     .erase_button:
   265 000004FC 8A84[4403]          <1>         mov al,[erase_extend+si]
   266 00000500 268905              <1>         mov [es:di],ax
   267 00000503 83C702              <1>         add di,2
   268 00000506 46                  <1>         inc si
   269 00000507 3B36[4D03]          <1>         cmp si,[size12]
   270 0000050B 75EF                <1>         jnz .erase_button
   271                              <1> 
   272                              <1> 
   273                              <1> 
   274 0000050D 61                  <1>     popa
   275                              <1> 
   276                              <1> 
   277 0000050E C3                  <1> ret
   278                              <1> 
     8                                  %include "C:\COAL_new\Code\scrolled_grid.asm"
     1                              <1> 
     2 0000050F 6C00                <1> index2: dw 108
     3                              <1> 
     4                              <1> last_3_rows:
     5                              <1>    
     6 00000511 BE0000              <1>    mov si, 0
     7 00000514 BF0000              <1>    mov di, 0
     8                              <1> 
     9 00000517 B90300              <1>     mov cx,3 ;loop counter for 3 rows
    10 0000051A BA4200              <1>     mov dx,66 ;160 will be added evertime...used for checking line end
    11 0000051D BE1800              <1>     mov si,24 ;horizontal line change after every 3 boxes
    12 00000520 BBE006              <1>     mov bx,1760
    13                              <1> 
    14                              <1> 
    15 00000523 83C722              <1>     add di,34;for positioning...yahan mul wala formula lgana he
    16 00000526 01FA                <1>     add dx,di;same as above
    17 00000528 01FB                <1>     add bx,di
    18                              <1> 
    19                              <1> 
    20 0000052A 01FE                <1>     add si,di ;adjust after positioning
    21                              <1> 
    22                              <1> 
    23                              <1>     three_times:
    24                              <1> 
    25                              <1> 
    26 0000052C B0BA                <1>     mov al,186 ;vertical bar (changed to thick bar)
    27 0000052E 268905              <1>     mov [es:di],ax
    28 00000531 83C702              <1>     add di,2
    29                              <1> 
    30                              <1> 
    31                              <1>     vertical_bars_3:
    32                              <1> 
    33                              <1> 
    34 00000534 83C706              <1>     add di,6
    35                              <1> 
    36                              <1> 
    37 00000537 39F7                <1>     cmp di,si
    38 00000539 750D                <1>     jnz next1
    39                              <1> 
    40                              <1> 
    41 0000053B B0BA                <1>     mov al,186 ;vertical bar
    42 0000053D 268905              <1>     mov [es:di],ax
    43 00000540 83C702              <1>     add di,2
    44 00000543 83C618              <1>     add si,24
    45 00000546 EB08                <1>     jmp no_next1
    46                              <1> 
    47                              <1> 
    48                              <1>     next1:
    49 00000548 B0B3                <1>     mov al,179 ;vertical bar
    50 0000054A 268905              <1>     mov [es:di],ax
    51 0000054D 83C702              <1>     add di,2
    52                              <1> 
    53                              <1> 
    54                              <1>     no_next1:
    55 00000550 39D7                <1>     cmp di,dx ;================
    56 00000552 75E0                <1>     jnz vertical_bars_3
    57 00000554 81C2A000            <1>     add dx,160
    58                              <1> 
    59                              <1> 
    60 00000558 83C706              <1>     add di,6
    61                              <1> 
    62                              <1> 
    63 0000055B B0BA                <1>     mov al,186 ;vertical bar
    64 0000055D 268905              <1>     mov [es:di],ax
    65 00000560 83C702              <1>     add di,2
    66                              <1> 
    67                              <1> 
    68 00000563 83C756              <1>     add di,86
    69                              <1> 
    70                              <1> 
    71 00000566 89FE                <1>     mov si,di
    72 00000568 83C618              <1>     add si,24
    73                              <1> 
    74                              <1> 
    75 0000056B B0BA                <1>     mov al,186 ;vertical bar
    76 0000056D 268905              <1>     mov [es:di],ax
    77 00000570 83C702              <1>     add di,2
    78                              <1> 
    79                              <1> 
    80                              <1>     second_line_3:
    81                              <1> 
    82                              <1> 
    83 00000573 83C702              <1>     add di,2
    84                              <1> 
    85                              <1> 
    86 00000576 53                  <1>     push bx
    87 00000577 56                  <1>     push si
    88 00000578 8B36[0F05]          <1>     mov si, [index2]
    89 0000057C 8B9C[12B1]          <1>     mov bx, word[grid + si]
    90 00000580 83FB00              <1>     cmp bx, 0
    91 00000583 740A                <1>     je qq3
    92 00000585 83C330              <1>     add bx, 0x30
    93 00000588 89D8                <1>     mov ax, bx                   ;number 5
    94 0000058A B430                <1>     MOV AH, 00110000b
    95 0000058C 268905              <1>     mov [es:di],ax
    96                              <1>     qq3:
    97 0000058F 83C602              <1>     add si, 2
    98 00000592 8936[0F05]          <1>     mov [index2], si
    99 00000596 5E                  <1>     pop si
   100 00000597 5B                  <1>     pop bx
   101 00000598 83C704              <1>     add di,4
   102                              <1> 
   103                              <1> 
   104 0000059B 39F7                <1>     cmp di,si ;================
   105                              <1> 
   106                              <1> 
   107 0000059D 750D                <1>     jnz next2
   108 0000059F B0BA                <1>     mov al,186 ;vertical bar
   109 000005A1 268905              <1>     mov [es:di],ax
   110 000005A4 83C702              <1>     add di,2
   111 000005A7 83C618              <1>     add si,24
   112 000005AA EB08                <1>     jmp no_next2
   113                              <1> 
   114                              <1> 
   115                              <1>     next2:
   116 000005AC B0B3                <1>     mov al,179 ;vertical bar
   117 000005AE 268905              <1>     mov [es:di],ax
   118 000005B1 83C702              <1>     add di,2
   119                              <1> 
   120                              <1> 
   121                              <1>     no_next2:
   122 000005B4 39D7                <1>     cmp di,dx ;================
   123 000005B6 75BB                <1>     jnz second_line_3
   124 000005B8 81C2A000            <1>     add dx,160
   125                              <1> 
   126                              <1> 
   127 000005BC 83C702              <1>     add di,2
   128                              <1> 
   129                              <1> 
   130 000005BF 53                  <1>     push bx
   131 000005C0 56                  <1>     push si
   132 000005C1 8B36[0F05]          <1>     mov si, [index2]
   133 000005C5 8B9C[12B1]          <1>     mov bx, word[grid + si]
   134 000005C9 83FB00              <1>     cmp bx, 0
   135 000005CC 740A                <1>     je qq4
   136 000005CE 83C330              <1>     add bx, 0x30
   137 000005D1 89D8                <1>     mov ax, bx                   ;number 5
   138 000005D3 B430                <1>     MOV AH, 00110000b
   139 000005D5 268905              <1>     mov [es:di],ax
   140                              <1>     qq4:
   141 000005D8 83C602              <1>     add si, 2
   142 000005DB 8936[0F05]          <1>     mov [index2], si
   143 000005DF 5E                  <1>     pop si
   144 000005E0 5B                  <1>     pop bx
   145 000005E1 83C704              <1>     add di,4
   146                              <1> 
   147                              <1> 
   148 000005E4 B0BA                <1>     mov al,186 ;vertical bar
   149 000005E6 268905              <1>     mov [es:di],ax
   150 000005E9 83C702              <1>     add di,2
   151                              <1> 
   152                              <1> 
   153 000005EC 83C756              <1>     add di,86
   154                              <1> 
   155                              <1> 
   156 000005EF 89FE                <1>     mov si,di
   157 000005F1 83C618              <1>     add si,24
   158                              <1> 
   159                              <1> 
   160 000005F4 B0BA                <1>     mov al,186 ;vertical bar
   161 000005F6 268905              <1>     mov [es:di],ax
   162 000005F9 83C702              <1>     add di,2
   163                              <1> 
   164                              <1> 
   165                              <1>     third_line_3:
   166                              <1> 
   167                              <1> 
   168 000005FC 83C706              <1>     add di,6
   169                              <1> 
   170                              <1> 
   171 000005FF 39F7                <1>     cmp di,si
   172 00000601 750D                <1>     jnz next3
   173 00000603 B0BA                <1>     mov al,186 ;vertical bar
   174 00000605 268905              <1>     mov [es:di],ax
   175 00000608 83C702              <1>     add di,2
   176 0000060B 83C618              <1>     add si,24
   177 0000060E EB08                <1>     jmp no_next3
   178                              <1> 
   179                              <1> 
   180                              <1>     next3:
   181 00000610 B0B3                <1>     mov al,179 ;vertical bar
   182 00000612 268905              <1>     mov [es:di],ax
   183 00000615 83C702              <1>     add di,2
   184                              <1> 
   185                              <1> 
   186                              <1>     no_next3:
   187 00000618 39D7                <1>     cmp di,dx ;================
   188                              <1> 
   189                              <1> 
   190 0000061A 75E0                <1>     jnz third_line_3
   191 0000061C 81C2A000            <1>     add dx,160
   192 00000620 83C706              <1>     add di,6
   193                              <1> 
   194                              <1> 
   195 00000623 B0BA                <1>     mov al,186 ;vertical bar
   196 00000625 268905              <1>     mov [es:di],ax
   197 00000628 83C702              <1>     add di,2
   198                              <1> 
   199                              <1> 
   200 0000062B 83C756              <1>     add di,86
   201                              <1> 
   202                              <1> 
   203 0000062E 89FE                <1>     mov si,di
   204 00000630 83C618              <1>     add si,24
   205                              <1> 
   206                              <1> 
   207                              <1>     ;yahan comparing krty hain ky 2lines wali me bhejna ha ya 3r line wali me...
   208                              <1> 
   209                              <1> 
   210 00000633 39DF                <1>     cmp di,bx ;================
   211 00000635 7463                <1>     jz fourth_3rdline_3
   212                              <1> 
   213                              <1> 
   214                              <1>     fourth_line_3:
   215                              <1> 
   216                              <1> 
   217                              <1>     fourth_2lines_3:
   218                              <1> 
   219                              <1> 
   220 00000637 B0C7                <1>     mov al,199 ;horizontal bar (in place of bottom left corner)
   221 00000639 268905              <1>     mov [es:di],ax
   222 0000063C 83C702              <1>     add di,2
   223                              <1> 
   224                              <1> 
   225                              <1>     two_lines_next_3:
   226                              <1> 
   227                              <1> 
   228 0000063F B0C4                <1>     mov al,196 ;horizontal bar
   229 00000641 268905              <1>     mov [es:di],ax
   230 00000644 83C702              <1>     add di,2
   231 00000647 268905              <1>     mov [es:di],ax
   232 0000064A 83C702              <1>     add di,2
   233 0000064D 268905              <1>     mov [es:di],ax
   234 00000650 83C702              <1>     add di,2
   235                              <1> 
   236                              <1> 
   237 00000653 39FE                <1>     cmp si,di
   238 00000655 750D                <1>     jnz next5
   239                              <1> 
   240                              <1> 
   241 00000657 B0D7                <1>     mov al,215 ;horizontal bar
   242 00000659 268905              <1>     mov [es:di],ax
   243 0000065C 83C702              <1>     add di,2
   244 0000065F 83C618              <1>     add si,24
   245 00000662 EB08                <1>     jmp no_next5
   246                              <1> 
   247                              <1> 
   248                              <1>     next5:
   249                              <1> 
   250                              <1> 
   251 00000664 B0C5                <1>     mov al,197 ;horizontal bar
   252 00000666 268905              <1>     mov [es:di],ax
   253 00000669 83C702              <1>     add di,2
   254                              <1>        
   255                              <1>     no_next5:
   256                              <1> 
   257                              <1> 
   258 0000066C 39D7                <1>     cmp di, dx
   259 0000066E 75CF                <1>     jnz two_lines_next_3
   260                              <1> 
   261                              <1> 
   262 00000670 81C2A000            <1>     add dx,160
   263                              <1> 
   264                              <1> 
   265 00000674 B0C4                <1>     mov al,196 ;horizontal bar
   266 00000676 268905              <1>     mov [es:di],ax
   267 00000679 83C702              <1>     add di,2
   268 0000067C 268905              <1>     mov [es:di],ax
   269 0000067F 83C702              <1>     add di,2
   270 00000682 268905              <1>     mov [es:di],ax
   271 00000685 83C702              <1>     add di,2
   272                              <1> 
   273                              <1> 
   274 00000688 B0B6                <1>     mov al,182 ;horizontal bar (in place of bottom right corner)
   275 0000068A 268905              <1>     mov [es:di],ax
   276 0000068D 83C702              <1>     add di,2
   277                              <1> 
   278                              <1> 
   279 00000690 83C756              <1>     add di,86
   280                              <1> 
   281                              <1> 
   282 00000693 89FE                <1>     mov si,di
   283 00000695 83C618              <1>     add si,24
   284                              <1> 
   285                              <1> 
   286 00000698 EB65                <1>     jmp loop_check_3
   287                              <1> 
   288                              <1> 
   289                              <1>     fourth_3rdline_3:
   290                              <1> 
   291                              <1> 
   292 0000069A B0C8                <1>     mov al,200 ;horizontal bar (in place of bottom left corner)
   293 0000069C 268905              <1>     mov [es:di],ax
   294 0000069F 83C702              <1>     add di,2
   295                              <1> 
   296                              <1> 
   297                              <1>     third_line_next_3:
   298                              <1> 
   299                              <1> 
   300 000006A2 B0CD                <1>     mov al,205 ;horizontal bar
   301 000006A4 268905              <1>     mov [es:di],ax
   302 000006A7 83C702              <1>     add di,2
   303 000006AA 268905              <1>     mov [es:di],ax
   304 000006AD 83C702              <1>     add di,2
   305 000006B0 268905              <1>     mov [es:di],ax
   306 000006B3 83C702              <1>     add di,2
   307                              <1> 
   308                              <1> 
   309 000006B6 39F7                <1>     cmp di,si
   310 000006B8 750D                <1>     jnz next4
   311                              <1> 
   312                              <1> 
   313 000006BA B0CA                <1>     mov al,202 ;horizontal bar (in place of bottom left corner)
   314 000006BC 268905              <1>     mov [es:di],ax
   315 000006BF 83C702              <1>     add di,2
   316 000006C2 83C618              <1>     add si,24
   317 000006C5 EB08                <1>     jmp no_next4
   318                              <1> 
   319                              <1> 
   320                              <1>     next4:
   321 000006C7 B0CF                <1>     mov al,207 ;horizontal bar (in place of bottom left corner)
   322 000006C9 268905              <1>     mov [es:di],ax
   323 000006CC 83C702              <1>     add di,2
   324                              <1> 
   325                              <1> 
   326                              <1>     no_next4:
   327 000006CF 39D7                <1>     cmp di, dx
   328 000006D1 75CF                <1>     jnz third_line_next_3
   329                              <1> 
   330                              <1> 
   331 000006D3 81C2A000            <1>     add dx,160
   332                              <1> 
   333                              <1> 
   334 000006D7 B0CD                <1>     mov al,205 ;horizontal bar
   335 000006D9 268905              <1>     mov [es:di],ax
   336 000006DC 83C702              <1>     add di,2
   337 000006DF 268905              <1>     mov [es:di],ax
   338 000006E2 83C702              <1>     add di,2
   339 000006E5 268905              <1>     mov [es:di],ax
   340 000006E8 83C702              <1>     add di,2
   341                              <1> 
   342                              <1> 
   343 000006EB B0BC                <1>     mov al,188 ;horizontal bar (in place of bottom right corner)
   344 000006ED 268905              <1>     mov [es:di],ax
   345 000006F0 83C702              <1>     add di,2
   346                              <1> 
   347                              <1> 
   348 000006F3 83C756              <1>     add di,86
   349                              <1> 
   350                              <1> 
   351 000006F6 89FE                <1>     mov si,di
   352 000006F8 83C618              <1>     add si,24
   353                              <1> 
   354                              <1> 
   355 000006FB 81C38007            <1>     add bx,1920
   356                              <1> 
   357                              <1> 
   358                              <1>     loop_check_3:
   359 000006FF 49                  <1>     dec cx
   360 00000700 83F900              <1>     cmp cx,0
   361 00000703 0F8525FE            <1>     jnz three_times
   362                              <1> 
   363 00000707 C706[0F05]6C00      <1>     mov word [index2], 108
   364                              <1> 
   365                              <1> ;---------BUTTON INSTRUCTIONS FOR GOING DOWN------------
   366                              <1> 
   367 0000070D 60                  <1>     pusha
   368                              <1>     .we_go_up:
   369                              <1> 
   370 0000070E BF5402              <1>         mov di, 596
   371 00000711 B90E00              <1>         mov cx, 14
   372 00000714 BE[77B8]            <1>         mov si, button_go_up
   373 00000717 B436                <1>         mov ah, 00110110b
   374                              <1> 
   375                              <1>         .going_up:
   376                              <1> 
   377 00000719 8A04                <1>         mov al, [si]
   378 0000071B 268905              <1>         mov [es:di], ax
   379 0000071E 83C702              <1>         add di, 2
   380 00000721 83C601              <1>         add si, 1
   381 00000724 49                  <1>         dec cx
   382 00000725 75F2                <1>         jnz .going_up
   383                              <1> 
   384 00000727 B018                <1>         mov al, 24
   385 00000729 268905              <1>         mov [es:di], ax
   386                              <1> 
   387 0000072C 61                  <1>     popa
   388                              <1> 
   389                              <1> 
   390 0000072D C3                  <1> ret
     9                                  %include "C:\COAL_new\Code\ending_screen.asm"
     1                              <1> ;---------Ending Screen Display Subroutine-------------
     2                              <1> 
     3 0000072E E9E401              <1> jmp ending_screen
     4                              <1> 
     5                              <1> %include "C:\COAL_new\Code\print_string.asm"
     1                              <2> ; Function to print a string at specified x, y with attribute
     2                              <2> print_string:
     3 00000731 55                  <2>     push bp
     4 00000732 89E5                <2>     mov bp, sp
     5 00000734 06                  <2>     push es
     6 00000735 50                  <2>     push ax
     7 00000736 51                  <2>     push cx
     8 00000737 56                  <2>     push si
     9 00000738 57                  <2>     push di
    10                              <2> 
    11                              <2> 
    12 00000739 B800B8              <2>     mov ax, 0xb800
    13 0000073C 8EC0                <2>     mov es, ax
    14                              <2> 
    15                              <2> 
    16 0000073E B050                <2>     mov al, 80
    17 00000740 F6660A              <2>     mul byte [bp + 10]        ; AL * y
    18 00000743 03460C              <2>     add ax, [bp + 12]         ; Add x position
    19 00000746 D1E0                <2>     shl ax, 1            
    20 00000748 89C7                <2>     mov di, ax
    21                              <2> 
    22                              <2> 
    23 0000074A 8B7606              <2>     mov si, [bp + 6]          ; string memory
    24 0000074D 8B4E04              <2>     mov cx, [bp + 4]          ; string length
    25 00000750 8A6608              <2>     mov ah, [bp + 8]          ; attribute
    26                              <2> 
    27                              <2> 
    28                              <2> printing:
    29 00000753 8A04                <2>     mov al, [si]              
    30 00000755 268905              <2>     mov [es:di], ax          
    31 00000758 83C702              <2>     add di, 2                
    32 0000075B 83C601              <2>     add si, 1                    
    33 0000075E 83E901              <2>     sub cx, 1                    
    34 00000761 75F0                <2>     jnz printing
    35                              <2> 
    36                              <2> 
    37 00000763 5F                  <2>     pop di
    38 00000764 5E                  <2>     pop si
    39 00000765 59                  <2>     pop cx
    40 00000766 58                  <2>     pop ax
    41 00000767 07                  <2>     pop es
    42 00000768 5D                  <2>     pop bp
    43 00000769 C20A00              <2>     ret 10  
    44                              <2> 
    45                              <2> 
    46                              <2> 
    47                              <2> printnum: 
    48 0000076C 55                  <2>  push bp
    49 0000076D 89E5                <2>  mov bp, sp
    50 0000076F 06                  <2>  push es
    51 00000770 50                  <2>  push ax
    52 00000771 53                  <2>  push bx
    53 00000772 51                  <2>  push cx
    54 00000773 52                  <2>  push dx
    55 00000774 57                  <2>  push di
    56 00000775 B800B8              <2>  mov ax, 0xb800
    57 00000778 8EC0                <2>  mov es, ax ; point es to video base
    58 0000077A 8B4604              <2>  mov ax, [bp+4] ; load number in ax
    59 0000077D BB0A00              <2>  mov bx, 10 ; use base 10 for division
    60 00000780 B90000              <2>  mov cx, 0 ; initialize count of digits
    61 00000783 BA0000              <2> nextdigit: mov dx, 0 ; zero upper half of dividend
    62 00000786 F7F3                <2>  div bx ; divide by 10
    63 00000788 80C230              <2>  add dl, 0x30 ; convert digit into ascii value
    64 0000078B 52                  <2>  push dx ; save ascii value on stack
    65 0000078C 41                  <2>  inc cx ; increment count of values
    66 0000078D 83F800              <2>  cmp ax, 0 ; is the quotient zero
    67 00000790 75F1                <2>  jnz nextdigit ; if no divide it again
    68 00000792 BF2C01              <2>  mov di, 300 ; point di to top left column
    69 00000795 5A                  <2>  nextpos: pop dx ; remove a digit from the stack
    70 00000796 B631                <2>  mov dh, 00110001b ; use normal attribute
    71 00000798 268915              <2>  mov [es:di], dx ; print char on screen
    72 0000079B 83C702              <2>  add di, 2 ; move to next screen location
    73 0000079E E2F5                <2>  loop nextpos ; repeat for all digits on stack
    74 000007A0 5F                  <2>  pop di
    75 000007A1 5A                  <2>  pop dx
    76 000007A2 59                  <2>  pop cx
    77 000007A3 5B                  <2>  pop bx
    78 000007A4 58                  <2>  pop ax
    79 000007A5 07                  <2>  pop es
    80 000007A6 5D                  <2>  pop bp
    81 000007A7 C3                  <2>  ret
     6                              <1> 
     7                              <1> 
     8                              <1> print_number_at_position:
     9 000007A8 55                  <1>     push bp
    10 000007A9 89E5                <1>     mov bp, sp
    11 000007AB 06                  <1>     push es
    12 000007AC 50                  <1>     push ax
    13 000007AD 53                  <1>     push bx
    14 000007AE 51                  <1>     push cx
    15 000007AF 52                  <1>     push dx
    16 000007B0 57                  <1>     push di
    17 000007B1 B800B8              <1>     mov ax, 0xb800
    18 000007B4 8EC0                <1>     mov es, ax
    19 000007B6 8B4604              <1>     mov ax, [bp+4]
    20 000007B9 BB5000              <1>     mov bx, 80
    21 000007BC F7E3                <1>     mul bx
    22 000007BE 034606              <1>     add ax, [bp+6]
    23 000007C1 D1E0                <1>     shl ax, 1
    24 000007C3 89C7                <1>     mov di, ax
    25 000007C5 8B4608              <1>     mov ax, [bp+8]
    26 000007C8 BB0A00              <1>     mov bx, 10
    27 000007CB B90000              <1>     mov cx, 0
    28                              <1> convert_to_digits:
    29 000007CE BA0000              <1>     mov dx, 0
    30 000007D1 F7F3                <1>     div bx
    31 000007D3 80C230              <1>     add dl, 0x30
    32 000007D6 52                  <1>     push dx
    33 000007D7 41                  <1>     inc cx
    34 000007D8 83F800              <1>     cmp ax, 0
    35 000007DB 75F1                <1>     jnz convert_to_digits
    36                              <1> print_digits:
    37 000007DD 5A                  <1>     pop dx
    38 000007DE B634                <1>     mov dh, 0x34
    39 000007E0 268915              <1>     mov [es:di], dx
    40 000007E3 83C702              <1>     add di, 2
    41 000007E6 E2F5                <1>     loop print_digits
    42 000007E8 5F                  <1>     pop di
    43 000007E9 5A                  <1>     pop dx
    44 000007EA 59                  <1>     pop cx
    45 000007EB 5B                  <1>     pop bx
    46 000007EC 58                  <1>     pop ax
    47 000007ED 07                  <1>     pop es
    48 000007EE 5D                  <1>     pop bp
    49 000007EF C20600              <1>     ret 6
    50                              <1> 
    51                              <1> 
    52 000007F2 4661696C656400      <1> failed:         db 'Failed', 0
    53 000007F9 0600                <1> length6:        dw 6
    54 000007FB 47616D6520436F6D70- <1> game_completed: db 'Game Completed', 0
    54 00000804 6C6574656400        <1>
    55 0000080A 0E00                <1> length7:        dw 14
    56 0000080C 537563636573736675- <1> successful:     db 'Successful', 0
    56 00000815 6C00                <1>
    57 00000817 0A00                <1> length8:        dw 10
    58 00000819 53636F726500        <1> score_last:          db 'Score', 0
    59 0000081F 0500                <1> length9:        dw 5
    60 00000821 54696D6500          <1> time:           db 'Time', 0
    61 00000826 0400                <1> length10:       dw 4
    62 00000828 4D697374616B657300  <1> mistakes_last:       db 'Mistakes', 0
    63 00000831 0800                <1> length11:       dw 8
    64 00000833 507265737320312066- <1> new_game:       db 'Press 1 for New Game', 0
    64 0000083C 6F72204E6577204761- <1>
    64 00000845 6D6500              <1>
    65 00000848 1400                <1> length12:       dw 20
    66 0000084A 507265737320457363- <1> exit:           db 'Press Esc for Exit', 0
    66 00000853 20666F722045786974- <1>
    66 0000085C 00                  <1>
    67 0000085D 1200                <1> length13:       dw 18
    68 0000085F 31323A343500        <1> time_value:     db '12:45', 0
    69 00000865 0500                <1> length14:       dw 5
    70 00000867 3132333400          <1> score_value:    db '1234', 0
    71 0000086C 0400                <1> length15:       dw 4
    72 0000086E 3300                <1> mistakes_value: db '3', 0
    73 00000870 0100                <1> length16:       dw 1
    74                              <1>            
    75                              <1> timeDelay:
    76                              <1> 
    77 00000872 51                  <1> push cx
    78 00000873 B9FFFF              <1> mov cx, 0xffff
    79                              <1> 
    80                              <1> loop1:
    81                              <1> 
    82 00000876 83E901              <1> sub cx, 1
    83 00000879 83F900              <1> cmp cx, 0x0
    84 0000087C 75F8                <1> jne loop1
    85                              <1> 
    86 0000087E 59                  <1> pop cx
    87                              <1> 
    88 0000087F C3                  <1> ret
    89                              <1> 
    90                              <1> 
    91                              <1> Draw_border2:
    92 00000880 06                  <1>     push es
    93 00000881 50                  <1>     push ax
    94 00000882 57                  <1>     push di
    95                              <1> 
    96 00000883 B800B8              <1>     mov ax, 0xb800
    97 00000886 8EC0                <1>     mov es, ax
    98                              <1> 
    99 00000888 BB0400              <1>     mov bx, 4
   100 0000088B B8A000              <1>     mov ax, 160
   101 0000088E F7E3                <1>     mul bx
   102 00000890 83C022              <1>     add ax, 34
   103 00000893 89C7                <1>     mov di, ax
   104 00000895 B92800              <1>     mov cx, 40
   105                              <1> 
   106                              <1> 
   107                              <1> top_border2:
   108 00000898 26C7053D1F          <1>     mov word [es:di], 0x1F3D
   109 0000089D 83C702              <1>     add di, 2
   110 000008A0 E8CFFF              <1>     call timeDelay
   111 000008A3 49                  <1>     dec cx
   112 000008A4 75F2                <1>     jnz top_border2
   113                              <1>     
   114 000008A6 E8C9FF              <1>     call timeDelay
   115                              <1> 
   116 000008A9 BB0500              <1>     mov bx, 5
   117 000008AC B8A000              <1>     mov ax, 160
   118 000008AF F7E3                <1>     mul bx
   119 000008B1 83C070              <1>     add ax, 112
   120 000008B4 89C7                <1>     mov di, ax
   121 000008B6 B90B00              <1>     mov cx, 11
   122                              <1> 
   123                              <1> 
   124                              <1> right_border2:
   125 000008B9 26C7053D1F          <1>     mov word [es:di], 0x1F3D
   126 000008BE 81C7A000            <1>     add di, 160
   127 000008C2 E8ADFF              <1>     call timeDelay
   128 000008C5 49                  <1>     dec cx
   129 000008C6 75F1                <1>     jnz right_border2
   130 000008C8 E8A7FF              <1>     call timeDelay
   131                              <1> 
   132 000008CB BB0F00              <1> mov bx, 15
   133 000008CE B8A000              <1>     mov ax, 160
   134 000008D1 F7E3                <1>     mul bx
   135 000008D3 83C020              <1>     add ax, 32
   136 000008D6 89C7                <1>     mov di, ax
   137 000008D8 83C750              <1>     add di, 80
   138 000008DB B92800              <1>     mov cx, 40
   139                              <1>     
   140                              <1> 
   141                              <1> bottom_border2:
   142 000008DE 26C7053D1F          <1>     mov word [es:di], 0x1F3D
   143 000008E3 83EF02              <1>     sub di, 2
   144 000008E6 E889FF              <1>     call timeDelay
   145 000008E9 49                  <1>     dec cx
   146 000008EA 75F2                <1>     jnz bottom_border2
   147 000008EC E883FF              <1>     call timeDelay
   148                              <1> 
   149 000008EF BB0F00              <1>     mov bx, 15
   150 000008F2 B8A000              <1>     mov ax, 160
   151 000008F5 F7E3                <1>     mul bx
   152 000008F7 83C022              <1>     add ax, 34
   153 000008FA 89C7                <1>     mov di, ax
   154 000008FC B90B00              <1>     mov cx, 11
   155                              <1> 
   156                              <1> 
   157                              <1> left_border2:
   158 000008FF 26C7053D1F          <1>     mov word [es:di], 0x1F3D
   159 00000904 81EFA000            <1>     sub di, 160
   160 00000908 E867FF              <1>     call timeDelay
   161 0000090B 49                  <1>     dec cx
   162 0000090C 75F1                <1>     jnz left_border2
   163 0000090E E861FF              <1>     call timeDelay
   164                              <1> 
   165 00000911 5F                  <1>     pop di
   166 00000912 58                  <1>     pop ax
   167 00000913 07                  <1>     pop es
   168                              <1> 
   169                              <1> 
   170 00000914 C3                  <1> ret
   171                              <1> 
   172                              <1> ending_screen:
   173 00000915 833E[8765]03        <1>     cmp word [mistakes_count], 3
   174 0000091A 7503                <1>     jne zz
   175 0000091C E88A64              <1>     call game_is_over
   176                              <1>     zz:
   177 0000091F E8C900              <1>     call clearscreen
   178 00000922 E85BFF              <1>     call Draw_border2
   179                              <1>     
   180                              <1>     ; Print "Game Completed"
   181 00000925 B81E00              <1>     mov ax, 30
   182 00000928 50                  <1>     push ax
   183 00000929 B80900              <1>     mov ax, 9
   184 0000092C 50                  <1>     push ax
   185 0000092D B83A00              <1>     mov ax, 0x3A
   186 00000930 50                  <1>     push ax
   187 00000931 B8[FB07]            <1>     mov ax, game_completed
   188 00000934 50                  <1>     push ax
   189 00000935 FF36[0A08]          <1>     push word [length7]
   190 00000939 E8F5FD              <1>     call print_string
   191                              <1> 
   192                              <1>     ; Print "Score"
   193 0000093C B80B00              <1>     mov ax, 11
   194 0000093F 50                  <1>     push ax
   195 00000940 B81200              <1>     mov ax, 18
   196 00000943 50                  <1>     push ax
   197 00000944 B81B00              <1>     mov ax, 0x1B
   198 00000947 50                  <1>     push ax
   199 00000948 B8[1908]            <1>     mov ax, score_last
   200 0000094B 50                  <1>     push ax
   201 0000094C FF36[1F08]          <1>     push word [length9]
   202 00000950 E8DEFD              <1>     call print_string
   203                              <1>  
   204                              <1>     ; Print Score Value
   205 00000953 A1[8BB8]            <1>     mov ax, word [score_count]
   206 00000956 50                  <1>     push ax
   207 00000957 B81200              <1>     mov ax, 18
   208 0000095A 50                  <1>     push ax
   209 0000095B B81200              <1>     mov ax, 18
   210 0000095E 50                  <1>     push ax
   211 0000095F E846FE              <1>     call print_number_at_position  
   212                              <1>     
   213                              <1>     ; Print "Time"
   214 00000962 B82300              <1>     mov ax, 35
   215 00000965 50                  <1>     push ax
   216 00000966 B81200              <1>     mov ax, 18
   217 00000969 50                  <1>     push ax
   218 0000096A B81B00              <1>     mov ax, 0x1B
   219 0000096D 50                  <1>     push ax
   220 0000096E B8[2108]            <1>     mov ax, time
   221 00000971 50                  <1>     push ax
   222 00000972 FF36[2608]          <1>     push word [length10]
   223 00000976 E8B8FD              <1>     call print_string
   224                              <1> 
   225 00000979 E8CB0E              <1>     call last_time
   226                              <1> 
   227                              <1>     ; Print "Mistakes"
   228 0000097C B83700              <1>     mov ax, 55
   229 0000097F 50                  <1>     push ax
   230 00000980 B81200              <1>     mov ax, 18
   231 00000983 50                  <1>     push ax
   232 00000984 B81B00              <1>     mov ax, 0x1B
   233 00000987 50                  <1>     push ax
   234 00000988 B8[2808]            <1>     mov ax, mistakes_last
   235 0000098B 50                  <1>     push ax
   236 0000098C FF36[3108]          <1>     push word [length11]
   237 00000990 E89EFD              <1>     call print_string
   238                              <1> 
   239                              <1>     ; Print Mistakes Value
   240 00000993 A1[8765]            <1>     mov ax, word [mistakes_count]
   241 00000996 50                  <1>     push ax
   242 00000997 B84100              <1>     mov ax, 65
   243 0000099A 50                  <1>     push ax
   244 0000099B B81200              <1>     mov ax, 18
   245 0000099E 50                  <1>     push ax
   246 0000099F E806FE              <1>     call print_number_at_position  
   247                              <1> 
   248                              <1>     ; Print "New Game"
   249 000009A2 B81C00              <1>     mov ax, 28
   250 000009A5 50                  <1>     push ax
   251 000009A6 B81400              <1>     mov ax, 20
   252 000009A9 50                  <1>     push ax
   253 000009AA B83B00              <1>     mov ax, 0x3B
   254 000009AD 50                  <1>     push ax
   255 000009AE B8[3308]            <1>     mov ax, new_game
   256 000009B1 50                  <1>     push ax
   257 000009B2 FF36[4808]          <1>     push word [length12]
   258 000009B6 E878FD              <1>     call print_string
   259                              <1> 
   260                              <1>     ; Print "Exit"
   261 000009B9 B81D00              <1>     mov ax, 29
   262 000009BC 50                  <1>     push ax
   263 000009BD B81600              <1>     mov ax, 22
   264 000009C0 50                  <1>     push ax
   265 000009C1 B83B00              <1>     mov ax, 0x3B
   266 000009C4 50                  <1>     push ax
   267 000009C5 B8[4A08]            <1>     mov ax, exit
   268 000009C8 50                  <1>     push ax
   269 000009C9 FF36[5D08]          <1>     push word [length13]
   270 000009CD E861FD              <1>     call print_string
   271                              <1>     bb:
   272 000009D0 B400                <1>     MOV AH, 0x00       ; BIOS keyboard interrupt to read a key
   273 000009D2 CD16                <1>     INT 0x16           ; Call BIOS interrupt
   274 000009D4 C706[89B8]0000      <1>     mov word [ending_screen_flag], 0
   275 000009DA 80FC01              <1>     CMP AH, 0x01       
   276 000009DD 0F840CB4            <1>     JE end     ; Jump if Esc key is pressed
   277                              <1> 
   278 000009E1 80FC02              <1>     CMP AH, 0x02       
   279 000009E4 0F8424B0            <1>     JE start     ; Jump if 1 is pressed
   280 000009E8 EBE6                <1>     jmp bb
   281                              <1> 
   282 000009EA C3                  <1>     ret
   283                              <1> 
   284                              <1> clearscreen:
   285 000009EB 06                  <1>     push es
   286 000009EC 50                  <1>     push ax
   287 000009ED 57                  <1>     push di
   288                              <1> 
   289 000009EE B800B8              <1>     mov ax, 0xb800          
   290 000009F1 8EC0                <1>     mov es, ax              
   291 000009F3 31FF                <1>     xor di, di
   292                              <1> 
   293                              <1> 
   294                              <1> clear_loop:
   295 000009F5 26C7052038          <1>     mov word [es:di], 0x3820
   296 000009FA 83C702              <1>     add di, 2
   297 000009FD 81FFA00F            <1>     cmp di, 4000
   298 00000A01 75F2                <1>     jne clear_loop
   299                              <1> 
   300                              <1> 
   301 00000A03 5F                  <1>     pop di
   302 00000A04 58                  <1>     pop ax
   303 00000A05 07                  <1>     pop es
   304 00000A06 C3                  <1>     ret
   305                              <1> 
   306                              <1> 
    10                                  %include "C:\COAL_new\Code\display_difficulty.asm"
     1 00000A07 E99D00              <1> jmp menu_printing
     2                              <1> 
     3                              <1> 
     4                              <1> ; Function to print a string at specified x, y with attribute
     5                              <1> print_string_1:
     6 00000A0A 55                  <1>     push bp
     7 00000A0B 89E5                <1>     mov bp, sp
     8 00000A0D 06                  <1>     push es
     9 00000A0E 50                  <1>     push ax
    10 00000A0F 51                  <1>     push cx
    11 00000A10 56                  <1>     push si
    12 00000A11 57                  <1>     push di
    13                              <1> 
    14                              <1> 
    15 00000A12 B800B8              <1>     mov ax, 0xb800
    16 00000A15 8EC0                <1>     mov es, ax
    17                              <1> 
    18                              <1> 
    19 00000A17 B050                <1>     mov al, 80
    20 00000A19 F6660A              <1>     mul byte [bp + 10]        ; AL * y
    21 00000A1C 03460C              <1>     add ax, [bp + 12]         ; Add x position
    22 00000A1F D1E0                <1>     shl ax, 1            
    23 00000A21 89C7                <1>     mov di, ax
    24                              <1> 
    25                              <1> 
    26 00000A23 8B7606              <1>     mov si, [bp + 6]          ; string memory
    27 00000A26 8B4E04              <1>     mov cx, [bp + 4]          ; string length
    28 00000A29 8A6608              <1>     mov ah, [bp + 8]          ; attribute
    29                              <1> 
    30                              <1> 
    31                              <1> printingg:
    32 00000A2C 8A04                <1>     mov al, [si]              
    33 00000A2E 268905              <1>     mov [es:di], ax          
    34 00000A31 83C702              <1>     add di, 2                
    35 00000A34 83C601              <1>     add si, 1                    
    36 00000A37 83E901              <1>     sub cx, 1                    
    37 00000A3A 75F0                <1>     jnz printingg
    38                              <1> 
    39                              <1> 
    40 00000A3C 5F                  <1>     pop di
    41 00000A3D 5E                  <1>     pop si
    42 00000A3E 59                  <1>     pop cx
    43 00000A3F 58                  <1>     pop ax
    44 00000A40 07                  <1>     pop es
    45 00000A41 5D                  <1>     pop bp
    46 00000A42 C20A00              <1>     ret 10  
    47                              <1> 
    48                              <1> 
    49                              <1> 
    50 00000A45 1100                <1> length2:        dw 17
    51 00000A47 202020202020454153- <1> easy:           db '      EASY            ', 0
    51 00000A50 592020202020202020- <1>
    51 00000A59 2020202000          <1>
    52 00000A5E 1100                <1> length3:        dw 17
    53 00000A60 20202020204D454449- <1> medium:         db '     MEDIUM         ', 0
    53 00000A69 554D20202020202020- <1>
    53 00000A72 202000              <1>
    54 00000A75 1100                <1> length4:        dw 17
    55 00000A77 202020202020484152- <1> hard:           db '      HARD            ', 0
    55 00000A80 442020202020202020- <1>
    55 00000A89 2020202000          <1>
    56 00000A8E 1100                <1> length5:        dw 17
    57 00000A90 01                  <1> pointer_flag:   db 1
    58 00000A91 01                  <1> option:         db 1
    59 00000A92 20202053454C454354- <1> select_level:   db '   SELECT LEVEL     ', 0
    59 00000A9B 204C4556454C202020- <1>
    59 00000AA4 202000              <1>
    60                              <1> 
    61                              <1> 
    62                              <1> menu_printing:
    63 00000AA7 B82000              <1>     mov ax, 32
    64 00000AAA 50                  <1>     push ax
    65 00000AAB B80800              <1>     mov ax, 8
    66 00000AAE 50                  <1>     push ax
    67 00000AAF B81E00              <1>     mov ax, 0x1E
    68 00000AB2 50                  <1>     push ax
    69 00000AB3 B8[920A]            <1>     mov ax, select_level
    70 00000AB6 50                  <1>     push ax
    71 00000AB7 FF36[450A]          <1>     push word [length2]
    72 00000ABB E84CFF              <1>     call print_string_1
    73                              <1> 
    74 00000ABE B82000              <1>     mov ax, 32
    75 00000AC1 50                  <1>     push ax
    76 00000AC2 B80B00              <1>     mov ax, 11
    77 00000AC5 50                  <1>     push ax
    78 00000AC6 803E[900A]01        <1>     cmp byte [pointer_flag], 1
    79 00000ACB 7402                <1>     je draw_easy_selected
    80 00000ACD EB05                <1>     jmp draw_easy
    81                              <1> 
    82                              <1> draw_easy_selected:
    83 00000ACF B88C00              <1>     mov ax, 10001100b
    84 00000AD2 EB00                <1>     jmp draw_easy
    85                              <1> 
    86                              <1> draw_easy:
    87 00000AD4 50                  <1>     push ax
    88 00000AD5 B8[470A]            <1>     mov ax, easy
    89 00000AD8 50                  <1>     push ax
    90 00000AD9 FF36[5E0A]          <1>     push word [length3]
    91 00000ADD E82AFF              <1>     call print_string_1
    92                              <1> 
    93 00000AE0 B82000              <1>     mov ax, 32
    94 00000AE3 50                  <1>     push ax
    95 00000AE4 B80D00              <1>     mov ax, 13
    96 00000AE7 50                  <1>     push ax
    97 00000AE8 803E[900A]02        <1>     cmp byte [pointer_flag], 2
    98 00000AED 7402                <1>     je draw_medium_selected
    99 00000AEF EB05                <1>     jmp draw_medium
   100                              <1> 
   101                              <1> draw_medium_selected:
   102 00000AF1 B88C00              <1>     mov ax, 10001100b
   103 00000AF4 EB00                <1>     jmp draw_medium
   104                              <1> 
   105                              <1> draw_medium:
   106 00000AF6 50                  <1>     push ax
   107 00000AF7 B8[600A]            <1>     mov ax, medium
   108 00000AFA 50                  <1>     push ax
   109 00000AFB FF36[750A]          <1>     push word [length4]
   110 00000AFF E808FF              <1>     call print_string_1
   111                              <1> 
   112 00000B02 B82000              <1>     mov ax, 32
   113 00000B05 50                  <1>     push ax
   114 00000B06 B80F00              <1>     mov ax, 15
   115 00000B09 50                  <1>     push ax
   116 00000B0A 803E[900A]03        <1>     cmp byte [pointer_flag], 3
   117 00000B0F 7402                <1>     je draw_hard_selected
   118 00000B11 EB05                <1>     jmp draw_hard
   119                              <1> 
   120                              <1> draw_hard_selected:
   121 00000B13 B88C00              <1>     mov ax, 10001100b
   122 00000B16 EB00                <1>     jmp draw_hard
   123                              <1>     
   124                              <1> draw_hard:
   125 00000B18 50                  <1>     push ax
   126 00000B19 B8[770A]            <1>     mov ax, hard
   127 00000B1C 50                  <1>     push ax
   128 00000B1D FF36[8E0A]          <1>     push word [length5]
   129 00000B21 E8E6FE              <1>     call print_string_1
   130 00000B24 C3                  <1>     ret
    11                                  %include "C:\COAL_new\Code\opening_screen.asm"
     1                              <1>     ;-------------Opening Screen Related Code------------------
     2                              <1> 
     3                              <1> 
     4 00000B25 0000<rep 3E8h>      <1>     buffer: times 1000 dw 0
     5                              <1> 
     6                              <1> 
     7                              <1>     ; in:
     8                              <1>     ;   si = number of 55.56 ms to wait
     9                              <1>     sleep:
    10 000012F5 B400                <1>             mov ah, 0
    11 000012F7 CD1A                <1>             int 1ah
    12 000012F9 89D3                <1>             mov bx, dx
    13                              <1>         .wait:
    14 000012FB B400                <1>             mov ah, 0
    15 000012FD CD1A                <1>             int 1ah
    16 000012FF 29DA                <1>             sub dx, bx
    17 00001301 39F2                <1>             cmp dx, si
    18 00001303 7CF6                <1>             jl .wait
    19 00001305 C3                  <1>             ret
    20                              <1> 
    21                              <1> 
    22                              <1>     clrscr1:
    23                              <1> 
    24                              <1> 
    25 00001306 60                  <1>             pusha
    26 00001307 BF0000              <1>             mov di,0
    27 0000130A B800B8              <1>             mov ax,0xb800
    28 0000130D 8EC0                <1>             mov es,ax
    29 0000130F B020                <1>             mov al,0x20
    30 00001311 B430                <1>             mov ah,00110000b
    31                              <1> 
    32                              <1> 
    33                              <1>             nextt:
    34 00001313 268905              <1>             mov [es:di],ax
    35 00001316 83C702              <1>             add di,2
    36 00001319 81FFA00F            <1>             cmp di,4000
    37 0000131D 75F4                <1>             jnz nextt
    38                              <1> 
    39                              <1> 
    40 0000131F 61                  <1>             popa
    41                              <1> 
    42                              <1> 
    43 00001320 C3                  <1>             ret
    44                              <1> 
    45                              <1> 
    46                              <1>     hide_cursor:
    47 00001321 B402                <1>             mov ah, 02h
    48 00001323 B700                <1>             mov bh, 0
    49 00001325 B619                <1>             mov dh, 25
    50 00001327 B200                <1>             mov dl, 0
    51 00001329 CD10                <1>             int 10h
    52 0000132B C3                  <1>             ret
    53                              <1> 
    54                              <1> 
    55                              <1>     clear_keyboard_buffer:
    56 0000132C B401                <1>             mov ah, 1
    57 0000132E CD16                <1>             int 16h
    58 00001330 7406                <1>             jz .end
    59 00001332 B400                <1>             mov ah, 0h ; retrieve key from buffer
    60 00001334 CD16                <1>             int 16h
    61 00001336 EBF4                <1>             jmp clear_keyboard_buffer
    62                              <1>         .end:
    63 00001338 C3                  <1>             ret
    64                              <1> 
    65                              <1> 
    66                              <1>     exit_process:
    67 00001339 B44C                <1>             mov ah, 4ch
    68 0000133B CD21                <1>             int 21h
    69 0000133D C3                  <1>             ret
    70                              <1> 
    71                              <1> 
    72                              <1>     buffer_clear:
    73 0000133E BB0000              <1>             mov bx, 0
    74                              <1>         .next:  
    75 00001341 C687[250B]20        <1>             mov byte [buffer + bx], ' '
    76 00001346 43                  <1>             inc bx
    77 00001347 81FBD007            <1>             cmp bx, 2000
    78 0000134B 75F4                <1>             jnz .next
    79 0000134D C3                  <1>             ret
    80                              <1>        
    81                              <1>     ; in:
    82                              <1>     ;   bl = char
    83                              <1>     ;   cx = col
    84                              <1>     ;   dl = row
    85                              <1>     buffer_write:
    86 0000134E BF[250B]            <1>         mov di, buffer
    87 00001351 B050                <1>         mov al, 80
    88 00001353 F6E2                <1>         mul dl
    89 00001355 01C8                <1>         add ax, cx
    90 00001357 01C7                <1>         add di, ax
    91 00001359 881D                <1>         mov byte [di], bl
    92 0000135B C3                  <1>         ret
    93                              <1>    
    94                              <1>     ; in:
    95                              <1>     ;   cx = col
    96                              <1>     ;   dx = row
    97                              <1>     ; out:
    98                              <1>     ;   bl = char
    99                              <1>     buffer_read:
   100 0000135C BF[250B]            <1>         mov di, buffer
   101 0000135F B050                <1>         mov al, 80
   102 00001361 F6E2                <1>         mul dl
   103 00001363 01C8                <1>         add ax, cx
   104 00001365 01C7                <1>         add di, ax
   105 00001367 8A1D                <1>         mov bl, [di]
   106 00001369 C3                  <1>         ret
   107                              <1>    
   108                              <1>     ; in:
   109                              <1>     ;   si = string address
   110                              <1>     ;   di = buffer destination offset
   111                              <1>     buffer_print_string:
   112                              <1>         .next:
   113 0000136A 8A04                <1>             mov al, [si]
   114 0000136C 3C00                <1>             cmp al, 0
   115 0000136E 7408                <1>             jz .end
   116 00001370 8885[250B]          <1>             mov byte [buffer + di], al
   117 00001374 47                  <1>             inc di
   118 00001375 46                  <1>             inc si
   119 00001376 EBF2                <1>             jmp .next
   120                              <1>         .end:
   121 00001378 C3                  <1>             ret
   122                              <1> 
   123                              <1> 
   124                              <1> 
   125                              <1> 
   126                              <1>     buffer_render:
   127 00001379 B800B8              <1>             mov ax, 0b800h
   128 0000137C 8EC0                <1>             mov es, ax
   129 0000137E BF[250B]            <1>             mov di, buffer
   130 00001381 BE0000              <1>             mov si, 0
   131                              <1> 
   132                              <1> 
   133                              <1>         .write:
   134 00001384 8A1D                <1>             mov bl,[di]
   135 00001386 26881C              <1>             mov byte [es:si], bl
   136 00001389 47                  <1>             inc di
   137 0000138A 83C602              <1>             add si, 2
   138 0000138D 81FEA00F            <1>             cmp si, 4000
   139 00001391 75F1                <1>             jnz .write
   140 00001393 C3                  <1>             ret
   141                              <1> 
   142                              <1> 
   143                              <1>     show_title:
   144 00001394 E8A7FF              <1>             call buffer_clear
   145 00001397 E8DFFF              <1>             call buffer_render
   146 0000139A BE1200              <1>             mov si, 18
   147 0000139D E855FF              <1>             call sleep
   148 000013A0 BE0000              <1>             mov si, 0
   149                              <1>         .next:
   150 000013A3 8B9C[0614]          <1>             mov bx, [.title + si]
   151 000013A7 C687[250B]DB        <1>             mov byte [buffer + bx], 219
   152 000013AC 56                  <1>             push si
   153 000013AD E8C9FF              <1>             call buffer_render
   154 000013B0 BE0100              <1>             mov si, 1
   155 000013B3 E83FFF              <1>             call sleep
   156 000013B6 5E                  <1>             pop si
   157 000013B7 83C602              <1>             add si, 2
   158 000013BA 81FE3601            <1>             cmp si, 310
   159 000013BE 7CE3                <1>             jl .next
   160 000013C0 BE[5A15]            <1>             mov si, .text_2
   161 000013C3 BF5406              <1>             mov di, 1620
   162 000013C6 E8A1FF              <1>             call buffer_print_string
   163 000013C9 BE[B215]            <1>             mov si, .text_5
   164 000013CC BFEC06              <1>             mov di, 1772
   165 000013CF E898FF              <1>             call buffer_print_string
   166 000013D2 E857FF              <1>             call clear_keyboard_buffer
   167                              <1>             ; mov si, .text_5
   168                              <1>             ; mov di, 1934
   169                              <1>             ; call buffer_print_string
   170                              <1>             ; call clear_keyboard_buffer
   171                              <1> 
   172                              <1> 
   173                              <1>         .wait_for_key:
   174 000013D5 BE[9B15]            <1>             mov si, .text_4
   175 000013D8 BF6C05              <1>             mov di, 1388
   176 000013DB E88CFF              <1>             call buffer_print_string
   177 000013DE E898FF              <1>             call buffer_render
   178 000013E1 BE0500              <1>             mov si, 5
   179 000013E4 E80EFF              <1>             call sleep
   180 000013E7 B401                <1>             mov ah, 1
   181 000013E9 CD16                <1>             int 16h
   182 000013EB 7518                <1>             jnz .continue
   183 000013ED BE[8415]            <1>             mov si, .text_3
   184 000013F0 BF6C05              <1>             mov di, 1388
   185 000013F3 E874FF              <1>             call buffer_print_string
   186 000013F6 E880FF              <1>             call buffer_render
   187 000013F9 BE0A00              <1>             mov si, 10
   188 000013FC E8F6FE              <1>             call sleep
   189 000013FF B401                <1>             mov ah, 1
   190 00001401 CD16                <1>             int 16h
   191 00001403 74D0                <1>             jz .wait_for_key
   192                              <1> 
   193                              <1> 
   194                              <1>         .continue:
   195                              <1>             
   196 00001405 C3                  <1>             ret
   197                              <1> 
   198                              <1> 
   199                              <1>         .title:
   200                              <1>             ;----S-----
   201 00001406 50014F014E014D014C- <1>             dw 0336, 0335, 0334, 0333, 0332, 0331, 0330, 0329, 0409, 0489
   201 0000140F 014B014A0149019901- <1>
   201 00001418 E901                <1>
   202 0000141A 390289028A028B028C- <1>             dw 0569, 0649, 0650, 0651, 0652, 0653, 0654, 0655, 0656, 0736
   202 00001423 028D028E028F029002- <1>
   202 0000142C E002                <1>
   203 0000142E 30038003D003CF03CE- <1>             dw 0816, 0896, 0976, 0975, 0974, 0973, 0972, 0971, 0970, 0969
   203 00001437 03CD03CC03CB03CA03- <1>
   203 00001440 C903                <1>
   204                              <1>             ;----U-----
   205 00001442 5301A301F301430293- <1>             dw 0339,0419,0499,0579,0659,0739,0819,0899,0979,0980,0981,0982
   205 0000144B 02E30233038303D303- <1>
   205 00001454 D403D503D603        <1>
   206 0000145A D703D803D903DA038A- <1>             dw 0983,0984,0985,0986,0906,0826,0746,0666,0586,0506,0426,0346
   206 00001463 033A03EA029A024A02- <1>
   206 0000146C FA01AA015A01        <1>
   207                              <1>             ;----D-----
   208 00001472 DD038D033D03ED029D- <1>             dw 0989,0909,0829,0749,0669,0589,0509,0429,0349,0350,0351,0352
   208 0000147B 024D02FD01AD015D01- <1>
   208 00001484 5E015F016001        <1>
   209 0000148A 61016201B301B40104- <1>             dw 0353,0354,0435,0436,0516,0596,0676,0756,0836,0916,0915,0994
   209 00001493 025402A402F4024403- <1>
   209 0000149C 94039303E203        <1>
   210 000014A2 E103E003DF03DE03DD- <1>             dw 0993,0992,0991,0990,0989
   210 000014AB 03                  <1>
   211                              <1>             ;----O-----
   212 000014AC 69016A016B016C016D- <1>             dw 0361,0362,0363,0364,0365,0366,0447,0527,0607,0687,0767,0847
   212 000014B5 016E01BF010F025F02- <1>
   212 000014BE AF02FF024F03        <1>
   213 000014C4 9F03EE03ED03EC03EB- <1>             dw 0927,1006,1005,1004,1003,1002,1001,0920,0840,0760,0680,0600
   213 000014CD 03EA03E90398034803- <1>
   213 000014D6 F802A8025802        <1>
   214 000014DC 0802B801            <1>             dw 0520,0440
   215                              <1>             ;----K-----
   216 000014E0 7401C40114026402B4- <1>             dw 0372,0452,0532,0612,0692,0772,0852,0932,1012,0379,0458,0537
   216 000014E9 0204035403A403F403- <1>
   216 000014F2 7B01CA011902        <1>
   217 000014F8 68026702B602B50207- <1>             dw 0616,0615,0694,0693,0775,0776,0857,0938,1019
   217 00001501 0308035903AA03FB03  <1>
   218                              <1>             ;----U-----
   219 0000150A 7F01CF011F026F02BF- <1>             dw 0383,0463,0543,0623,0703,0783,0863,0943,1023,1024,1025,1026
   219 00001513 020F035F03AF03FF03- <1>
   219 0000151C 000401040204        <1>
   220 00001522 0304040405040604B6- <1>             dw 1027,1028,1029,1030,0950,0870,0790,0710,0630,0550,0470,0390
   220 0000152B 0366031603C6027602- <1>
   220 00001534 2602D6018601        <1>
   221                              <1>            
   222                              <1>         .text_1:
   223 0000153A 20444556454C4F5045- <1>             db " DEVELOPED BY ABDUR AND RIZWAN ", 0
   223 00001543 442042592041424455- <1>
   223 0000154C 5220414E442052495A- <1>
   223 00001555 57414E2000          <1>
   224                              <1>         .text_2:
   225 0000155A 202320555345204152- <1>             db " # USE ARROW KEYS TO NAVIGATE THE GRID # ", 0
   225 00001563 524F57204B45595320- <1>
   225 0000156C 544F204E4156494741- <1>
   225 00001575 544520544845204752- <1>
   225 0000157E 494420232000        <1>
   226                              <1>         .text_3:
   227 00001584 507265737320416E79- <1>             db "Press Any Key To Start", 0
   227 0000158D 204B657920546F2053- <1>
   227 00001596 7461727400          <1>
   228                              <1>         .text_4:
   229 0000159B 202020202020202020- <1>             db "                      ", 0
   229 000015A4 202020202020202020- <1>
   229 000015AD 2020202000          <1>
   230                              <1>         .text_5:
   231 000015B2 202020202020202020- <1>             db "         # PRESS `ENTER` TO ACCESS NUMBER CARD #       ", 0
   231 000015BB 232050524553532060- <1>
   231 000015C4 454E5445526020544F- <1>
   231 000015CD 20414343455353204E- <1>
   231 000015D6 554D42455220434152- <1>
   231 000015DF 442023202020202020- <1>
   231 000015E8 2000                <1>
    12                                  %include "C:\COAL_new\Code\grid_navigation.asm"
     1 000015EA EB26                <1> jmp navigate_grid
     2                              <1> 
     3 000015EC 0000                <1> current_row: dw 0
     4 000015EE 0000                <1> current_col: dw 0
     5 000015F0 0000                <1> current_row_index: dw 0
     6 000015F2 0000                <1> current_col_index: dw 0
     7 000015F4 0000                <1> max_rows: dw 0
     8 000015F6 0000                <1> max_cols: dw 0
     9 000015F8 0000                <1> min_rows: dw 0
    10 000015FA 0000                <1> min_cols: dw 0
    11 000015FC 000000000000000000- <1> save_previous_data: dw 0, 0, 0, 0, 0, 0, 0, 0, 0
    11 00001605 000000000000000000  <1>
    12 0000160E 0000                <1> location_for_previous_data: dw 0
    13 00001610 0000                <1> temp: dw 0
    14                              <1> 
    15                              <1> 
    16                              <1> navigate_grid:
    17                              <1> 
    18 00001612 60                  <1>     pusha
    19                              <1> 
    20 00001613 B800B8              <1>     mov ax, 0xb800
    21 00001616 8EC0                <1>     mov es, ax
    22 00001618 31C0                <1>     xor ax, ax
    23 0000161A B050                <1>     mov al, 80
    24 0000161C F726[EC15]          <1>     mul word [current_row]
    25 00001620 0306[EE15]          <1>     add ax, [current_col]
    26 00001624 D1E0                <1>     shl ax, 1
    27                              <1> 
    28 00001626 A3[0E16]            <1>     mov word [location_for_previous_data], ax
    29                              <1> 
    30 00001629 89C6                <1>     mov si, ax ;for saving previous data
    31 0000162B B90000              <1>     mov cx, 0
    32 0000162E BB0300              <1>     mov bx, 3
    33 00001631 BF0000              <1>     mov di, 0
    34                              <1> 
    35                              <1>     .save:
    36 00001634 268B14              <1>     mov dx, [es:si]
    37 00001637 8995[FC15]          <1>     mov word [save_previous_data + di], dx
    38 0000163B 83C602              <1>     add si, 2
    39 0000163E 83C702              <1>     add di, 2
    40 00001641 41                  <1>     inc cx
    41 00001642 4B                  <1>     dec bx
    42 00001643 75EF                <1>     jnz .save
    43 00001645 81C69A00            <1>     add si, 154
    44 00001649 BB0300              <1>     mov bx, 3
    45 0000164C 83F909              <1>     cmp cx, 9
    46 0000164F 75E3                <1>     jnz .save
    47                              <1> 
    48 00001651 89C7                <1>     mov di, ax ;now di points to the starting of box to be highlighted
    49 00001653 BB0300              <1>     mov bx, 3 ;count for rows highligting
    50                              <1> 
    51 00001656 B4B0                <1>     mov ah, 10110000b
    52                              <1> 
    53 00001658 B0DA                <1>     mov al, 218
    54 0000165A AB                  <1>     stosw
    55 0000165B B0C4                <1>     mov al, 196
    56 0000165D AB                  <1>     stosw
    57 0000165E B0BF                <1>     mov al, 191
    58 00001660 AB                  <1>     stosw
    59                              <1> 
    60 00001661 81C79A00            <1>     add di, 154
    61                              <1> 
    62 00001665 B0B3                <1>     mov al, 179
    63 00001667 AB                  <1>     stosw
    64 00001668 893E[1016]          <1>     mov word [temp], di
    65 0000166C 83C702              <1>     add di, 2
    66 0000166F B0B3                <1>     mov al, 179
    67 00001671 AB                  <1>     stosw
    68                              <1> 
    69 00001672 81C79A00            <1>     add di, 154
    70                              <1> 
    71 00001676 B0C0                <1>     mov al, 192
    72 00001678 AB                  <1>     stosw
    73 00001679 B0C4                <1>     mov al, 196
    74 0000167B AB                  <1>     stosw
    75 0000167C B0D9                <1>     mov al, 217
    76 0000167E AB                  <1>     stosw
    77                              <1> 
    78 0000167F 61                  <1>     popa
    79                              <1> 
    80 00001680 C3                  <1> ret
    81                              <1> 
    82                              <1> 
    83                              <1> print_saved_data:
    84                              <1> 
    85 00001681 60                  <1>     pusha 
    86                              <1>     ;load starting location in si
    87 00001682 B90000              <1>     mov cx, 0
    88 00001685 BB0300              <1>     mov bx, 3
    89 00001688 BF0000              <1>     mov di, 0 
    90 0000168B B800B8              <1>     mov ax, 0xb800
    91 0000168E 8EC0                <1>     mov es, ax
    92 00001690 BF0000              <1>     mov di, 0
    93                              <1> 
    94                              <1>     .print_previous:
    95                              <1>     
    96 00001693 8B95[FC15]          <1>     mov dx, [save_previous_data + di]
    97 00001697 268914              <1>     mov word [es: si], dx
    98 0000169A 83C602              <1>     add si, 2
    99 0000169D 83C702              <1>     add di, 2
   100 000016A0 41                  <1>     inc cx
   101 000016A1 4B                  <1>     dec bx
   102 000016A2 75EF                <1>     jnz .print_previous
   103 000016A4 81C69A00            <1>     add si, 154
   104 000016A8 BB0300              <1>     mov bx, 3
   105 000016AB 83F909              <1>     cmp cx, 9
   106 000016AE 75E3                <1>     jnz .print_previous
   107 000016B0 833E[F56A]01        <1>     cmp word [display_flag], 1
   108 000016B5 750A                <1>     jne kk
   109 000016B7 8B3E[F76A]          <1>     mov di, word [temp1]
   110 000016BB B82030              <1>     mov ax, 0x3020
   111 000016BE 268905              <1>     mov word [es: di], ax
   112                              <1>     kk:
   113 000016C1 C706[F56A]0000      <1>     mov word [display_flag], 0    
   114 000016C7 BE0000              <1>     mov si, 0
   115 000016CA BF0000              <1>     mov di, 0
   116 000016CD 8B1E[87B8]          <1>     mov bx, word [grid_flag]
   117 000016D1 83FB01              <1>     cmp bx, 1
   118 000016D4 7405                <1>     je ee
   119 000016D6 E8C9E9              <1>     call print_boxes
   120 000016D9 EB05                <1>     jmp ea
   121                              <1>     ee:
   122 000016DB B430                <1>     MOV ah,00110000b
   123 000016DD E831EE              <1>     call last_3_rows
   124                              <1>     ea:
   125 000016E0 61                  <1>     popa
   126                              <1> 
   127 000016E1 C3                  <1> ret
    13                                  %include "C:\COAL_new\Code\timer.asm"
     1 000016E2 EB16                <1> jmp print_text_end
     2                              <1> 
     3 000016E4 0000                <1> tickcount:        dw   0
     4 000016E6 0000                <1> seconds:          dw   0
     5 000016E8 0000                <1> minutes:          dw   0
     6 000016EA 0000                <1> zero:             dw   0
     7 000016EC 00000000            <1> oldisr:           dd   0
     8 000016F0 303A3030            <1> timer:            db '0:00'
     9 000016F4 0000                <1> mode_text:        dw 0
    10 000016F6 0000                <1> ncs_flag:         dw 0
    11 000016F8 3A00                <1> colon:            db ':', 0
    12                              <1> 
    13                              <1> ; Print Text End
    14                              <1> print_text_end:
    15 000016FA 5E                  <1>   pop si
    16 000016FB 5F                  <1>   pop di
    17 000016FC 07                  <1>   pop es
    18 000016FD 5A                  <1>   pop dx
    19 000016FE 59                  <1>   pop cx
    20 000016FF 58                  <1>   pop ax
    21 00001700 83C402              <1>   add sp, 2
    22 00001703 5D                  <1>   pop bp
    23 00001704 C20A00              <1>   ret 10
    24                              <1> 
    25                              <1> ; Print Text Function
    26                              <1> print_text:
    27 00001707 55                  <1>   push bp
    28 00001708 89E5                <1>   mov  bp, sp
    29 0000170A 83EC02              <1>   sub sp, 2
    30 0000170D C746FE0A00          <1>   mov word [bp - 2], 10
    31                              <1>   
    32 00001712 50                  <1>   push ax
    33 00001713 51                  <1>   push cx
    34 00001714 52                  <1>   push dx
    35 00001715 06                  <1>   push es
    36 00001716 57                  <1>   push di
    37 00001717 56                  <1>   push si
    38                              <1> 
    39 00001718 837E0C00            <1>   cmp word [bp + 12], 0
    40 0000171C 7440                <1>   je text_mode
    41                              <1> 
    42                              <1> number_mode:
    43 0000171E 8B760A              <1>   mov si, [bp + 10]
    44 00001721 8B04                <1>   mov ax, [si]
    45 00001723 31C9                <1>   xor cx, cx
    46                              <1> 
    47                              <1> stack_push_loop:
    48 00001725 F676FE              <1>   div byte [bp - 2]
    49 00001728 88E2                <1>   mov dl, ah
    50 0000172A 30F6                <1>   xor dh, dh
    51 0000172C 83C230              <1>   add dx, '0'
    52 0000172F 52                  <1>   push dx
    53 00001730 30E4                <1>   xor ah, ah
    54 00001732 41                  <1>   inc cx
    55 00001733 83F800              <1>   cmp ax, 0
    56 00001736 75ED                <1>   jne stack_push_loop
    57                              <1> 
    58 00001738 89E0                <1>   mov ax, sp
    59 0000173A 89CA                <1>   mov dx, cx
    60                              <1> 
    61                              <1> number_print_loop:
    62 0000173C FF36[F416]          <1>   push word [mode_text]
    63 00001740 50                  <1>   push ax
    64 00001741 FF7608              <1>   push word [bp + 8]
    65 00001744 FF7606              <1>   push word [bp + 6]
    66 00001747 FF4606              <1>   inc word [bp + 6]
    67 0000174A FF7604              <1>   push word [bp + 4]
    68 0000174D E8B7FF              <1>   call print_text
    69 00001750 83C002              <1>   add ax, 2
    70 00001753 E2E7                <1>   loop number_print_loop
    71                              <1> 
    72 00001755 295606              <1>   sub word [bp + 6], dx
    73 00001758 D1E2                <1>   shl dx, 1
    74 0000175A 01D4                <1>   add sp, dx
    75 0000175C EB9C                <1>   jmp print_text_end
    76                              <1> 
    77                              <1> text_mode:
    78 0000175E B800B8              <1>   mov ax, 0xb800
    79 00001761 8EC0                <1>   mov es, ax
    80                              <1> 
    81 00001763 B85000              <1>   mov ax, 80
    82 00001766 F66604              <1>   mul byte [bp + 4] 
    83 00001769 034606              <1>   add ax, [bp + 6]
    84 0000176C D1E0                <1>   shl ax, 1
    85 0000176E 89C7                <1>   mov di, ax
    86 00001770 83C704              <1>   add di, 4        
    87                              <1> 
    88 00001773 8B760A              <1>   mov si, [bp + 10]
    89 00001776 8B4608              <1>   mov ax, [bp + 8]
    90                              <1> 
    91                              <1> text_print_loop:
    92 00001779 8A04                <1>   mov al, [si]
    93 0000177B AB                  <1>   stosw
    94 0000177C 46                  <1>   inc si
    95 0000177D 803C00              <1>   cmp byte [si], 0
    96 00001780 75F7                <1>   jne text_print_loop
    97 00001782 E975FF              <1>   jmp print_text_end
    98                              <1> 
    99                              <1> ; Draw Timer Function
   100                              <1> draw_timer:
   101 00001785 55                  <1>   push bp
   102 00001786 89E5                <1>   mov bp, sp
   103                              <1> 
   104 00001788 8B4E06              <1>   mov cx, [bp + 6]
   105 0000178B 83C103              <1>   add cx, 3
   106                              <1> 
   107 0000178E 833E[E616]09        <1>   cmp word [seconds], 9
   108 00001793 7F10                <1>   jg skip
   109                              <1> 
   110 00001795 6A01                <1>   push 1
   111 00001797 68[EA16]            <1>   push word zero
   112 0000179A 680031              <1>   push 0011000100000000b
   113 0000179D 51                  <1>   push cx
   114 0000179E FF7604              <1>   push word [bp + 4]
   115 000017A1 E863FF              <1>   call print_text
   116 000017A4 41                  <1>   inc cx
   117                              <1> 
   118                              <1> skip:
   119                              <1>  
   120 000017A5 6A01                <1>   push 1
   121 000017A7 68[E816]            <1>   push word minutes
   122 000017AA 680031              <1>   push 0011000100000000b
   123 000017AD FF7606              <1>   push word [bp + 6]   ; Y
   124 000017B0 FF7604              <1>   push word [bp + 4]   ; X
   125 000017B3 E851FF              <1>   call print_text
   126                              <1> 
   127 000017B6 83460602            <1>   add word [bp + 6], 2
   128                              <1> 
   129 000017BA 6A00                <1>   push 0
   130 000017BC 68[F816]            <1>   push word colon
   131 000017BF 680031              <1>   push 0011000100000000b
   132 000017C2 FF7606              <1>   push word [bp + 6]   ; Y
   133 000017C5 FF7604              <1>   push word [bp + 4]   ; X
   134 000017C8 E83CFF              <1>   call print_text
   135                              <1>   
   136 000017CB 6A01                <1>   push 1
   137 000017CD 68[E616]            <1>   push word seconds
   138 000017D0 680031              <1>   push 0011000100000000b
   139 000017D3 51                  <1>   push cx
   140 000017D4 FF7604              <1>   push word [bp + 4]
   141 000017D7 E82DFF              <1>   call print_text
   142                              <1> 
   143                              <1>  
   144 000017DA 5D                  <1>   pop bp
   145 000017DB C20400              <1>   ret 4
   146                              <1> 
   147                              <1> ; Timer Interrupt Service Routine
   148                              <1> timer_isr:
   149 000017DE 55                  <1>   push bp
   150 000017DF 89E5                <1>   mov bp, sp
   151                              <1> 
   152                              <1> 
   153 000017E1 FF06[E416]          <1>   inc word [tickcount]
   154 000017E5 833E[E416]12        <1>   cmp word [tickcount], 18
   155 000017EA 7529                <1>   jne skip_drawing_timer
   156                              <1> 
   157 000017EC FF06[E616]          <1>   inc word [seconds]
   158 000017F0 C706[E416]0000      <1>   mov word [tickcount], 0
   159                              <1> 
   160 000017F6 833E[E616]3C        <1>   cmp word [seconds], 60
   161 000017FB 750A                <1>   jne call_draw_timer
   162                              <1> 
   163 000017FD C706[E616]0000      <1>   mov word [seconds], 0
   164 00001803 FF06[E816]          <1>   inc word [minutes]
   165                              <1> 
   166                              <1> call_draw_timer:
   167 00001807 833E[F616]00        <1>   cmp word [ncs_flag], 0
   168 0000180C 7507                <1>   jne skip_drawing_timer
   169                              <1> 
   170 0000180E 6A06                <1>   push word 6
   171 00001810 6A01                <1>   push word 1
   172 00001812 E870FF              <1>   call draw_timer
   173                              <1> skip_drawing_timer:
   174 00001815 B020                <1>   mov al, 0x20
   175 00001817 E620                <1>   out 0x20, al
   176 00001819 5D                  <1>   pop bp
   177 0000181A CF                  <1>   iret
   178                              <1> 
   179                              <1> ; Hook Timer Interrupt
   180                              <1> hook_timer_interrupt:
   181 0000181B 55                  <1>   push bp
   182 0000181C 89E5                <1>   mov bp, sp
   183                              <1> 
   184 0000181E 1E                  <1>   push ds
   185 0000181F 06                  <1>   push es
   186 00001820 50                  <1>   push ax
   187 00001821 53                  <1>   push bx
   188                              <1> 
   189 00001822 B80835              <1>   mov ax, 3508h
   190 00001825 CD21                <1>   int 21h
   191 00001827 891E[EC16]          <1>   mov word [oldisr], bx
   192 0000182B 8C06[EE16]          <1>   mov word [oldisr+2], es
   193                              <1> 
   194 0000182F 31C0                <1>   xor ax, ax
   195 00001831 8EC0                <1>   mov es, ax
   196                              <1> 
   197 00001833 FA                  <1>   cli
   198 00001834 26C7062000[DE17]    <1>   mov word [es:8*4], timer_isr
   199 0000183B 268C0E2200          <1>   mov [es:8*4+2], cs
   200 00001840 FB                  <1>   sti
   201                              <1> 
   202 00001841 5B                  <1>   pop bx
   203 00001842 58                  <1>   pop ax
   204 00001843 07                  <1>   pop es
   205 00001844 1F                  <1>   pop ds
   206 00001845 5D                  <1>   pop bp
   207 00001846 C3                  <1>   ret
   208                              <1> 
   209                              <1> last_time:
   210 00001847 60                  <1>     pusha
   211 00001848 B800B8              <1>     mov ax, 0xb800 
   212 0000184B 8EC0                <1>     mov es, ax
   213                              <1> 
   214 0000184D BF920B              <1>     mov di, 2962
   215                              <1> 
   216 00001850 A1[E816]            <1>     mov ax, [minutes]
   217 00001853 BB0A00              <1>     mov bx, 10
   218 00001856 31D2                <1>     xor dx, dx
   219 00001858 F7F3                <1>     div bx
   220 0000185A 83C030              <1>     add ax, 0x30
   221 0000185D B434                <1>     mov ah, 0x34
   222 0000185F 268905              <1>     mov [es:di], ax
   223 00001862 83C702              <1>     add di, 2
   224 00001865 88D0                <1>     mov al, dl
   225 00001867 0430                <1>     add al, 0x30
   226 00001869 B434                <1>     mov ah, 0x34
   227 0000186B 268905              <1>     mov [es:di], ax
   228 0000186E 83C702              <1>     add di, 2
   229                              <1> 
   230 00001871 B83A34              <1>     mov ax, ':' | 0x3400
   231 00001874 268905              <1>     mov [es:di], ax
   232 00001877 83C702              <1>     add di, 2
   233                              <1> 
   234 0000187A A1[E616]            <1>     mov ax, [seconds]
   235 0000187D BB0A00              <1>     mov bx, 10
   236 00001880 31D2                <1>     xor dx, dx
   237 00001882 F7F3                <1>     div bx
   238 00001884 83C030              <1>     add ax, 0x30
   239 00001887 B434                <1>     mov ah, 0x34
   240 00001889 268905              <1>     mov [es:di], ax
   241 0000188C 83C702              <1>     add di, 2
   242 0000188F 88D0                <1>     mov al, dl
   243 00001891 0430                <1>     add al, 0x30
   244 00001893 B434                <1>     mov ah, 0x34
   245 00001895 268905              <1>     mov [es:di], ax
   246 00001898 83C702              <1>     add di, 2
   247                              <1> 
   248 0000189B 61                  <1>     popa
   249 0000189C C3                  <1>     ret
   250                              <1> 
   251                              <1> 
   252                              <1> unhook_timer_interrupt:
   253 0000189D 55                  <1>   push bp
   254 0000189E 89E5                <1>   mov bp, sp
   255                              <1> 
   256 000018A0 1E                  <1>   push ds
   257 000018A1 50                  <1>   push ax
   258 000018A2 52                  <1>   push dx
   259                              <1> 
   260 000018A3 FA                  <1>   cli
   261 000018A4 1E                  <1>   push ds
   262 000018A5 B80825              <1>   mov ax, 2508h      ; DOS function 25h to set interrupt vector for interrupt 08h
   263 000018A8 8B16[EC16]          <1>   mov dx, [oldisr]   ; Load original ISR offset
   264 000018AC 8E1E[EE16]          <1>   mov ds, [oldisr+2] ; Load original ISR segment
   265 000018B0 CD21                <1>   int 21h
   266 000018B2 1F                  <1>   pop ds
   267 000018B3 FB                  <1>   sti
   268                              <1> 
   269 000018B4 5A                  <1>   pop dx
   270 000018B5 58                  <1>   pop ax
   271 000018B6 1F                  <1>   pop ds
   272 000018B7 5D                  <1>   pop bp
   273 000018B8 C3                  <1>   ret
   274                              <1> 
    14                                  %include "C:\COAL_new\Code\melody.asm"
     1 000018B9 E9EA4B              <1> jmp tone
     2                              <1> 
     3                              <1> ; Define music data and length
     4 000018BC E703                <1> music_length: dw 999       ; Set the length of the binary file (actual size)
     5 000018BE <bin 4B84h>         <1> music_data: incbin "C:\COAL_new\Code\music.imf"  ; Include binary music data
     6                              <1> melody: 
     7 00006442 20038403E8034C04B0- <1>     dw 800, 900, 1000, 1100, 1200, 1300, 1400, 1500 ; Ascending victory tones
     7 0000644B 0414057805DC05      <1>
     8 00006452 DC0578051405B0044C- <1>     dw 1500, 1400, 1300, 1200, 1100, 1000, 900, 800 ; Descending back for effect
     8 0000645B 04E80384032003      <1>
     9                              <1> 
    10 00006462 0200                <1> tempo: dw 2       
    11                              <1> 
    12                              <1> ; Music playback routine
    13                              <1> music:
    14                              <1>     ;push si
    15 00006464 52                  <1>     push dx
    16 00006465 50                  <1>     push ax
    17 00006466 53                  <1>     push bx
    18 00006467 51                  <1>     push cx
    19                              <1>     
    20                              <1> .next_note:
    21                              <1>     ; Check if we've reached the end of the music data
    22 00006468 3B36[BC18]          <1>     cmp si, [music_length]  
    23 0000646C 7329                <1>     jae end_music           ; Exit if beyond music length
    24                              <1> 
    25                              <1>     ; Play the current note
    26 0000646E BA8803              <1>     mov dx, 388h
    27 00006471 8A84[BE18]          <1>     mov al, [si + music_data + 0]
    28 00006475 EE                  <1>     out dx, al
    29 00006476 BA8903              <1>     mov dx, 389h
    30 00006479 8A84[BF18]          <1>     mov al, [si + music_data + 1]
    31 0000647D EE                  <1>     out dx, al
    32 0000647E 8B9C[C018]          <1>     mov bx, [si + music_data + 2] ; Load delay for current note
    33 00006482 83C604              <1>     add si, 4                  ; Move to the next note
    34                              <1> 
    35                              <1> .repeat_delay:
    36 00006485 B96202              <1>     mov cx, 610                ; Adjust delay timing as needed
    37                              <1> .delay:
    38                              <1>     ; Handle keypress during playback
    39 00006488 B401                <1>     mov ah, 1
    40 0000648A CD16                <1>     int 16h
    41 0000648C 7507                <1>     jnz stop_music
    42 0000648E E2F8                <1>     loop .delay
    43 00006490 4B                  <1>     dec bx
    44 00006491 7FF2                <1>     jg .repeat_delay
    45 00006493 EBD3                <1>     jmp .next_note             ; Play the next note
    46                              <1> 
    47                              <1> stop_music:
    48                              <1>     ; Exit immediately if a key is pressed
    49 00006495 EB00                <1>     jmp end_music
    50                              <1> 
    51                              <1> end_music:
    52                              <1>     ; Turn off the AdLib chip
    53 00006497 BA8803              <1>     mov dx, 388h
    54 0000649A B0FF                <1>     mov al, 0xFF
    55 0000649C EE                  <1>     out dx, al
    56 0000649D BA8903              <1>     mov dx, 389h
    57 000064A0 EE                  <1>     out dx, al
    58 000064A1 59                  <1>     pop cx
    59 000064A2 5B                  <1>     pop bx
    60 000064A3 58                  <1>     pop ax
    61 000064A4 5A                  <1>     pop dx
    62                              <1>     ;pop si
    63 000064A5 C3                  <1>     ret
    64                              <1> 
    65                              <1> ; Program start
    66                              <1> tone:
    67                              <1>     ; Initialize speaker (if necessary)
    68 000064A6 B0B6                <1>     mov al, 0xB6          ; Command for channel 2, mode 3 (square wave)
    69 000064A8 E643                <1>     out 0x43, al          ; Send command byte to port 0x43
    70                              <1> 
    71                              <1>     ; Enable the speaker
    72 000064AA E461                <1>     in al, 0x61
    73 000064AC 0C03                <1>     or al, 0x03
    74 000064AE E661                <1>     out 0x61, al
    75                              <1> 
    76                              <1>     ; Call music playback routine
    77 000064B0 31F6                <1>     xor si, si
    78 000064B2 E8AFFF              <1>     call music
    79                              <1> 
    80                              <1>     ; Disable the speaker
    81 000064B5 E461                <1>     in al, 0x61
    82 000064B7 24FC                <1>     and al, 0xFC
    83 000064B9 E661                <1>     out 0x61, al
    84                              <1>        
    85 000064BB C3                  <1> ret
    86                              <1> 
    87                              <1> delay1:
    88 000064BC 51                  <1>     push cx
    89 000064BD 52                  <1>     push dx
    90 000064BE 8B16[6264]          <1>     mov dx, [tempo] ; Use tempo for dynamic delay control
    91                              <1> l2:
    92 000064C2 B9FFAF              <1>     mov cx, 0xafff ; Reduced loop for shorter delay
    93                              <1> l1: 
    94 000064C5 E2FE                <1>     loop l1
    95 000064C7 4A                  <1>     dec dx
    96 000064C8 83FA00              <1>     cmp dx, 0
    97 000064CB 75F5                <1>     jne l2
    98 000064CD 5A                  <1>     pop dx
    99 000064CE 59                  <1>     pop cx
   100 000064CF C3                  <1>     ret
   101                              <1> 
   102                              <1> play_note:
   103 000064D0 50                  <1>     push ax         ; Save registers
   104 000064D1 53                  <1>     push bx
   105 000064D2 52                  <1>     push dx
   106 000064D3 8B9C[4264]          <1>     mov bx, [melody + si] ; Access the divisor for the current note
   107 000064D7 E80400              <1>     call sound      ; Call the sound function to play the note
   108                              <1> 
   109 000064DA 5A                  <1>     pop dx          ; Restore registers
   110 000064DB 5B                  <1>     pop bx
   111 000064DC 58                  <1>     pop ax
   112 000064DD C3                  <1>     ret
   113                              <1> 
   114                              <1> sound:
   115                              <1>     ; Save current state of port 0x61 (speaker state)
   116 000064DE E461                <1>     in al, 61h
   117 000064E0 50                  <1>     push ax         ; Save the AL value (mode of port 0x61)
   118                              <1> 
   119                              <1>     ; Enable the speaker and connect it to channel 2
   120 000064E1 0C03                <1>     or al, 3h
   121 000064E3 E661                <1>     out 61h, al
   122                              <1> 
   123                              <1>     ; Set channel 2 (PIT)
   124 000064E5 B0B6                <1>     mov al, 0b6h    ; Select mode 3 (square wave) for channel 2
   125 000064E7 E643                <1>     out 43h, al
   126                              <1> 
   127                              <1>     ; Send the divisor to the PIT
   128 000064E9 89D8                <1>     mov ax, bx      ; Load the divisor into AX
   129 000064EB E642                <1>     out 42h, al     ; Send the LSB (lower byte)
   130 000064ED 88E0                <1>     mov al, ah      ; Get the MSB (higher byte)
   131 000064EF E642                <1>     out 42h, al     ; Send the MSB (higher byte)
   132                              <1> 
   133 000064F1 E8C8FF              <1>     call delay1      ; Play the sound for a duration based on delay
   134                              <1> 
   135                              <1>     ; Restore the previous state of port 0x61
   136 000064F4 58                  <1>     pop ax          ; Restore speaker state
   137 000064F5 E661                <1>     out 61h, al
   138 000064F7 C3                  <1>     ret
   139                              <1> 
   140                              <1> play_sound:
   141 000064F8 B91000              <1>     mov cx, 16      ; Number of notes in the melody
   142 000064FB BE0000              <1>     mov si, 0       ; Start with the first note in the array
   143                              <1>     .playy:
   144 000064FE E8CFFF              <1>     call play_note  ; Play the current note
   145 00006501 83C602              <1>     add si, 2       ; Move to the next note
   146 00006504 E2F8                <1>     loop .playy ; Repeat until all notes are played
   147                              <1> 
   148 00006506 C3                  <1>     ret
   149                              <1> 
   150                              <1> 
   151 00006507 060126014A015D0188- <1> musical_Score11: dw 262, 294, 330, 349, 392, 440, 494, 523, 587, 659, 698, 784
   151 00006510 01B801EE010B024B02- <1>
   151 00006519 9302BA021003        <1>
   152 0000651F 060126014A015D0188- <1>            dw 262, 294, 330, 349, 392, 440, 494, 523, 587, 659, 698, 784
   152 00006528 01B801EE010B024B02- <1>
   152 00006531 9302BA021003        <1>
   153 00006537 51                  <1> delay11: push cx
   154 00006538 52                  <1> push dx
   155 00006539 BA0A00              <1> mov dx, 10
   156                              <1> l211:
   157 0000653C B9FFFF              <1> mov cx,0xffff
   158 0000653F E2FE                <1> l111: loop l111
   159 00006541 4A                  <1> dec dx
   160 00006542 83FA00              <1> cmp dx, 0
   161 00006545 75F5                <1> jne l211
   162 00006547 5A                  <1> pop dx 
   163 00006548 59                  <1> pop cx
   164 00006549 C3                  <1> ret
   165                              <1> 
   166                              <1> play_note11:
   167 0000654A 50                  <1>     push ax         ; Save registers
   168 0000654B 53                  <1>     push bx
   169 0000654C 52                  <1>     push dx
   170 0000654D 8B9C[0765]          <1>     mov bx, [musical_Score11 + si] ; Access the divisor for the current note (using SI as index)
   171 00006551 E80400              <1>     call sound11     ; Call the sound function to play the note using the divisor
   172                              <1> 
   173 00006554 5A                  <1>     pop dx          ; Restore registers
   174 00006555 5B                  <1>     pop bx
   175 00006556 58                  <1>     pop ax
   176 00006557 C3                  <1>     ret
   177                              <1> 
   178                              <1> ; Sound function that sends the divisor to the PIT and enables the speaker
   179                              <1> sound11:
   180                              <1>     ; Save current state of port 0x61 (speaker state)
   181 00006558 E461                <1>     in al, 61h
   182 0000655A 50                  <1>     push ax         ; Save the AL value (mode of port 0x61)
   183                              <1>     
   184                              <1>     ; Enable the speaker and connect it to channel 2
   185 0000655B 0C03                <1>     or al, 3h
   186 0000655D E661                <1>     out 61h, al
   187                              <1> 
   188                              <1>     ; Set channel 2 (PIT)
   189 0000655F B0B6                <1>     mov al, 0b6h    ; Select mode 3 (square wave) for channel 2
   190 00006561 E643                <1>     out 43h, al
   191                              <1> 
   192                              <1>     ; Send the divisor to the PIT
   193 00006563 89D8                <1>     mov ax, bx      ; Load the divisor into AX
   194 00006565 E642                <1>     out 42h, al     ; Send the LSB (lower byte)
   195 00006567 88E0                <1>     mov al, ah      ; Get the MSB (higher byte)
   196 00006569 E642                <1>     out 42h, al     ; Send the MSB (higher byte)
   197                              <1> 
   198 0000656B E8C9FF              <1> 	call delay11
   199                              <1> 
   200                              <1>     ; Restore the previous state of port 0x61
   201 0000656E 58                  <1>     pop ax;restore Speaker state
   202 0000656F E661                <1> 	out 61h, al
   203 00006571 C3                  <1>     ret
   204                              <1> 
   205                              <1> ; Main loop to play a sequence of notes
   206                              <1> click_sound:
   207 00006572 60                  <1>     pusha
   208 00006573 BE0000              <1>     mov si, 0       ; Start with the first note in the array (C4)
   209                              <1> play_loop11:
   210 00006576 E8D1FF              <1>     call play_note11  ; Play the current note
   211 00006579 83C602              <1>     add si, 2        ; Move to the next note in the array
   212 0000657C 83FE02              <1>     cmp si, 2	; Check if we've reached the end of the array (B4 is the 7th note)
   213 0000657F 75F5                <1> 	jne play_loop11
   214 00006581 61                  <1>     popa
   215 00006582 C3                  <1>     ret
    15                                  %include "C:\COAL_new\Code\input.asm"
     1                              <1> 
     2                              <1> %include "C:\COAL_new\Code\checks.asm"
     1 00006583 0000                <2> is_valid: dw 0
     2 00006585 0000                <2> is_row_or_col_complete: dw 0
     3                              <2> 
     4 00006587 0000                <2> mistakes_count: dw 0
     5                              <2> 
     6 00006589 0000                <2> current_roww_index: dw 0
     7 0000658B 0000                <2> current_coll_index: dw 0
     8 0000658D 0000                <2> max_roww_index: dw 0
     9 0000658F 0000                <2> max_coll_index: dw 0
    10 00006591 0000                <2> min_roww_index: dw 0
    11 00006593 0000                <2> min_coll_index: dw 0
    12                              <2> 
    13                              <2> is_position_valid:
    14                              <2> 
    15 00006595 60                  <2>     pusha
    16                              <2> 
    17 00006596 B800B8              <2>     mov ax, 0xb800
    18 00006599 8EC0                <2>     mov es, ax
    19                              <2> 
    20 0000659B 31FF                <2>     xor di, di
    21 0000659D 31F6                <2>     xor si, si
    22                              <2> 
    23                              <2>     ; row * 9 + col (assuming row started from 0)
    24                              <2>     ; row * 36 to get the starting location of current row
    25                              <2>     
    26                              <2> ; [si] will have entered number so it can be compared with other numbers in its row + column + 3 by 3 subgrid
    27 0000659F B81200              <2>     mov ax, 18
    28 000065A2 F726[8965]          <2>     mul word [current_roww_index]
    29 000065A6 89C6                <2>     mov si, ax ; now si has the starting location of row
    30 000065A8 B8[12B1]            <2>     mov ax, grid
    31 000065AB 89C3                <2>     mov bx, ax
    32 000065AD 53                  <2>     push bx ; save starting address of grid for further use
    33 000065AE 01C6                <2>     add si, ax ; add grid address to get exact number
    34 000065B0 89F3                <2>     mov bx, si ; now bx also has starting location of row in grid
    35                              <2> 
    36 000065B2 A1[8B65]            <2>     mov ax, word [current_coll_index]
    37 000065B5 D1E0                <2>     shl ax, 1
    38 000065B7 01C6                <2>     add si, ax
    39                              <2> 
    40 000065B9 B90900              <2>     mov cx, 9
    41                              <2> 
    42                              <2>     .check_row:
    43                              <2> 
    44 000065BC 39DE                <2>         cmp si, bx
    45 000065BE 7408                <2>         jz .updateR
    46 000065C0 8B04                <2>         mov ax, [si]
    47 000065C2 3B07                <2>         cmp ax, [bx]
    48 000065C4 0F84D700            <2>         jz .invaliddd
    49                              <2> 
    50                              <2>         .updateR:
    51 000065C8 83C302              <2>         add bx, 2
    52 000065CB 49                  <2>         dec cx
    53 000065CC 83F900              <2>         cmp cx, 0
    54 000065CF 75EB                <2>         jnz .check_row
    55                              <2> 
    56 000065D1 5B                  <2>     pop bx ;load starting address of grid to reach till column top
    57                              <2> 
    58                              <2> 
    59 000065D2 A1[8B65]            <2>     mov ax, [current_coll_index]
    60 000065D5 D1E0                <2>     shl ax, 1
    61 000065D7 01C3                <2>     add bx, ax ; now bx points to the top col value
    62 000065D9 53                  <2>     push bx
    63                              <2> 
    64 000065DA B90900              <2>     mov cx, 9
    65                              <2> 
    66                              <2>     .check_col:
    67                              <2> 
    68 000065DD 39DE                <2>         cmp si, bx
    69 000065DF 7408                <2>         jz .updateC
    70 000065E1 8B04                <2>         mov ax, [si]
    71 000065E3 3B07                <2>         cmp ax, [bx]
    72 000065E5 0F84B600            <2>         jz .invaliddd
    73                              <2> 
    74                              <2>         .updateC:
    75 000065E9 83C312              <2>             add bx, 18
    76 000065EC 49                  <2>             dec cx
    77 000065ED 83F900              <2>             cmp cx, 0
    78 000065F0 75EB                <2>             jnz .check_col
    79                              <2> 
    80 000065F2 BB[12B1]            <2>     mov bx, grid ; starting of grid
    81                              <2> 
    82                              <2>     .check_subGrid:
    83                              <2> 
    84 000065F5 833E[8B65]02        <2>         cmp word [current_coll_index], 2
    85 000065FA 760E                <2>         jbe .first_3C
    86                              <2> 
    87 000065FC 833E[8B65]05        <2>         cmp word [current_coll_index], 5
    88 00006601 761F                <2>         jbe .second_3C
    89                              <2> 
    90 00006603 833E[8B65]08        <2>         cmp word [current_coll_index], 8
    91 00006608 7630                <2>         jbe .third_3C
    92                              <2> 
    93                              <2>         .first_3C:
    94 0000660A 83C300              <2>             add bx, 0
    95 0000660D 833E[8965]02        <2>             cmp word [current_roww_index], 2
    96 00006612 763E                <2>             jbe .first_3R
    97 00006614 833E[8965]05        <2>             cmp word [current_roww_index], 5
    98 00006619 763C                <2>             jbe .second_3R
    99 0000661B 833E[8965]08        <2>             cmp word [current_roww_index], 8
   100 00006620 763A                <2>             jbe .third_3R
   101                              <2> 
   102                              <2>         .second_3C:
   103 00006622 83C306              <2>             add bx, 6
   104 00006625 833E[8965]02        <2>             cmp word [current_roww_index], 2
   105 0000662A 7626                <2>             jbe .first_3R
   106 0000662C 833E[8965]05        <2>             cmp word [current_roww_index], 5
   107 00006631 7624                <2>             jbe .second_3R
   108 00006633 833E[8965]08        <2>             cmp word [current_roww_index], 8
   109 00006638 7622                <2>             jbe .third_3R
   110                              <2> 
   111                              <2>         .third_3C:
   112 0000663A 83C30C              <2>             add bx, 12
   113 0000663D 833E[8965]02        <2>             cmp word [current_roww_index], 2
   114 00006642 760E                <2>             jbe .first_3R
   115 00006644 833E[8965]05        <2>             cmp word [current_roww_index], 5
   116 00006649 760C                <2>             jbe .second_3R
   117 0000664B 833E[8965]08        <2>             cmp word [current_roww_index], 8
   118 00006650 760A                <2>             jbe .third_3R
   119                              <2> 
   120                              <2>         .first_3R:
   121 00006652 83C300              <2>             add bx, 0
   122 00006655 EB0A                <2>             jmp .validate_subgrid
   123                              <2> 
   124                              <2>         .second_3R:
   125 00006657 83C336              <2>             add bx, 54
   126 0000665A EB05                <2>             jmp .validate_subgrid
   127                              <2> 
   128                              <2>         .third_3R:
   129 0000665C 83C36C              <2>             add bx, 108
   130 0000665F EB00                <2>             jmp .validate_subgrid
   131                              <2> 
   132                              <2> ; now bx has the starting address of specific sub grid
   133                              <2> 
   134                              <2>     .validate_subgrid:
   135                              <2> 
   136 00006661 B90900              <2>         mov cx, 9
   137 00006664 BA0300              <2>         mov dx, 3
   138                              <2> 
   139                              <2>         .subgrid_check:
   140                              <2> 
   141 00006667 39DE                <2>             cmp si, bx
   142 00006669 7406                <2>             jz .update_subgrid_check
   143                              <2> 
   144 0000666B 8B04                <2>             mov ax, [si]
   145 0000666D 3B07                <2>             cmp ax, [bx]
   146 0000666F 742E                <2>             jz .invaliddd
   147                              <2> 
   148                              <2>             .update_subgrid_check:
   149                              <2> 
   150 00006671 83C302              <2>                 add bx, 2
   151 00006674 49                  <2>                 dec cx
   152 00006675 740D                <2>                 jz .validate_from_soultion ; the position is valid
   153 00006677 4A                  <2>                 dec dx
   154 00006678 7402                <2>                 jz .next_row
   155 0000667A EBEB                <2>                 jmp .subgrid_check
   156                              <2> 
   157                              <2>                     .next_row:
   158 0000667C 83C30C              <2>                         add bx, 12
   159 0000667F BA0300              <2>                         mov dx, 3
   160                              <2> 
   161 00006682 EBE3                <2>                 jmp .subgrid_check
   162                              <2> 
   163                              <2> 
   164                              <2>     .validate_from_soultion:
   165                              <2> 
   166 00006684 B81200              <2>             mov ax, 18
   167 00006687 F726[8965]          <2>             mul word [current_roww_index]
   168 0000668B 89C7                <2>             mov di, ax ; now si has the starting location of row
   169 0000668D B8[B4B1]            <2>             mov ax, solution
   170 00006690 01C7                <2>             add di, ax ; add grid address to get exact number
   171                              <2> 
   172 00006692 A1[8B65]            <2>             mov ax, word [current_coll_index]
   173 00006695 D1E0                <2>             shl ax, 1
   174 00006697 01C7                <2>             add di, ax
   175                              <2> 
   176 00006699 8B15                <2>             mov dx, [di]
   177 0000669B 3B14                <2>             cmp dx, [si]
   178 0000669D 744C                <2>             JE .return_validationn
   179                              <2>     
   180                              <2> .invaliddd:
   181                              <2>     
   182 0000669F 50                  <2>     push ax
   183 000066A0 56                  <2>     push si
   184                              <2> 
   185 000066A1 31C0                <2>     xor ax, ax
   186 000066A3 B050                <2>     mov al, 80
   187 000066A5 F726[EC15]          <2>     mul word [current_row]
   188 000066A9 0306[EE15]          <2>     add ax, [current_col]
   189 000066AD D1E0                <2>     shl ax, 1
   190                              <2> 
   191 000066AF 89C7                <2>     mov di, ax
   192 000066B1 81C7A200            <2>     add di, 162
   193                              <2> 
   194 000066B5 5E                  <2>     pop si
   195 000066B6 58                  <2>     pop ax
   196                              <2> 
   197                              <2> 
   198 000066B7 B434                <2>     mov ah, 00110100b
   199 000066B9 8A04                <2>     mov al, [si]
   200 000066BB 0430                <2>     add al, 48
   201 000066BD 268905              <2>     mov [es:di], ax
   202                              <2> 
   203 000066C0 833E[8BB8]14        <2>     cmp word [score_count], 20
   204 000066C5 720C                <2>     JB .dont_subtract_score
   205 000066C7 832E[8BB8]14        <2>     sub word [score_count], 20
   206                              <2> 
   207 000066CC FF36[8BB8]          <2>     push word [score_count]
   208 000066D0 E899A0              <2>     call printnum
   209                              <2> 
   210                              <2>     .dont_subtract_score:
   211                              <2> 
   212 000066D3 C706[8365]0000      <2>     mov word [is_valid], 0
   213 000066D9 8306[8765]01        <2>     add word [mistakes_count], 1
   214 000066DE 833E[8765]03        <2>     cmp word [mistakes_count], 3
   215 000066E3 0F84F756            <2>     JE display_ending_screen
   216                              <2> 
   217 000066E7 61                  <2>     popa
   218                              <2> 
   219 000066E8 E98D54              <2>     jmp check_arrow_keys
   220                              <2> 
   221                              <2> .return_validationn:
   222                              <2> 
   223 000066EB 8306[8BB8]0A        <2>     add word [score_count], 10
   224                              <2> 
   225 000066F0 FF36[8BB8]          <2>     push word [score_count]
   226 000066F4 E875A0              <2>     call printnum
   227                              <2> 
   228 000066F7 C706[8365]0100      <2>     mov word [is_valid], 1
   229 000066FD EB00                <2>     jmp .check_row_complete
   230                              <2> 
   231                              <2>     .check_row_complete:
   232                              <2> 
   233 000066FF B81200              <2>         mov ax, 18
   234 00006702 F726[8965]          <2>         mul word [current_roww_index]
   235 00006706 89C6                <2>         mov si, ax ; now si has the starting location of row
   236 00006708 B8[12B1]            <2>         mov ax, grid
   237 0000670B 01C6                <2>         add si, ax ; add grid address to get exact number
   238 0000670D 89F3                <2>         mov bx, si
   239                              <2> 
   240 0000670F B90900              <2>         mov cx, 9
   241                              <2> 
   242                              <2>     .row_loop: ;checks if row is complete
   243                              <2>         
   244 00006712 803F00              <2>         cmp byte [bx], 0
   245 00006715 7435                <2>         JE .not_complete
   246 00006717 83C302              <2>         add bx, 2
   247 0000671A 49                  <2>         dec cx
   248 0000671B 83F900              <2>         cmp cx, 0
   249 0000671E 75F2                <2>         jnz .row_loop
   250                              <2> 
   251 00006720 61                  <2>     popa
   252                              <2> 
   253 00006721 BE[12B1]            <2>     mov si, grid
   254 00006724 B95100              <2>     mov cx, 81
   255                              <2>     .check_is_full1:
   256 00006727 833C00              <2>         cmp word [si], 0
   257 0000672A 740C                <2>         JE .row_music
   258 0000672C 83C602              <2>         add si, 2
   259 0000672F 49                  <2>         dec cx
   260 00006730 75F5                <2>         jnz .check_is_full1
   261                              <2> 
   262                              <2> ;---------------CALL WINNING SCREEN HERE-------------
   263                              <2>        
   264 00006732 E8260A              <2>         call successful_game
   265 00006735 E8DDA1              <2>         call ending_screen
   266                              <2> 
   267                              <2>      .row_music: 
   268                              <2> 
   269 00006738 8306[8BB8]28        <2>     add word [score_count], 40
   270                              <2> 
   271 0000673D FF36[8BB8]          <2>     push word [score_count]
   272 00006741 E828A0              <2>     call printnum
   273                              <2> 
   274 00006744 E8B1FD              <2>     call play_sound
   275 00006747 E8634F              <2>     call display_horizontally
   276                              <2> 
   277 0000674A EB42                <2>     jmp .end_validation
   278                              <2> 
   279                              <2>     .not_complete:
   280                              <2> 
   281 0000674C 5B                  <2>     pop bx
   282 0000674D 5B                  <2>     pop bx
   283                              <2> 
   284 0000674E B90900              <2>     mov cx, 9
   285                              <2> 
   286                              <2>     .col_loop: ; checks if col is complete
   287                              <2> 
   288 00006751 833F00              <2>         cmp word [bx], 0
   289 00006754 7438                <2>         JE .end_validation
   290 00006756 83C312              <2>         add bx, 18
   291 00006759 49                  <2>         dec cx
   292 0000675A 75F5                <2>         jnz .col_loop
   293                              <2> 
   294 0000675C 61                  <2>         popa
   295                              <2> 
   296 0000675D BE[12B1]            <2>         mov si, grid
   297 00006760 B95100              <2>         mov cx, 81
   298                              <2> 
   299                              <2>         .check_is_full2:
   300 00006763 833C00              <2>         cmp word [si], 0
   301 00006766 740C                <2>         JE .col_music
   302 00006768 83C602              <2>         add si, 2
   303 0000676B 49                  <2>         dec cx
   304 0000676C 75F5                <2>         jnz .check_is_full2
   305                              <2> 
   306                              <2> ;---------------CALL WINNING SCREEN HERE-------------
   307                              <2>         
   308 0000676E E8EA09              <2>         call successful_game
   309 00006771 E8A1A1              <2>         call ending_screen
   310                              <2> 
   311                              <2>         .col_music:
   312                              <2> 
   313 00006774 8306[8BB8]28        <2>         add word [score_count], 40
   314                              <2> 
   315 00006779 FF36[8BB8]          <2>         push word [score_count]
   316 0000677D E8EC9F              <2>         call printnum
   317                              <2>         
   318 00006780 E875FD              <2>         call play_sound
   319 00006783 E8E94F              <2>         call display_vertically
   320                              <2>         
   321                              <2> 
   322 00006786 EB06                <2>         jmp .end_validation
   323                              <2> 
   324 00006788 C706[8565]0000      <2>         mov word [is_row_or_col_complete], 0
   325                              <2> 
   326                              <2>     .end_validation:
   327                              <2> 
   328 0000678E 61                  <2>         popa
   329 0000678F E9E653              <2>         jmp check_arrow_keys
     3                              <1> 
     4 00006792 2200                <1> blink_box: dw 34
     5 00006794 B400                <1> non_blink_box: dw 10110100b
     6 00006796 0000                <1> blink_number: dw 0
     7 00006798 0000                <1> temp_location: dw 0
     8                              <1> 
     9                              <1> 
    10                              <1>   numbers_card_function:
    11                              <1>     ;--------Print Number Cards----------
    12 0000679A 60                  <1>     pusha
    13 0000679B B430                <1>     MOV AH, 00110000b
    14                              <1> 
    15 0000679D BBF001              <1>     MOV BX,496
    16 000067A0 BFE401              <1>     MOV DI,484
    17 000067A3 B90400              <1>     MOV CX,4
    18 000067A6 B231                <1>     MOV dl,0x31
    19                              <1> 
    20                              <1>     print_cards:
    21                              <1>     
    22 000067A8 E86398              <1>     CALL number_cards
    23 000067AB 89DF                <1>     MOV DI,BX
    24 000067AD FEC2                <1>     INC DL
    25 000067AF E85C98              <1>     CALL number_cards
    26 000067B2 FEC2                <1>     INC DL
    27 000067B4 81C7D401            <1>     ADD di,468
    28 000067B8 81C3E001            <1>     ADD bx,480
    29                              <1> 
    30 000067BC 49                  <1>     dec cx
    31 000067BD 83F900              <1>     cmp cx,0
    32 000067C0 75E6                <1>     jnz print_cards
    33 000067C2 E84998              <1>     CALL number_cards
    34 000067C5 61                  <1>     popa
    35 000067C6 C3                  <1>     ret
    36                              <1> 
    37                              <1> 
    38                              <1> numbers_card_navigation:
    39                              <1> 
    40                              <1>     ;call erase_notes
    41                              <1> 
    42 000067C7 C706[9667]0100      <1>   mov word [blink_number], 1
    43 000067CD E8CAFF              <1>   call numbers_card_function
    44                              <1>   sttart:
    45                              <1>     
    46 000067D0 B400                <1>     mov ah, 0x00
    47 000067D2 CD16                <1>     int 16h
    48                              <1>     
    49 000067D4 80FC4D              <1>     CMP AH, 0x4D       
    50 000067D7 7415                <1>     JE rightt ; Jump if right arrow key is pressed
    51                              <1> 
    52 000067D9 80FC4B              <1>     CMP AH, 0x4B       
    53 000067DC 742A                <1>     JE leftt ; Jump if left arrow key is pressed
    54                              <1> 
    55 000067DE 80FC48              <1>     CMP AH, 0x48      
    56 000067E1 743F                <1>     JE upp ; Jump if up arrow key is pressed
    57                              <1> 
    58 000067E3 80FC50              <1>     CMP AH, 0x50       
    59 000067E6 7454                <1>     JE downn ; Jump if down arrow key is pressed  
    60                              <1>     
    61 000067E8 3C0D                <1>     CMP AL, 0x0D       ; Check for Enter key (ASCII 13)
    62 000067EA 746B                <1>     JE savee
    63                              <1>     
    64 000067EC EBE2                <1>     jmp sttart
    65                              <1> 
    66                              <1>     rightt:
    67 000067EE 8B1E[9667]          <1>     mov bx, word [blink_number]
    68 000067F2 83FB09              <1>     cmp bx, 9
    69 000067F5 7D05                <1>     jge righttt
    70 000067F7 83C301              <1>     add bx, 1
    71 000067FA EB03                <1>     jmp startt1
    72                              <1>     righttt:
    73 000067FC BB0100              <1>     mov bx, 1
    74                              <1>     startt1:
    75 000067FF 891E[9667]          <1>     mov word [blink_number], bx
    76 00006803 E894FF              <1>     call numbers_card_function
    77 00006806 EBC8                <1>     jmp sttart   
    78                              <1> 
    79                              <1>     leftt:
    80 00006808 8B1E[9667]          <1>     mov bx, word [blink_number]
    81 0000680C 83FB01              <1>     cmp bx, 1
    82 0000680F 7E05                <1>     jle lefttt
    83 00006811 83EB01              <1>     sub bx, 1
    84 00006814 EB03                <1>     jmp startt2
    85                              <1>     lefttt:
    86 00006816 BB0900              <1>     mov bx, 9
    87                              <1>     startt2:
    88 00006819 891E[9667]          <1>     mov word [blink_number], bx
    89 0000681D E87AFF              <1>     call numbers_card_function
    90 00006820 EBAE                <1>     jmp sttart
    91                              <1> 
    92                              <1>     upp:
    93 00006822 8B1E[9667]          <1>     mov bx, word [blink_number]
    94 00006826 83FB02              <1>     cmp bx, 2
    95 00006829 7E05                <1>     jle uppp
    96 0000682B 83EB02              <1>     sub bx, 2
    97 0000682E EB03                <1>     jmp startt3
    98                              <1>     uppp:
    99 00006830 BB0900              <1>     mov bx, 9
   100                              <1>     startt3:
   101 00006833 891E[9667]          <1>     mov word [blink_number], bx
   102 00006837 E860FF              <1>     call numbers_card_function
   103 0000683A EB94                <1>     jmp sttart      
   104                              <1> 
   105                              <1> 
   106                              <1>     downn:
   107 0000683C 8B1E[9667]          <1>     mov bx, word [blink_number]
   108 00006840 83FB08              <1>     cmp bx, 8
   109 00006843 7D05                <1>     jge downnn
   110 00006845 83C302              <1>     add bx, 2
   111 00006848 EB03                <1>     jmp startt4
   112                              <1>     downnn:
   113 0000684A BB0100              <1>     mov bx, 1
   114                              <1>     startt4:
   115 0000684D 891E[9667]          <1>     mov word [blink_number], bx
   116 00006851 E846FF              <1>     call numbers_card_function
   117 00006854 E979FF              <1>     jmp sttart   
   118                              <1> 
   119                              <1> savee:
   120                              <1> 
   121 00006857 E818FD              <1>     call click_sound
   122                              <1> 
   123 0000685A B800B8              <1>     mov ax, 0xb800
   124 0000685D 8EC0                <1>     mov es, ax
   125 0000685F 31C0                <1>     xor ax, ax
   126                              <1> 
   127 00006861 E87300              <1>     call return_location_on_grid
   128 00006864 31DB                <1>     xor bx, bx
   129 00006866 8B1E[9667]          <1>     mov bx, word [blink_number]
   130 0000686A BE[0500]            <1>     mov si, save_count
   131 0000686D 01DE                <1>     add si, bx
   132 0000686F 4E                  <1>     dec si
   133 00006870 FF04                <1>     inc word [si]             ; Increment save count for the current number
   134                              <1> 
   135 00006872 8B3E[9867]          <1>     mov di, word [temp_location]
   136                              <1> 
   137 00006876 56                  <1>     push si
   138 00006877 53                  <1>     push bx
   139 00006878 8B9D[12B1]          <1>     mov bx, word [grid + di]
   140 0000687C BE[1569]            <1>     mov si, undo_value_array
   141 0000687F 56                  <1>     push si
   142 00006880 89DE                <1>     mov si, bx
   143 00006882 56                  <1>     push si
   144 00006883 E89602              <1>     call insertAtStart
   145                              <1> 
   146 00006886 BE[B569]            <1>     mov si, undo_location_array
   147 00006889 56                  <1>     push si
   148 0000688A 89FE                <1>     mov si, di
   149 0000688C 56                  <1>     push si
   150 0000688D E88C02              <1>     call insertAtStart
   151                              <1> 
   152 00006890 8B3E[1016]          <1>     mov di, word [temp]     
   153 00006894 BE[556A]            <1>     mov si, undo_temp_array
   154 00006897 56                  <1>     push si
   155 00006898 89FE                <1>     mov si, di
   156 0000689A 56                  <1>     push si
   157 0000689B E87E02              <1>     call insertAtStart
   158 0000689E 5B                  <1>     pop bx
   159 0000689F 5E                  <1>     pop si
   160                              <1>     
   161 000068A0 8B3E[9867]          <1>     mov di, word [temp_location]    
   162 000068A4 8B1E[9667]          <1>     mov bx, word [blink_number]
   163                              <1>     
   164 000068A8 899D[12B1]          <1>     mov word [grid + di], bx
   165 000068AC 80C330              <1>     add bl, 0x30
   166 000068AF B730                <1>     mov bh, 0x30
   167 000068B1 8B3E[1016]          <1>     mov di, word [temp]
   168 000068B5 26891D              <1>     mov [es: di], bx
   169 000068B8 BB0000              <1>     mov bx, 0
   170 000068BB 891E[9667]          <1>     mov word [blink_number], bx
   171                              <1> 
   172 000068BF E8D8FE              <1>     call numbers_card_function
   173 000068C2 C3                  <1>     ret
   174                              <1> 
   175                              <1> 
   176                              <1> zeroo:
   177 000068C3 B82300              <1> mov ax, 35
   178 000068C6 EB27                <1> jmp aga
   179                              <1> 
   180                              <1> nine:
   181 000068C8 B89600              <1> mov ax, 150
   182 000068CB EB22                <1> jmp aga
   183                              <1> 
   184                              <1> thirteen:
   185 000068CD B86400              <1> mov ax, 100
   186 000068D0 EB1D                <1> jmp aga
   187                              <1> 
   188                              <1> twenty_one:
   189 000068D2 B86500              <1> mov ax, 101
   190 000068D5 EB18                <1> jmp aga
   191                              <1> 
   192                              <1> 
   193                              <1> 
   194                              <1> return_location_on_grid:
   195 000068D7 60                  <1> pusha
   196 000068D8 A1[EC15]            <1>     mov ax, [current_row]
   197 000068DB 83F800              <1>     cmp ax, 0
   198 000068DE 74E3                <1>     je zeroo
   199 000068E0 83F809              <1>     cmp ax, 9
   200 000068E3 74E3                <1>     je nine
   201 000068E5 83F80D              <1>     cmp ax, 13
   202 000068E8 74E3                <1>     je thirteen
   203 000068EA 83F815              <1>     cmp ax, 21
   204 000068ED 74E3                <1>     je twenty_one
   205                              <1>     
   206                              <1>     aga:
   207 000068EF 8B1E[EE15]          <1>     mov bx, [current_col]
   208 000068F3 31D2                <1>     xor dx, dx
   209 000068F5 F7E3                <1>     mul bx
   210 000068F7 31F6                <1>     xor si, si
   211 000068F9 31FF                <1>     xor di, di
   212                              <1>     
   213                              <1> search_loop:
   214 000068FB 8B9C[8DB8]          <1>     mov bx, [grid_locations + si]
   215 000068FF 39D8                <1>     cmp ax, bx
   216 00006901 740C                <1>     je found_value
   217 00006903 83C602              <1>     add si, 2
   218 00006906 83C702              <1>     add di, 2
   219 00006909 81FEA200            <1>     cmp si, 162
   220 0000690D 7CEC                <1>     jl search_loop
   221                              <1>     found_value:
   222 0000690F 893E[9867]          <1>     mov word [temp_location], di
   223 00006913 61                  <1> popa
   224 00006914 C3                  <1>     ret
   225                              <1> 
    16                                  %include "C:\COAL_new\Code\erase_&_undo.asm"
     1 00006915 000000000000000000- <1> undo_value_array:    dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
     1 0000691E 000000000000000000- <1>
     1 00006927 000000000000000000- <1>
     1 00006930 000000000000000000- <1>
     1 00006939 000000000000000000- <1>
     1 00006942 000000000000000000- <1>
     1 0000694B 000000000000000000- <1>
     1 00006954 000000000000000000- <1>
     1 0000695D 000000000000000000- <1>
     1 00006966 000000000000000000- <1>
     1 0000696F 000000000000000000- <1>
     1 00006978 000000000000000000- <1>
     1 00006981 000000000000000000- <1>
     1 0000698A 000000000000000000- <1>
     1 00006993 000000000000000000- <1>
     1 0000699C 000000000000000000- <1>
     1 000069A5 000000000000000000- <1>
     1 000069AE 00000000000000      <1>
     2 000069B5 000000000000000000- <1> undo_location_array: dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
     2 000069BE 000000000000000000- <1>
     2 000069C7 000000000000000000- <1>
     2 000069D0 000000000000000000- <1>
     2 000069D9 000000000000000000- <1>
     2 000069E2 000000000000000000- <1>
     2 000069EB 000000000000000000- <1>
     2 000069F4 000000000000000000- <1>
     2 000069FD 000000000000000000- <1>
     2 00006A06 000000000000000000- <1>
     2 00006A0F 000000000000000000- <1>
     2 00006A18 000000000000000000- <1>
     2 00006A21 000000000000000000- <1>
     2 00006A2A 000000000000000000- <1>
     2 00006A33 000000000000000000- <1>
     2 00006A3C 000000000000000000- <1>
     2 00006A45 000000000000000000- <1>
     2 00006A4E 00000000000000      <1>
     3 00006A55 000000000000000000- <1> undo_temp_array:     dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
     3 00006A5E 000000000000000000- <1>
     3 00006A67 000000000000000000- <1>
     3 00006A70 000000000000000000- <1>
     3 00006A79 000000000000000000- <1>
     3 00006A82 000000000000000000- <1>
     3 00006A8B 000000000000000000- <1>
     3 00006A94 000000000000000000- <1>
     3 00006A9D 000000000000000000- <1>
     3 00006AA6 000000000000000000- <1>
     3 00006AAF 000000000000000000- <1>
     3 00006AB8 000000000000000000- <1>
     3 00006AC1 000000000000000000- <1>
     3 00006ACA 000000000000000000- <1>
     3 00006AD3 000000000000000000- <1>
     3 00006ADC 000000000000000000- <1>
     3 00006AE5 000000000000000000- <1>
     3 00006AEE 00000000000000      <1>
     4 00006AF5 0000                <1> display_flag: dw 0     ;0 for display, 1 for not display
     5 00006AF7 0000                <1> temp1:  dw 0
     6                              <1> 
     7                              <1> deleteFirst:
     8 00006AF9 55                  <1>     push bp
     9 00006AFA 89E5                <1>     mov bp, sp
    10 00006AFC 60                  <1>     pusha
    11 00006AFD 8B7604              <1>     mov si, [bp + 4]
    12 00006B00 B94F00              <1>     mov cx, 79
    13 00006B03 89F7                <1>     mov di, si
    14                              <1> 
    15                              <1> Lop1:
    16 00006B05 8B4402              <1>     mov ax, [si + 2]
    17 00006B08 8905                <1>     mov [di], ax
    18 00006B0A 83C602              <1>     add si, 2
    19 00006B0D 83C702              <1>     add di, 2
    20 00006B10 E2F3                <1>     loop Lop1
    21 00006B12 BB0000              <1>     mov bx, 0
    22 00006B15 891D                <1>     mov word [di], bx
    23 00006B17 61                  <1>     popa
    24 00006B18 5D                  <1>     pop bp
    25 00006B19 C20200              <1>     ret 2
    26                              <1> 
    27                              <1> insertAtStart:
    28 00006B1C 55                  <1>     push bp
    29 00006B1D 89E5                <1>     mov bp, sp
    30 00006B1F 60                  <1>     pusha
    31 00006B20 8B4604              <1>     mov ax, [bp + 4]
    32 00006B23 8B7606              <1>     mov si, [bp + 6]
    33 00006B26 B94F00              <1>     mov cx, 79
    34 00006B29 89CF                <1>     mov di, cx
    35 00006B2B D1E7                <1>     shl di, 1
    36 00006B2D 01FE                <1>     add si, di
    37                              <1> 
    38                              <1> Lop2:
    39 00006B2F 8B5CFE              <1>     mov bx, [si - 2]
    40 00006B32 891C                <1>     mov [si], bx
    41 00006B34 83EE02              <1>     sub si, 2
    42 00006B37 E2F6                <1>     loop Lop2
    43                              <1> 
    44 00006B39 8904                <1>     mov [si], ax
    45 00006B3B 61                  <1>     popa
    46 00006B3C 5D                  <1>     pop bp
    47 00006B3D C20400              <1>     ret 4
    48                              <1> 
    49                              <1> undoo:
    50 00006B40 60                  <1>     pusha
    51 00006B41 B800B8              <1>     mov ax, 0xb800
    52 00006B44 8EC0                <1>     mov es, ax
    53 00006B46 BE[1569]            <1>     mov si, undo_value_array
    54 00006B49 8B04                <1>     mov ax, [si]
    55                              <1> 
    56 00006B4B BE[B569]            <1>     mov si, undo_location_array
    57 00006B4E 8B3C                <1>     mov di, [si]
    58                              <1> 
    59 00006B50 BE[556A]            <1>     mov si, undo_temp_array
    60 00006B53 8B1C                <1>     mov bx, [si]
    61                              <1> 
    62 00006B55 BE[1569]            <1>     mov si, undo_value_array
    63 00006B58 56                  <1>     push si
    64 00006B59 E89DFF              <1>     call deleteFirst
    65                              <1> 
    66 00006B5C BE[B569]            <1>     mov si, undo_location_array
    67 00006B5F 56                  <1>     push si
    68 00006B60 E896FF              <1>     call deleteFirst
    69                              <1> 
    70 00006B63 BE[556A]            <1>     mov si, undo_temp_array
    71 00006B66 56                  <1>     push si
    72 00006B67 E88FFF              <1>     call deleteFirst
    73                              <1> 
    74 00006B6A 8985[12B1]          <1>     mov word [grid + di], ax
    75                              <1> 
    76 00006B6E 89DF                <1>     mov di, bx
    77 00006B70 83F800              <1>     cmp ax, 0
    78 00006B73 7409                <1>     je ll 
    79 00006B75 0430                <1>     add al, 0x30
    80 00006B77 B430                <1>     mov ah, 0x30
    81 00006B79 268905              <1>     mov [es: di], ax
    82 00006B7C EB06                <1>     jmp undo_end
    83                              <1> ll:
    84 00006B7E BB2030              <1>     mov bx, 0x3020
    85 00006B81 26891D              <1>     mov [es: di], bx
    86                              <1> 
    87                              <1> undo_end:
    88 00006B84 C706[F56A]0100      <1>     mov word [display_flag], 1
    89 00006B8A A1[1016]            <1>     mov ax, word [temp]
    90 00006B8D A3[F76A]            <1>     mov word [temp1], ax
    91 00006B90 61                  <1>     popa
    92 00006B91 E9E44F              <1>     jmp check_arrow_keys
    93                              <1> 
    94                              <1> erasee:
    95 00006B94 60                  <1>     pusha
    96 00006B95 E83FFD              <1>     call return_location_on_grid
    97 00006B98 8B3E[9867]          <1>     mov di, word [temp_location]
    98 00006B9C 8B85[12B1]          <1>     mov ax, word [grid + di]
    99 00006BA0 BB0000              <1>     mov bx, 0
   100 00006BA3 899D[12B1]          <1>     mov word [grid + di], bx
   101                              <1> 
   102 00006BA7 BE[1569]            <1>     mov si, undo_value_array
   103 00006BAA 56                  <1>     push si
   104 00006BAB 89C6                <1>     mov si, ax
   105 00006BAD 56                  <1>     push si
   106 00006BAE E86BFF              <1>     call insertAtStart
   107                              <1>     
   108 00006BB1 8B1E[1016]          <1>     mov bx, word [temp]
   109 00006BB5 BE[556A]            <1>     mov si, undo_temp_array
   110 00006BB8 56                  <1>     push si
   111 00006BB9 89DE                <1>     mov si, bx
   112 00006BBB 56                  <1>     push si
   113 00006BBC E85DFF              <1>     call insertAtStart
   114                              <1> 
   115 00006BBF BE[B569]            <1>     mov si, undo_location_array
   116 00006BC2 56                  <1>     push si
   117 00006BC3 89FE                <1>     mov si, di
   118 00006BC5 56                  <1>     push si
   119 00006BC6 E853FF              <1>     call insertAtStart
   120                              <1> 
   121 00006BC9 E80BFD              <1>     call return_location_on_grid
   122 00006BCC 8B3E[9867]          <1>     mov di, word [temp_location]
   123 00006BD0 8B85[12B1]          <1>     mov ax, word [grid + di]
   124 00006BD4 BB0000              <1>     mov bx, 0
   125 00006BD7 899D[12B1]          <1>     mov word [grid + di], bx
   126                              <1> 
   127 00006BDB BB2030              <1>     mov bx, 0x3020
   128 00006BDE 8B3E[1016]          <1>     mov di, word [temp]
   129 00006BE2 26891D              <1>     mov [es:di], bx
   130 00006BE5 C706[F56A]0100      <1>     mov word [display_flag], 1
   131 00006BEB A1[1016]            <1>     mov ax, word [temp]
   132 00006BEE A3[F76A]            <1>     mov word [temp1], ax
   133 00006BF1 61                  <1>     popa
   134 00006BF2 E8A5FB              <1>     call numbers_card_function
   135                              <1> 
   136                              <1>     ; ADD word [current_col], 4
   137                              <1>     ; ADD word [current_coll_index], 1
   138                              <1>     
   139                              <1> 
   140                              <1>     ; CMP word [current_col], 46
   141                              <1>     ;     JG .increment_rows1
   142                              <1> 
   143                              <1>     ;     .increment_cols1:
   144                              <1>     ;     ADD word [current_col], 4
   145                              <1>     ;     ADD word [current_coll_index], 1
   146                              <1>     ;     CALL navigate_grid
   147                              <1>     ;     JMP check_arrow_keys
   148                              <1> 
   149                              <1>     ;     .increment_rows1:
   150                              <1>     ;     cmp word [grid_flag], 1
   151                              <1>     ;     JE .for_scrolled_grid1
   152                              <1> 
   153                              <1>     ;     .for_scrolled_grid1:
   154                              <1>     ;     CMP word [current_row], 8
   155                              <1>     ;     JE .go_left1
   156                              <1> 
   157                              <1>     ;     .go_left1:
   158                              <1>     ;     SUB word [current_col], 4
   159                              <1>     ;     SUB word [current_coll_index], 1
   160                              <1>     ;     CALL navigate_grid
   161                              <1>     ;     JMP check_arrow_keys
   162                              <1>         
   163                              <1>     ;     ADD word [current_row], 4
   164                              <1>     ;     ADD word [current_roww_index], 1
   165                              <1>     ;     CALL navigate_grid
   166                              <1>     
   167                              <1>     ; .increment_end1:
   168                              <1>     
   169                              <1>     ; JMP check_arrow_keys
   170                              <1> 
   171 00006BF5 E81AAA              <1>     call navigate_grid
   172                              <1> 
   173                              <1> 
   174 00006BF8 E97D4F              <1>     jmp check_arrow_keys
    17                                  %include "C:\COAL_new\Code\gameover.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4 00006BFB 2020207C7C7C7C7C7C- <1> gameOver:  db '   |||||||  |||||||  |        |  |||||||   ||||   |     |  |||||||  ||||         '
     4 00006C04 7C20207C7C7C7C7C7C- <1>
     4 00006C0D 7C20207C2020202020- <1>
     4 00006C16 2020207C20207C7C7C- <1>
     4 00006C1F 7C7C7C7C2020207C7C- <1>
     4 00006C28 7C7C2020207C202020- <1>
     4 00006C31 20207C20207C7C7C7C- <1>
     4 00006C3A 7C7C7C20207C7C7C7C- <1>
     4 00006C43 202020202020202020  <1>
     5 00006C4C 2020207C2020202020- <1>            db '   |        |     |  | |    | |  |        |    |  |     |  |        |   |        '
     5 00006C55 2020207C2020202020- <1>
     5 00006C5E 7C20207C207C202020- <1>
     5 00006C67 207C207C20207C2020- <1>
     5 00006C70 2020202020207C2020- <1>
     5 00006C79 20207C20207C202020- <1>
     5 00006C82 20207C20207C202020- <1>
     5 00006C8B 20202020207C202020- <1>
     5 00006C94 7C2020202020202020  <1>
     6 00006C9D 2020207C20207C7C7C- <1>            db '   |  ||||  |||||||  |  |  |  |  ||||     |    |   |   |   ||||     ||||         '
     6 00006CA6 7C20207C7C7C7C7C7C- <1>
     6 00006CAF 7C20207C20207C2020- <1>
     6 00006CB8 7C20207C20207C7C7C- <1>
     6 00006CC1 7C20202020207C2020- <1>
     6 00006CCA 20207C2020207C2020- <1>
     6 00006CD3 207C2020207C7C7C7C- <1>
     6 00006CDC 20202020207C7C7C7C- <1>
     6 00006CE5 202020202020202020  <1>
     7 00006CEE 2020207C2020202020- <1>            db '   |     |  |     |  |    |   |  |        |    |    | |    |        | |          '
     7 00006CF7 7C20207C2020202020- <1>
     7 00006D00 7C20207C202020207C- <1>
     7 00006D09 2020207C20207C2020- <1>
     7 00006D12 2020202020207C2020- <1>
     7 00006D1B 20207C202020207C20- <1>
     7 00006D24 7C202020207C202020- <1>
     7 00006D2D 20202020207C207C20- <1>
     7 00006D36 202020202020202020  <1>
     8 00006D3F 2020207C7C7C7C7C7C- <1>            db '   |||||||  |     |  |        |  |||||||   ||||      |     |||||||  |   |        '
     8 00006D48 7C20207C2020202020- <1>
     8 00006D51 7C20207C2020202020- <1>
     8 00006D5A 2020207C20207C7C7C- <1>
     8 00006D63 7C7C7C7C2020207C7C- <1>
     8 00006D6C 7C7C2020202020207C- <1>
     8 00006D75 20202020207C7C7C7C- <1>
     8 00006D7E 7C7C7C20207C202020- <1>
     8 00006D87 7C2020202020202020  <1>
     9                              <1> 
    10                              <1> 
    11                              <1> timeDelay11:
    12 00006D90 51                  <1>     push cx
    13 00006D91 B9FFFF              <1>     mov cx, 0xffff
    14                              <1> loop11:
    15 00006D94 83E901              <1>     sub cx, 1
    16 00006D97 83F900              <1>     cmp cx, 0x0
    17 00006D9A 75F8                <1>     jne loop11
    18 00006D9C B9FFFF              <1>     mov cx, 0xffff
    19                              <1> loop22:
    20 00006D9F 83E901              <1>     sub cx, 1
    21 00006DA2 83F900              <1>     cmp cx, 0x0
    22 00006DA5 75F8                <1>     jne loop22
    23 00006DA7 59                  <1>     pop cx
    24 00006DA8 C3                  <1>     ret
    25                              <1> 
    26                              <1> game_is_over:
    27 00006DA9 E83F9C              <1>     call clearscreen
    28 00006DAC B800B8              <1>     mov ax, 0xB800
    29 00006DAF 8EC0                <1>     mov es, ax
    30 00006DB1 31FF                <1>     xor di, di
    31 00006DB3 BFE006              <1>     mov di, 1760
    32 00006DB6 BE[FB6B]            <1>     mov si, gameOver
    33 00006DB9 B90500              <1>     mov cx, 5
    34                              <1> 
    35                              <1> print_lines_function:
    36 00006DBC 51                  <1>     push cx
    37 00006DBD B95000              <1>     mov cx, 80
    38                              <1> 
    39                              <1> print_chars_function:
    40 00006DC0 8A04                <1>     mov al, [si]
    41 00006DC2 3C7C                <1>     cmp al, '|'
    42 00006DC4 7406                <1>     je draw_white_function
    43 00006DC6 3C20                <1>     cmp al, ' '
    44 00006DC8 7406                <1>     je draw_black_function
    45 00006DCA EB0F                <1>     jmp next_char_function
    46                              <1> 
    47                              <1> draw_white_function:
    48 00006DCC B43E                <1>     mov ah, 0x3E
    49 00006DCE EB04                <1>     jmp store_char_function
    50                              <1> 
    51                              <1> draw_black_function:
    52 00006DD0 B438                <1>     mov ah, 0x38
    53 00006DD2 EB00                <1>     jmp store_char_function
    54                              <1> 
    55                              <1> store_char_function:
    56 00006DD4 268905              <1>     mov [es:di], ax
    57 00006DD7 83C702              <1>     add di, 2
    58 00006DDA 46                  <1>     inc si
    59                              <1> 
    60                              <1> next_char_function:
    61 00006DDB E2E3                <1>     loop print_chars_function
    62 00006DDD E8B0FF              <1>     call timeDelay11
    63 00006DE0 59                  <1>     pop cx
    64 00006DE1 E2D9                <1>     loop print_lines_function
    65 00006DE3 B400                <1>     mov ah, 0x00
    66 00006DE5 CD16                <1>     int 16h
    67 00006DE7 C3                  <1> ret
    18                                  %include "C:\COAL_new\Code\successful.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4 00006DE8 C003                <1> ddd: dw 960
     5 00006DEA 0100                <1> fff: dw 1
     6                              <1> 
     7 00006DEC 202020202020202020- <1> khalas  :  db '                    |  |  |    |  |        |||||   ||||||                        '
     7 00006DF5 202020202020202020- <1>
     7 00006DFE 20207C20207C20207C- <1>
     7 00006E07 202020207C20207C20- <1>
     7 00006E10 202020202020207C7C- <1>
     7 00006E19 7C7C7C2020207C7C7C- <1>
     7 00006E22 7C7C7C202020202020- <1>
     7 00006E2B 202020202020202020- <1>
     7 00006E34 202020202020202020  <1>
     8 00006E3D 202020202020202020- <1>            db '                    | |   |    |  |       |     |  |                             '
     8 00006E46 202020202020202020- <1>
     8 00006E4F 20207C207C2020207C- <1>
     8 00006E58 202020207C20207C20- <1>
     8 00006E61 2020202020207C2020- <1>
     8 00006E6A 2020207C20207C2020- <1>
     8 00006E73 202020202020202020- <1>
     8 00006E7C 202020202020202020- <1>
     8 00006E85 202020202020202020  <1>
     9 00006E8E 202020202020202020- <1>            db '                    ||    ||||||  |       |||||||  ||||||                        '
     9 00006E97 202020202020202020- <1>
     9 00006EA0 20207C7C202020207C- <1>
     9 00006EA9 7C7C7C7C7C20207C20- <1>
     9 00006EB2 2020202020207C7C7C- <1>
     9 00006EBB 7C7C7C7C20207C7C7C- <1>
     9 00006EC4 7C7C7C202020202020- <1>
     9 00006ECD 202020202020202020- <1>
     9 00006ED6 202020202020202020  <1>
    10 00006EDF 202020202020202020- <1>            db '                    | |   |    |  |       |     |       |                        '
    10 00006EE8 202020202020202020- <1>
    10 00006EF1 20207C207C2020207C- <1>
    10 00006EFA 202020207C20207C20- <1>
    10 00006F03 2020202020207C2020- <1>
    10 00006F0C 2020207C2020202020- <1>
    10 00006F15 20207C202020202020- <1>
    10 00006F1E 202020202020202020- <1>
    10 00006F27 202020202020202020  <1>
    11 00006F30 202020202020202020- <1>            db '                    |  |  |    |  ||||||  |     |  ||||||                        '
    11 00006F39 202020202020202020- <1>
    11 00006F42 20207C20207C20207C- <1>
    11 00006F4B 202020207C20207C7C- <1>
    11 00006F54 7C7C7C7C20207C2020- <1>
    11 00006F5D 2020207C20207C7C7C- <1>
    11 00006F66 7C7C7C202020202020- <1>
    11 00006F6F 202020202020202020- <1>
    11 00006F78 202020202020202020  <1>
    12                              <1> 
    13 00006F81 202020202020202020- <1> you_won  : db '          |     |   ||||   |    |     |         |    ||||   ||    |              '       
    13 00006F8A 207C20202020207C20- <1>
    13 00006F93 20207C7C7C7C202020- <1>
    13 00006F9C 7C202020207C202020- <1>
    13 00006FA5 20207C202020202020- <1>
    13 00006FAE 2020207C202020207C- <1>
    13 00006FB7 7C7C7C2020207C7C20- <1>
    13 00006FC0 2020207C2020202020- <1>
    13 00006FC9 202020202020202020  <1>
    14 00006FD2 202020202020202020- <1>            db '           |   |   |    |  |    |     |         |   |    |  | |   |              '
    14 00006FDB 20207C2020207C2020- <1>
    14 00006FE4 207C202020207C2020- <1>
    14 00006FED 7C202020207C202020- <1>
    14 00006FF6 20207C202020202020- <1>
    14 00006FFF 2020207C2020207C20- <1>
    14 00007008 2020207C20207C207C- <1>
    14 00007011 2020207C2020202020- <1>
    14 0000701A 202020202020202020  <1>
    15 00007023 202020202020202020- <1>            db '            | |    |    |  |    |      |   |   |    |    |  |  |  |              '
    15 0000702C 2020207C207C202020- <1>
    15 00007035 207C202020207C2020- <1>
    15 0000703E 7C202020207C202020- <1>
    15 00007047 2020207C2020207C20- <1>
    15 00007050 20207C202020207C20- <1>
    15 00007059 2020207C20207C2020- <1>
    15 00007062 7C20207C2020202020- <1>
    15 0000706B 202020202020202020  <1>
    16 00007074 202020202020202020- <1>            db '             |     |    |  |    |       | | | |     |    |  |   | |              '
    16 0000707D 202020207C20202020- <1>
    16 00007086 207C202020207C2020- <1>
    16 0000708F 7C202020207C202020- <1>
    16 00007098 202020207C207C207C- <1>
    16 000070A1 207C20202020207C20- <1>
    16 000070AA 2020207C20207C2020- <1>
    16 000070B3 207C207C2020202020- <1>
    16 000070BC 202020202020202020  <1>
    17 000070C5 202020202020202020- <1>            db '             |      ||||    ||||         |   |       ||||   |    ||              '
    17 000070CE 202020207C20202020- <1>
    17 000070D7 20207C7C7C7C202020- <1>
    17 000070E0 207C7C7C7C20202020- <1>
    17 000070E9 20202020207C202020- <1>
    17 000070F2 7C202020202020207C- <1>
    17 000070FB 7C7C7C2020207C2020- <1>
    17 00007104 20207C7C2020202020- <1>
    17 0000710D 202020202020202020  <1>
    18                              <1> 
    19                              <1> 
    20                              <1> 
    21                              <1> displayy:
    22 00007116 B800B8              <1>     mov ax, 0xB800
    23 00007119 8EC0                <1>     mov es, ax
    24 0000711B 31FF                <1>     xor di, di
    25 0000711D 8B3E[E86D]          <1>     mov di, word[ddd]
    26 00007121 833E[EA6D]01        <1>     cmp word[fff], 1
    27 00007126 7505                <1>     jne mm
    28 00007128 BE[EC6D]            <1>     mov si, khalas
    29 0000712B EB03                <1>     jmp sss
    30                              <1>     mm:
    31 0000712D BE[816F]            <1>     mov si, you_won
    32                              <1>     sss:
    33 00007130 B90500              <1>     mov cx, 5
    34                              <1> 
    35                              <1> print_lines:
    36 00007133 51                  <1>     push cx
    37 00007134 B95000              <1>     mov cx, 80
    38                              <1> 
    39                              <1> print_chars:
    40 00007137 8A04                <1>     mov al, [si]
    41 00007139 3C7C                <1>     cmp al, '|'
    42 0000713B 7406                <1>     je draw_white_pixel
    43 0000713D 3C20                <1>     cmp al, ' '
    44 0000713F 7406                <1>     je draw_black_pixel
    45 00007141 EB0F                <1>     jmp next_character
    46                              <1> 
    47                              <1> draw_white_pixel:
    48 00007143 B43E                <1>     mov ah, 0x3E
    49 00007145 EB04                <1>     jmp store_character
    50                              <1> 
    51                              <1> draw_black_pixel:
    52 00007147 B438                <1>     mov ah, 0x38
    53 00007149 EB00                <1>     jmp store_character
    54                              <1> 
    55                              <1> store_character:
    56 0000714B 268905              <1>     mov [es:di], ax
    57 0000714E 83C702              <1>     add di, 2
    58 00007151 46                  <1>     inc si
    59                              <1> 
    60                              <1> next_character:
    61 00007152 E2E3                <1>     loop print_chars
    62 00007154 E839FC              <1>     call timeDelay11
    63 00007157 59                  <1>     pop cx
    64 00007158 E2D9                <1>     loop print_lines
    65                              <1> 
    66 0000715A C3                  <1> ret
    67                              <1> 
    68                              <1> 
    69                              <1> successful_game:
    70 0000715B E88D98              <1> call clearscreen
    71 0000715E E8B5FF              <1> call displayy
    72 00007161 E82CFC              <1> call timeDelay11
    73 00007164 C706[EA6D]0000      <1> mov word[fff], 0
    74 0000716A C706[E86D]2008      <1> mov word [ddd], 2080
    75 00007170 E8A3FF              <1> call displayy
    76 00007173 E830F3              <1> call tone
    77 00007176 B400                <1>     mov ah, 0x00
    78 00007178 CD16                <1>     int 16h
    79 0000717A C3                  <1> ret
    19                                  %include "C:\COAL_new\Code\notes_input.asm"
     1                              <1> 
     2 0000717B 0000<rep E3Dh>      <1> notess: times 3645 dw 0
     3 00008DF5 0000<rep E3Dh>      <1> notess1: times 3645 dw 0
     4 0000AA6F 0000                <1> middle_location: dw 0
     5 0000AA71 0000                <1> is_middle_5: dw 0
     6 0000AA73 0000                <1> max_in_one_row: dw 0
     7 0000AA75 0000                <1> is_3_reached: dw 0
     8 0000AA77 0000                <1> is_bar: dw 0
     9 0000AA79 0000<rep 1E6h>      <1> save_lower_grid: times 18*27 dw 0
    10 0000AE45 0000                <1> is_scrolled_once: dw 0
    11                              <1> 
    12                              <1> input_notes:
    13                              <1> 
    14                              <1>     ; press 'n' to enable notes
    15                              <1>     ; clear the navigation box
    16                              <1>     ; draw cursor in the middle of the grid box
    17                              <1>     ; take keyboard input of numbers
    18                              <1>     ; after taking input, draw that number and draw navigation box on the next grid box (if not last)
    19                              <1>     ; the entered number will be drawn according to its position and saved in notess array as well
    20                              <1>     ; make 9 checks and add / subtract accordingly from middle position and draw the number. (cont'd)
    21                              <1>     ; in this way, any other number input other than numbers will also be handled
    22                              <1> 
    23                              <1> 
    24 0000AE47 60                  <1>     pusha
    25                              <1> 
    26 0000AE48 B800B8              <1>     mov ax, 0xb800
    27 0000AE4B 8EC0                <1>     mov es, ax
    28                              <1> 
    29 0000AE4D B8A000              <1>     mov ax, 160
    30 0000AE50 F726[EC15]          <1>     mul word [current_row]
    31 0000AE54 05A200              <1>     add ax, 162
    32                              <1>     
    33 0000AE57 0306[EE15]          <1>     add ax, [current_col]
    34 0000AE5B 0306[EE15]          <1>     add ax, [current_col]
    35                              <1>     
    36 0000AE5F 50                  <1>     push ax
    37                              <1> 
    38 0000AE60 89C6                <1>     mov si, ax
    39                              <1> 
    40                              <1>     ; clear navigation box
    41                              <1> 
    42 0000AE62 60                  <1>     pusha
    43 0000AE63 B90900              <1>     mov cx, 9
    44 0000AE66 BB0300              <1>     mov bx, 3
    45 0000AE69 89F7                <1>     mov di, si
    46 0000AE6B 81EFA200            <1>     sub di, 162 ; for going to top left of grid box
    47 0000AE6F B800B8              <1>     mov ax, 0xb800
    48 0000AE72 8EC0                <1>     mov es, ax
    49 0000AE74 B430                <1>     mov ah, 00110000b
    50 0000AE76 B020                <1>     mov al, ' ' 
    51                              <1> 
    52                              <1>     .clear_box:
    53                              <1>     
    54 0000AE78 268905              <1>         mov word [es: di], ax
    55 0000AE7B 83C702              <1>         add di, 2
    56 0000AE7E 49                  <1>         dec cx
    57 0000AE7F 4B                  <1>         dec bx
    58 0000AE80 75F6                <1>         jnz .clear_box
    59                              <1> 
    60                              <1>         .update_clear:
    61 0000AE82 81C79A00            <1>             add di, 154
    62 0000AE86 BB0300              <1>             mov bx, 3
    63 0000AE89 83F900              <1>             cmp cx, 0
    64 0000AE8C 75EA                <1>             jnz .clear_box
    65                              <1> 
    66                              <1>     ; get position of middle of grid box
    67                              <1> 
    68 0000AE8E 61                  <1>     popa
    69                              <1> 
    70 0000AE8F 5F                  <1>     pop di
    71 0000AE90 57                  <1>     push di
    72 0000AE91 57                  <1>     push di
    73                              <1> 
    74 0000AE92 B4B0                <1>     mov ah, 10110000b
    75 0000AE94 B07C                <1>     mov al, '|'
    76 0000AE96 893E[6FAA]          <1>     mov word [middle_location], di
    77                              <1> 
    78 0000AE9A AB                  <1>     stosw
    79                              <1> 
    80 0000AE9B B83600              <1>     mov ax, 54
    81 0000AE9E BB0900              <1>     mov bx, 9
    82 0000AEA1 F7E3                <1>     mul bx
    83 0000AEA3 F726[8965]          <1>     mul word [current_roww_index]
    84                              <1> 
    85 0000AEA7 89C3                <1>     mov bx, ax
    86 0000AEA9 B80600              <1>     mov ax, 6
    87 0000AEAC 8B0E[8B65]          <1>     mov cx, word [current_coll_index]
    88 0000AEB0 F7E1                <1>     mul cx
    89 0000AEB2 01D8                <1>     add ax, bx
    90                              <1>     ; shl bx, 1
    91                              <1>     ; add ax, bx
    92                              <1>     ; mul word [current_coll_index]
    93                              <1>     ; add ax, bx 
    94                              <1> 
    95 0000AEB4 05[7B71]            <1>     add ax, notess ; now we have notess array exact position in correspondence to grid box
    96 0000AEB7 50                  <1>     push ax
    97                              <1> 
    98 0000AEB8 5E                  <1>     pop si
    99 0000AEB9 5F                  <1>     pop di
   100 0000AEBA 57                  <1>     push di
   101 0000AEBB 56                  <1>     push si
   102                              <1> 
   103 0000AEBC B90900              <1>     mov cx, 9
   104 0000AEBF BB0300              <1>     mov bx, 3
   105                              <1>     ;sub si, 56
   106 0000AEC2 B470                <1>     mov ah, 01110000b
   107 0000AEC4 81EFA200            <1>     sub di, 162
   108                              <1> 
   109                              <1>     .draw_prior:
   110 0000AEC8 833C00              <1>         cmp word [si], 0
   111 0000AECB 7405                <1>         jz .dont_draw
   112 0000AECD 8A04                <1>         mov al, [si]
   113 0000AECF 268905              <1>         mov [es:di], ax
   114                              <1> 
   115                              <1>         .dont_draw:
   116 0000AED2 4B                  <1>             dec bx
   117 0000AED3 750F                <1>             jnz .updatee
   118 0000AED5 49                  <1>             dec cx
   119 0000AED6 7415                <1>             jz .take_notes_input
   120 0000AED8 BB0300              <1>             mov bx, 3
   121 0000AEDB 83C632              <1>             add si, 50
   122 0000AEDE 81C79C00            <1>             add di, 156
   123                              <1> 
   124 0000AEE2 EBE4                <1>         jmp .draw_prior
   125                              <1> 
   126                              <1>         .updatee:
   127 0000AEE4 83C602              <1>             add si, 2
   128 0000AEE7 83C702              <1>             add di, 2
   129 0000AEEA 49                  <1>             dec cx
   130 0000AEEB 75DB                <1>             jnz .draw_prior
   131                              <1> 
   132                              <1>     .take_notes_input:
   133                              <1>         
   134 0000AEED 31C0                <1>         xor ax, ax
   135 0000AEEF CD16                <1>         int 16h
   136                              <1> 
   137 0000AEF1 31D2                <1>         xor dx, dx
   138 0000AEF3 88C2                <1>         mov dl, al
   139 0000AEF5 80EA30              <1>         sub dl, 48 ; now dl has the entered note number
   140 0000AEF8 80FA05              <1>         cmp dl, 5
   141 0000AEFB 7506                <1>         JNE .middle_isnt_5
   142                              <1> 
   143 0000AEFD C706[71AA]0100      <1>         mov word [is_middle_5], 1
   144                              <1> 
   145                              <1>         .middle_isnt_5:
   146                              <1> 
   147 0000AF03 5E                  <1>             pop si
   148 0000AF04 5F                  <1>             pop di
   149                              <1>             ;sub si, 56 ; now si points to top left of notess array for that corresponding grid box
   150 0000AF05 B90100              <1>             mov cx, 1
   151 0000AF08 BB0300              <1>             mov bx, 3
   152 0000AF0B 81EFA200            <1>             sub di, 162 ; starting position to print notes for that grid box
   153                              <1> 
   154                              <1>             .display_and_assign_notes:
   155                              <1> 
   156                              <1>                 .dont_save_location:
   157                              <1> 
   158 0000AF0F 833C00              <1>                 cmp word [si], 0
   159 0000AF12 7407                <1>                 JE .if_zero
   160                              <1> 
   161 0000AF14 B470                <1>                 mov ah, 01110000b
   162 0000AF16 8A04                <1>                 mov al, byte [si]
   163 0000AF18 268905              <1>                 mov [es:di], ax
   164                              <1> 
   165                              <1>                 .if_zero:
   166 0000AF1B 39CA                <1>                     cmp dx, cx
   167 0000AF1D 750C                <1>                     JNE .dont_assign
   168                              <1> 
   169                              <1>                     .assign_notes_value:
   170 0000AF1F 80C230              <1>                         add dl, 48
   171 0000AF22 8914                <1>                         mov word [si], dx ; now notess array has notes number
   172 0000AF24 B470                <1>                         mov ah, 01110000b
   173 0000AF26 8A04                <1>                         mov al, [si]
   174 0000AF28 268905              <1>                         mov [es:di], ax
   175                              <1>                     
   176                              <1>                     .dont_assign:
   177 0000AF2B 4B                  <1>                         dec bx
   178 0000AF2C 7512                <1>                         jnz .update_notes_loop
   179 0000AF2E 41                  <1>                         inc cx
   180 0000AF2F 83F90A              <1>                         cmp cx, 10
   181 0000AF32 7418                <1>                         jz .middle_print
   182 0000AF34 BB0300              <1>                         mov bx, 3
   183 0000AF37 83C632              <1>                         add si, 50
   184 0000AF3A 81C79C00            <1>                         add di, 156
   185                              <1> 
   186 0000AF3E EBCF                <1>                 jmp .display_and_assign_notes
   187                              <1> 
   188                              <1>                 .update_notes_loop:
   189 0000AF40 83C602              <1>                     add si, 2
   190 0000AF43 83C702              <1>                     add di, 2
   191 0000AF46 41                  <1>                     inc cx
   192 0000AF47 83F90A              <1>                     cmp cx, 10
   193 0000AF4A 75C3                <1>                     jnz .display_and_assign_notes
   194                              <1> 
   195                              <1>         .middle_print:
   196 0000AF4C 5F                  <1>         pop di
   197 0000AF4D 833E[71AA]01        <1>         cmp word [is_middle_5], 1
   198 0000AF52 750F                <1>         JNE .remove_cursor
   199                              <1> 
   200                              <1>         .print_5:
   201 0000AF54 C706[71AA]0000      <1>             mov word [is_middle_5], 0
   202 0000AF5A B470                <1>             mov ah, 01110000b
   203 0000AF5C B035                <1>             mov al, '5'
   204 0000AF5E 268905              <1>             mov [es:di], ax
   205 0000AF61 EB07                <1>             jmp .exittt
   206                              <1> 
   207                              <1>         .remove_cursor:
   208 0000AF63 B430                <1>             mov ah, 00110000b
   209 0000AF65 B020                <1>             mov al, ' '
   210 0000AF67 268905              <1>             mov [es:di], ax
   211                              <1> 
   212                              <1> .exittt:
   213                              <1> 
   214 0000AF6A 61                  <1>     popa
   215 0000AF6B C3                  <1>     ret
   216                              <1> 
   217                              <1> erase_notes:
   218                              <1> 
   219 0000AF6C 60                  <1> pusha
   220                              <1> 
   221 0000AF6D B83600              <1>     mov ax, 54
   222 0000AF70 BB0900              <1>     mov bx, 9
   223 0000AF73 F7E3                <1>     mul bx
   224 0000AF75 F726[8965]          <1>     mul word [current_roww_index]
   225                              <1> 
   226 0000AF79 89C3                <1>     mov bx, ax
   227 0000AF7B B80600              <1>     mov ax, 6
   228 0000AF7E 8B0E[8B65]          <1>     mov cx, word [current_coll_index]
   229 0000AF82 F7E1                <1>     mul cx
   230 0000AF84 01D8                <1>     add ax, bx
   231                              <1>     ; shl bx, 1
   232                              <1>     ; add ax, bx
   233                              <1>     ; mul word [current_coll_index]
   234                              <1>     ; add ax, bx 
   235                              <1> 
   236 0000AF86 05[7B71]            <1>     add ax, notess ; now we have notess array exact position in correspondence to grid box
   237 0000AF89 89C6                <1>     mov si, ax
   238                              <1> 
   239 0000AF8B B8A000              <1>     mov ax, 160
   240 0000AF8E F726[EC15]          <1>     mul word [current_row]
   241 0000AF92 05A200              <1>     add ax, 162
   242                              <1>     
   243 0000AF95 0306[EE15]          <1>     add ax, [current_col]
   244 0000AF99 0306[EE15]          <1>     add ax, [current_col]
   245                              <1> 
   246 0000AF9D 89C7                <1>     mov di, ax
   247                              <1> 
   248 0000AF9F B90900              <1>     mov cx, 9
   249 0000AFA2 BB0300              <1>     mov bx, 3
   250 0000AFA5 81EFA200            <1>     sub di, 162 ; for going to top left of grid box
   251                              <1> 
   252                              <1>     ;sub si, 56
   253                              <1>     
   254 0000AFA9 B430                <1>     mov ah, 00110000b
   255 0000AFAB B020                <1>     mov al, ' ' 
   256                              <1> 
   257                              <1>     .clear_notes:
   258 0000AFAD C7040000            <1>         mov word [si], 0
   259 0000AFB1 268905              <1>         mov word [es: di], ax
   260 0000AFB4 83C702              <1>         add di, 2
   261 0000AFB7 83C602              <1>         add si, 2
   262 0000AFBA 49                  <1>         dec cx
   263 0000AFBB 4B                  <1>         dec bx
   264 0000AFBC 75EF                <1>         jnz .clear_notes
   265                              <1> 
   266                              <1>         .update_clear_notes:
   267 0000AFBE 81C79A00            <1>             add di, 154
   268 0000AFC2 83C630              <1>             add si, 48
   269 0000AFC5 BB0300              <1>             mov bx, 3
   270 0000AFC8 83F900              <1>             cmp cx, 0
   271 0000AFCB 75E0                <1>             jnz .clear_notes
   272                              <1> 
   273 0000AFCD 61                  <1> popa
   274                              <1> 
   275 0000AFCE C3                  <1> ret
   276                              <1> 
   277                              <1> 
   278                              <1> print_notes_on_scrolling:
   279 0000AFCF 60                  <1>     pusha
   280                              <1> 
   281                              <1>     ; Set max_in_one_row for a full row of notes (9 grid boxes × 3 notes per grid box)
   282 0000AFD0 C706[73AA]1B00      <1>     mov word [max_in_one_row], 27
   283 0000AFD6 BFC400              <1>     mov di, 196              ; Starting screen position (row 0, col 0 in video memory)
   284 0000AFD9 BE[7B71]            <1>     mov si, notess           ; Start of the notess array
   285 0000AFDC B90000              <1>     mov cx, 0                ; Column counter for notes
   286 0000AFDF BB0000              <1>     mov bx, 0                ; Row counter for notes
   287 0000AFE2 C706[77AA]0000      <1>     mov word [is_bar], 0     ; Reset subgrid column tracker
   288 0000AFE8 C706[75AA]0000      <1>     mov word [is_3_reached], 0 ; Reset subgrid row tracker
   289                              <1> 
   290                              <1>     ; Check if we're displaying the first 6 rows or last 3 rows
   291 0000AFEE 833E[87B8]01        <1>     cmp word [grid_flag], 1
   292 0000AFF3 7405                <1>     JE .scroll_last_rows     ; If grid_flag = 0, show last 3 rows
   293                              <1> 
   294                              <1> .scroll_first_rows:
   295 0000AFF5 BA3600              <1>     mov dx, 54               ; Total notes for the first 6 rows (6x9 grid boxes × 9 notes)
   296 0000AFF8 EB12                <1>     jmp .print_notes
   297                              <1> 
   298                              <1> .scroll_last_rows:
   299                              <1>     ; Adjust SI to point to the last 3 rows (from the 27x27 grid)
   300 0000AFFA BF2400              <1>     mov di, 36
   301 0000AFFD BA1B00              <1>     mov dx, 27               ; Total notes for the last 3 rows (3x9 grid boxes × 9 notes)
   302 0000B000 B83600              <1>     mov ax, 54
   303 0000B003 B91B00              <1>     mov cx, 27
   304 0000B006 F7E1                <1>     mul cx
   305 0000B008 01C6                <1>     add si, ax               ; Move SI to the last 3 rows
   306                              <1>     
   307 0000B00A EB00                <1>     jmp .print_notes
   308                              <1> 
   309                              <1> .print_notes:
   310 0000B00C 833C00              <1>     cmp word [si], 0         ; Check if a note exists at the current position
   311 0000B00F 7407                <1>     JE .skip_zero
   312                              <1> 
   313                              <1>     ; Print the note (move it to the screen)
   314 0000B011 8B04                <1>     mov ax, [si]             ; Load note value (word, as per `notess` definition)
   315 0000B013 B470                <1>     mov ah, 01110000b        ; Set text color
   316 0000B015 268905              <1>     mov [es:di], ax          ; Write note to video memory
   317                              <1> 
   318                              <1> .skip_zero:
   319 0000B018 FF06[77AA]          <1>     inc word [is_bar]        ; Increment subgrid column tracker
   320 0000B01C 833E[77AA]03        <1>     cmp word [is_bar], 3     ; Check if we've completed 3 notes (a subgrid row)
   321 0000B021 740F                <1>     JE .next_subgrid_row
   322 0000B023 83C702              <1>     add di, 2                ; Move to the next column on the screen
   323 0000B026 83C602              <1>     add si, 2                ; Move to the next note in the `notess` array
   324 0000B029 41                  <1>     inc cx                   ; Increment the column counter
   325 0000B02A 3B0E[73AA]          <1>     cmp cx, [max_in_one_row] ; Check if the row is complete
   326 0000B02E 7415                <1>     JE .next_visible_row
   327 0000B030 EBDA                <1>     jmp .print_notes
   328                              <1> 
   329                              <1> .next_subgrid_row:
   330 0000B032 C706[77AA]0000      <1>     mov word [is_bar], 0     ; Reset subgrid column tracker
   331 0000B038 83C704              <1>     add di, 4                ; Adjust DI for the next subgrid row
   332 0000B03B 83C602              <1>     add si, 2                ; Move SI to the next subgrid row
   333 0000B03E 41                  <1>     inc cx                   ; Increment the column counter
   334 0000B03F 3B0E[73AA]          <1>     cmp cx, [max_in_one_row] ; Check if the row is complete
   335 0000B043 75C7                <1>     JNE .print_notes
   336                              <1> 
   337                              <1> .next_visible_row:
   338 0000B045 83C758              <1>     add di, 88               ; Move DI to the start of the next visible row (video memory layout)
   339 0000B048 B90000              <1>     mov cx, 0                ; Reset column counter
   340 0000B04B FF06[75AA]          <1>     inc word [is_3_reached]  ; Increment the subgrid row tracker
   341 0000B04F 833E[75AA]09        <1>     cmp word [is_3_reached], 9
   342 0000B054 750A                <1>     JNE .continue_visible_rows
   343 0000B056 81EF2003            <1>     sub di, 800              ; Skip one row if the visible portion is complete
   344 0000B05A C706[75AA]0000      <1>     mov word [is_3_reached], 0
   345                              <1> 
   346                              <1> .continue_visible_rows:
   347 0000B060 43                  <1>     inc bx                   ; Increment the overall row counter
   348 0000B061 39D3                <1>     cmp bx, dx               ; Check if all rows for the visible portion are printed
   349 0000B063 75A7                <1>     JNE .print_notes
   350                              <1> 
   351 0000B065 61                  <1>     popa
   352 0000B066 C3                  <1>     ret
   353                              <1> 
   354                              <1> 
   355                              <1> saving_lower_grid:
   356                              <1> 
   357 0000B067 60                  <1>     pusha
   358                              <1> 
   359 0000B068 BF2200              <1>     mov di, 34
   360 0000B06B B92500              <1>     mov cx, 37 ;for every iteration
   361 0000B06E BA0C00              <1>     mov dx, 12
   362 0000B071 BB0000              <1>     mov bx, 0 ;bx==dx
   363 0000B074 BE[79AA]            <1>     mov si, save_lower_grid
   364                              <1> 
   365                              <1> 
   366                              <1>     .saving_scrolled_grid:
   367                              <1> 
   368 0000B077 268B05              <1>         mov ax, word [es:di]
   369 0000B07A 3CDA                <1>         cmp al, 218
   370 0000B07C 7430                <1>         jz .dont_save_navigation_box
   371 0000B07E 3CC4                <1>         cmp al, 196
   372 0000B080 742C                <1>         jz .dont_save_navigation_box
   373 0000B082 3CBF                <1>         cmp al, 191
   374 0000B084 7428                <1>         jz .dont_save_navigation_box
   375 0000B086 3CB3                <1>         cmp al, 179
   376 0000B088 7424                <1>         jz .dont_save_navigation_box
   377 0000B08A 3C9A                <1>         cmp al, 154
   378 0000B08C 7420                <1>         jz .dont_save_navigation_box
   379 0000B08E 3CC0                <1>         cmp al, 192
   380 0000B090 741C                <1>         jz .dont_save_navigation_box
   381 0000B092 3CD9                <1>         cmp al, 217
   382 0000B094 7418                <1>         jz .dont_save_navigation_box
   383                              <1> 
   384                              <1>         .save_as_it_as:
   385                              <1> 
   386 0000B096 8904                <1>         mov word [si], ax
   387                              <1> 
   388 0000B098 83C602              <1>         add si, 2
   389 0000B09B 83C702              <1>         add di, 2
   390 0000B09E 49                  <1>         dec cx
   391 0000B09F 75D6                <1>         jnz .saving_scrolled_grid
   392 0000B0A1 B92500              <1>         mov cx, 37
   393 0000B0A4 83C756              <1>         add di, 86
   394 0000B0A7 43                  <1>         inc bx
   395 0000B0A8 39D3                <1>         cmp bx, dx
   396 0000B0AA 7421                <1>         jz .end_of_saving
   397                              <1> 
   398 0000B0AC EBC9                <1>         jmp .saving_scrolled_grid
   399                              <1> 
   400                              <1>         .dont_save_navigation_box:
   401                              <1> 
   402 0000B0AE 80FCB0              <1>             cmp ah, 10110000b
   403 0000B0B1 75E3                <1>             jnz .save_as_it_as
   404                              <1> 
   405 0000B0B3 B430                <1>             mov ah, 00110000b
   406 0000B0B5 B020                <1>             mov al, ' '
   407 0000B0B7 8904                <1>             mov [si], ax
   408                              <1> 
   409 0000B0B9 83C602              <1>         add si, 2
   410 0000B0BC 83C702              <1>         add di, 2
   411 0000B0BF 49                  <1>         dec cx
   412 0000B0C0 75B5                <1>         jnz .saving_scrolled_grid
   413 0000B0C2 B92500              <1>         mov cx, 37
   414 0000B0C5 83C756              <1>         add di, 86
   415 0000B0C8 43                  <1>         inc bx
   416 0000B0C9 39D3                <1>         cmp bx, dx
   417 0000B0CB 75AA                <1>         jnz .saving_scrolled_grid
   418                              <1> 
   419                              <1>     .end_of_saving:
   420                              <1> 
   421 0000B0CD B8A000              <1>     mov ax, 160
   422 0000B0D0 F726[EC15]          <1>     mul word [current_row]
   423 0000B0D4 05A200              <1>     add ax, 162
   424                              <1>     
   425 0000B0D7 0306[EE15]          <1>     add ax, [current_col]
   426 0000B0DB 0306[EE15]          <1>     add ax, [current_col]
   427 0000B0DF 89C7                <1>     mov di, ax
   428 0000B0E1 81EFA200            <1>     sub di, 162
   429                              <1> 
   430 0000B0E5 61                  <1>     popa
   431 0000B0E6 C3                  <1>     ret
   432                              <1> 
   433                              <1> displaying_scrolled_grid:
   434                              <1> 
   435 0000B0E7 60                  <1>     pusha
   436                              <1> 
   437 0000B0E8 BF2200              <1>     mov di, 34
   438 0000B0EB B92500              <1>     mov cx, 37 ; for every iteration
   439 0000B0EE BA0C00              <1>     mov dx, 12
   440 0000B0F1 BB0000              <1>     mov bx, 0 ; bx == dx
   441 0000B0F4 BE[79AA]            <1>     mov si, save_lower_grid
   442                              <1> 
   443                              <1>     .display_scrolled_grid:
   444                              <1> 
   445 0000B0F7 8B04                <1>         mov ax, word [si]
   446                              <1>         ; mov al, 01000111b
   447                              <1>         ; mov al, '-'
   448 0000B0F9 268905              <1>         mov [es:di], ax
   449 0000B0FC 83C702              <1>         add di, 2
   450 0000B0FF 83C602              <1>         add si, 2
   451 0000B102 49                  <1>         dec cx
   452 0000B103 75F2                <1>         jnz .display_scrolled_grid
   453 0000B105 B92500              <1>         mov cx, 37
   454 0000B108 83C756              <1>         add di, 86
   455 0000B10B 43                  <1>         inc bx
   456 0000B10C 39D3                <1>         cmp bx, dx
   457 0000B10E 75E7                <1>         jnz .display_scrolled_grid
   458                              <1> 
   459 0000B110 61                  <1>     popa
   460 0000B111 C3                  <1>     ret
    20                                  %include "C:\COAL_new\Code\difficulty_boards.asm"
     1 0000B112 000000000000000000- <1> grid:   dw 0, 0, 0,  0, 0, 0,  0, 0, 0
     1 0000B11B 000000000000000000  <1>
     2 0000B124 000000000000000000- <1>         dw 0, 0, 0,  0, 0, 0,  0, 0, 0
     2 0000B12D 000000000000000000  <1>
     3 0000B136 000000000000000000- <1>         dw 0, 0, 0,  0, 0, 0,  0, 0, 0
     3 0000B13F 000000000000000000  <1>
     4                              <1>         
     5 0000B148 000000000000000000- <1>         dw 0, 0, 0,  0, 0, 0,  0, 0, 0
     5 0000B151 000000000000000000  <1>
     6 0000B15A 000000000000000000- <1>         dw 0, 0, 0,  0, 0, 0,  0, 0, 0
     6 0000B163 000000000000000000  <1>
     7 0000B16C 000000000000000000- <1>         dw 0, 0, 0,  0, 0, 0,  0, 0, 0
     7 0000B175 000000000000000000  <1>
     8                              <1> 
     9 0000B17E 000000000000000000- <1>         dw 0, 0, 0,  0, 0, 0,  0, 0, 0
     9 0000B187 000000000000000000  <1>
    10 0000B190 000000000000000000- <1>         dw 0, 0, 0,  0, 0, 0,  0, 0, 0
    10 0000B199 000000000000000000  <1>
    11 0000B1A2 000000000000000000- <1>         dw 0, 0, 0,  0, 0, 0,  0, 0, 0
    11 0000B1AB 000000000000000000  <1>
    12                              <1> 
    13                              <1> 
    14 0000B1B4 000000000000000000- <1> solution:   dw 0, 0, 0,  0, 0, 0,  0, 0, 0
    14 0000B1BD 000000000000000000  <1>
    15 0000B1C6 000000000000000000- <1>             dw 0, 0, 0,  0, 0, 0,  0, 0, 0
    15 0000B1CF 000000000000000000  <1>
    16 0000B1D8 000000000000000000- <1>             dw 0, 0, 0,  0, 0, 0,  0, 0, 0
    16 0000B1E1 000000000000000000  <1>
    17                              <1>             
    18 0000B1EA 000000000000000000- <1>             dw 0, 0, 0,  0, 0, 0,  0, 0, 0
    18 0000B1F3 000000000000000000  <1>
    19 0000B1FC 000000000000000000- <1>             dw 0, 0, 0,  0, 0, 0,  0, 0, 0
    19 0000B205 000000000000000000  <1>
    20 0000B20E 000000000000000000- <1>             dw 0, 0, 0,  0, 0, 0,  0, 0, 0
    20 0000B217 000000000000000000  <1>
    21                              <1> 
    22 0000B220 000000000000000000- <1>             dw 0, 0, 0,  0, 0, 0,  0, 0, 0
    22 0000B229 000000000000000000  <1>
    23 0000B232 000000000000000000- <1>             dw 0, 0, 0,  0, 0, 0,  0, 0, 0
    23 0000B23B 000000000000000000  <1>
    24 0000B244 000000000000000000- <1>             dw 0, 0, 0,  0, 0, 0,  0, 0, 0
    24 0000B24D 000000000000000000  <1>
    25                              <1> 
    26                              <1> 
    27 0000B256 040000000500000000- <1> grid_easy:      dw 4, 0, 5,  0, 0, 9,  7, 8, 1
    27 0000B25F 000900070008000100  <1>
    28 0000B268 000000000000000007- <1>                 dw 0, 0, 0,  0, 7, 0,  0, 9, 0
    28 0000B271 000000000009000000  <1>
    29 0000B27A 000009000700080000- <1>                 dw 0, 9, 7,  8, 0, 4,  0, 0, 2
    29 0000B283 000400000000000200  <1>
    30                              <1>                 
    31 0000B28C 000002000000000000- <1>                 dw 0, 2, 0,  0, 0, 5,  0, 4, 0
    31 0000B295 000500000004000000  <1>
    32 0000B29E 030000000000060008- <1>                 dw 3, 0, 0,  6, 8, 0,  0, 0, 0
    32 0000B2A7 000000000000000000  <1>
    33 0000B2B0 000000000100070000- <1>                 dw 0, 0, 1,  7, 0, 0,  6, 0, 8
    33 0000B2B9 000000060000000800  <1>
    34                              <1> 
    35 0000B2C2 000001000900030002- <1>                 dw 0, 1, 9,  3, 2, 6,  8, 0, 4
    35 0000B2CB 000600080000000400  <1>
    36 0000B2D4 020004000000000005- <1>                 dw 2, 4, 0,  0, 5, 0,  1, 3, 0
    36 0000B2DD 000000010003000000  <1>
    37 0000B2E6 070006000000040000- <1>                 dw 7, 6, 0,  4, 0, 8,  0, 5, 9
    37 0000B2EF 000800000005000900  <1>
    38                              <1> 
    39                              <1> 
    40 0000B2F8 040003000500020006- <1> solution_easy:  dw 4, 3, 5,  2, 6, 9,  7, 8, 1
    40 0000B301 000900070008000100  <1>
    41 0000B30A 060008000200050007- <1>                 dw 6, 8, 2,  5, 7, 1,  4, 9, 3
    41 0000B313 000100040009000300  <1>
    42 0000B31C 010009000700080003- <1>                 dw 1, 9, 7,  8, 3, 4,  5, 6, 2
    42 0000B325 000400050006000200  <1>
    43                              <1>                 
    44 0000B32E 080002000600010009- <1>                 dw 8, 2, 6,  1, 9, 5,  3, 4, 7
    44 0000B337 000500030004000700  <1>
    45 0000B340 030007000400060008- <1>                 dw 3, 7, 4,  6, 8, 2,  9, 1, 5
    45 0000B349 000200090001000500  <1>
    46 0000B352 090005000100070004- <1>                 dw 9, 5, 1,  7, 4, 3,  6, 2, 8
    46 0000B35B 000300060002000800  <1>
    47                              <1> 
    48 0000B364 050001000900030002- <1>                 dw 5, 1, 9,  3, 2, 6,  8, 7, 4
    48 0000B36D 000600080007000400  <1>
    49 0000B376 020004000800090005- <1>                 dw 2, 4, 8,  9, 5, 7,  1, 3, 6
    49 0000B37F 000700010003000600  <1>
    50 0000B388 070006000300040001- <1>                 dw 7, 6, 3,  4, 1, 8,  2, 5, 9
    50 0000B391 000800020005000900  <1>
    51                              <1> 
    52                              <1> 
    53 0000B39A 090000000500000000- <1> grid_medium:        dw 9, 0, 5,  0, 0, 0,  8, 7, 0
    53 0000B3A3 000000080007000000  <1>
    54 0000B3AC 000000000800000007- <1>                     dw 0, 0, 8,  0, 7, 0,  0, 9, 0
    54 0000B3B5 000000000009000000  <1>
    55 0000B3BE 000007000000000000- <1>                     dw 0, 7, 0,  0, 0, 0,  0, 0, 1
    55 0000B3C7 000000000000000100  <1>
    56                              <1>                     
    57 0000B3D0 000000000900000002- <1>                     dw 0, 0, 9,  0, 2, 0,  0, 0, 0
    57 0000B3D9 000000000000000000  <1>
    58 0000B3E2 000000000000040001- <1>                     dw 0, 0, 0,  4, 1, 0,  0, 7, 6
    58 0000B3EB 000000000007000600  <1>
    59 0000B3F4 010006000300000000- <1>                     dw 1, 6, 3,  0, 0, 5,  4, 8, 0
    59 0000B3FD 000500040008000000  <1>
    60                              <1> 
    61 0000B406 020000000000030000- <1>                     dw 2, 0, 0,  3, 0, 9,  0, 0, 0
    61 0000B40F 000900000000000000  <1>
    62 0000B418 000009000000000006- <1>                     dw 0, 9, 0,  0, 6, 0,  0, 5, 0
    62 0000B421 000000000005000000  <1>
    63 0000B42A 050000000600010000- <1>                     dw 5, 0, 6,  1, 0, 8,  7, 0, 0
    63 0000B433 000800070000000000  <1>
    64                              <1> 
    65                              <1> 
    66 0000B43C 090002000500060003- <1> solution_medium:    dw 9, 2, 5,  6, 3, 1,  8, 7, 4
    66 0000B445 000100080007000400  <1>
    67 0000B44E 060001000800050007- <1>                     dw 6, 1, 8,  5, 7, 4,  2, 9, 3
    67 0000B457 000400020009000300  <1>
    68 0000B460 030007000400090008- <1>                     dw 3, 7, 4,  9, 8, 2,  5, 6, 1
    68 0000B469 000200050006000100  <1>
    69                              <1>                     
    70 0000B472 070004000900080002- <1>                     dw 7, 4, 9,  8, 2, 6,  1, 3, 5
    70 0000B47B 000600010003000500  <1>
    71 0000B484 080005000200040001- <1>                     dw 8, 5, 2,  4, 1, 3,  9, 7, 6
    71 0000B48D 000300090007000600  <1>
    72 0000B496 010006000300070009- <1>                     dw 1, 6, 3,  7, 9, 5,  4, 8, 2
    72 0000B49F 000500040008000200  <1>
    73                              <1> 
    74 0000B4A8 020008000700030005- <1>                     dw 2, 8, 7,  3, 5, 9,  6, 1, 4
    74 0000B4B1 000900060001000400  <1>
    75 0000B4BA 040009000100020006- <1>                     dw 4, 9, 1,  2, 6, 7,  3, 5, 8
    75 0000B4C3 000700030005000800  <1>
    76 0000B4CC 050003000600010004- <1>                     dw 5, 3, 6,  1, 4, 8,  7, 2, 9
    76 0000B4D5 000800070002000900  <1>
    77                              <1> 
    78                              <1> 
    79 0000B4DE 000000000000000000- <1> grid_hard:          dw 0, 0, 0,  0, 0, 8,  0, 1, 0
    79 0000B4E7 000800000001000000  <1>
    80 0000B4F0 000000000000010009- <1>                     dw 0, 0, 0,  1, 9, 0,  0, 0, 8
    80 0000B4F9 000000000000000800  <1>
    81 0000B502 000000000000000000- <1>                     dw 0, 0, 0,  0, 0, 0,  0, 0, 0
    81 0000B50B 000000000000000000  <1>
    82                              <1>                     
    83 0000B514 000000000000000000- <1>                     dw 0, 0, 0,  0, 0, 0,  4, 0, 0
    83 0000B51D 000000040000000000  <1>
    84 0000B526 040002000000000000- <1>                     dw 4, 2, 0,  0, 0, 3,  0, 0, 0
    84 0000B52F 000300000000000000  <1>
    85 0000B538 070000000000090000- <1>                     dw 7, 0, 0,  9, 0, 4,  0, 5, 0
    85 0000B541 000400000005000000  <1>
    86                              <1> 
    87 0000B54A 000000000100000000- <1>                     dw 0, 0, 1,  0, 0, 0,  2, 0, 4
    87 0000B553 000000020000000400  <1>
    88 0000B55C 000000000000000001- <1>                     dw 0, 0, 0,  0, 1, 0,  0, 0, 0
    88 0000B565 000000000000000000  <1>
    89 0000B56E 030000000500020000- <1>                     dw 3, 0, 5,  2, 0, 0,  0, 0, 9
    89 0000B577 000000000000000900  <1>
    90                              <1> 
    91                              <1> 
    92 0000B580 050003000400060007- <1> solution_hard:      dw 5, 3, 4,  6, 7, 8,  9, 1, 2
    92 0000B589 000800090001000200  <1>
    93 0000B592 060007000200010009- <1>                     dw 6, 7, 2,  1, 9, 5,  3, 4, 8
    93 0000B59B 000500030004000800  <1>
    94 0000B5A4 010009000800030004- <1>                     dw 1, 9, 8,  3, 4, 2,  5, 6, 7
    94 0000B5AD 000200050006000700  <1>
    95                              <1>                     
    96 0000B5B6 080005000900070006- <1>                     dw 8, 5, 9,  7, 6, 1,  4, 2, 3
    96 0000B5BF 000100040002000300  <1>
    97 0000B5C8 040002000600080005- <1>                     dw 4, 2, 6,  8, 5, 3,  7, 9, 1
    97 0000B5D1 000300070009000100  <1>
    98 0000B5DA 070001000300090002- <1>                     dw 7, 1, 3,  9, 2, 4,  8, 5, 6
    98 0000B5E3 000400080005000600  <1>
    99                              <1> 
   100 0000B5EC 090006000100050003- <1>                     dw 9, 6, 1,  5, 3, 7,  2, 8, 4
   100 0000B5F5 000700020008000400  <1>
   101 0000B5FE 020008000700040001- <1>                     dw 2, 8, 7,  4, 1, 9,  6, 3, 5
   101 0000B607 000900060003000500  <1>
   102 0000B610 030004000500020008- <1>                     dw 3, 4, 5,  2, 8, 6,  1, 7, 9
   102 0000B619 000600010007000900  <1>
   103                              <1> 
   104                              <1> 
   105                              <1> load_board_difficulty:
   106                              <1> 
   107                              <1> 
   108 0000B622 60                  <1>     pusha
   109                              <1> 
   110                              <1> 
   111 0000B623 803E[900A]01        <1>     cmp byte [pointer_flag], 1
   112 0000B628 740E                <1>     JE .easy
   113 0000B62A 803E[900A]02        <1>     cmp byte [pointer_flag], 2
   114 0000B62F 741B                <1>     JE .medium
   115 0000B631 803E[900A]03        <1>     cmp byte [pointer_flag], 3
   116 0000B636 7428                <1>     JE .hard
   117                              <1> 
   118                              <1>     .easy:
   119                              <1> 
   120 0000B638 BE[12B1]            <1>         mov si, grid
   121 0000B63B BF[56B2]            <1>         mov di, grid_easy
   122 0000B63E BD[B4B1]            <1>         mov bp, solution
   123 0000B641 BB[F8B2]            <1>         mov bx, solution_easy
   124 0000B644 BAA200              <1>         mov dx, 162
   125 0000B647 B90000              <1>         mov cx, 0
   126                              <1> 
   127 0000B64A EB26                <1>         jmp .load_the_board
   128                              <1> 
   129                              <1>     .medium:
   130                              <1> 
   131 0000B64C BE[12B1]            <1>         mov si, grid
   132 0000B64F BF[9AB3]            <1>         mov di, grid_medium
   133 0000B652 BD[B4B1]            <1>         mov bp, solution
   134 0000B655 BB[3CB4]            <1>         mov bx, solution_medium
   135 0000B658 BAA200              <1>         mov dx, 162
   136 0000B65B B90000              <1>         mov cx, 0
   137                              <1> 
   138 0000B65E EB12                <1>         jmp .load_the_board
   139                              <1> 
   140                              <1>     .hard:
   141                              <1> 
   142 0000B660 BE[12B1]            <1>         mov si, grid
   143 0000B663 BF[DEB4]            <1>         mov di, grid_hard
   144 0000B666 BD[B4B1]            <1>         mov bp, solution
   145 0000B669 BB[80B5]            <1>         mov bx, solution_hard
   146 0000B66C BAA200              <1>         mov dx, 162
   147 0000B66F B90000              <1>         mov cx, 0
   148                              <1> 
   149                              <1>         .load_the_board:
   150 0000B672 8B05                <1>             mov ax, word [di]
   151 0000B674 8904                <1>             mov word [si], ax
   152 0000B676 8B07                <1>             mov ax, word [bx]
   153 0000B678 894600              <1>             mov word [bp], ax
   154 0000B67B 83C602              <1>             add si, 2
   155 0000B67E 83C702              <1>             add di, 2
   156 0000B681 83C502              <1>             add bp, 2
   157 0000B684 83C302              <1>             add bx, 2
   158 0000B687 83C102              <1>             add cx, 2
   159 0000B68A 39D1                <1>             cmp cx, dx
   160 0000B68C 75E4                <1>             jnz .load_the_board
   161                              <1> 
   162                              <1> 
   163                              <1> 
   164 0000B68E 61                  <1>     popa
   165 0000B68F C3                  <1>     ret
    21                                  %include "C:\COAL_new\Code\RCcom.asm"
     1                              <1> 
     2                              <1> 
     3 0000B690 57454C4C2D444F4E45  <1> well_done_text: db 'WELL-DONE'
     4 0000B699 535550455242        <1> superb_text: db 'SUPERB'
     5 0000B69F 574F57              <1> wow_text: db 'WOW'
     6 0000B6A2 EEFF                <1> sizeW: dw well_done_text-sizeW 
     7 0000B6A4 00<rep 9h>          <1> store_before_text: times 9 db 0
     8                              <1> 
     9                              <1> display_horizontally:
    10                              <1> 
    11 0000B6AD 60                  <1>     pusha
    12                              <1> 
    13 0000B6AE 31F6                <1>     xor si, si
    14 0000B6B0 31FF                <1>     xor di, di
    15                              <1> 
    16 0000B6B2 B800B8              <1>     mov ax, 0xb800
    17 0000B6B5 8EC0                <1>     mov es, ax
    18                              <1>     
    19 0000B6B7 833E[87B8]00        <1>     cmp word [grid_flag], 0
    20 0000B6BC 7557                <1>     JNE .one_down
    21                              <1> 
    22                              <1>     .two_down:
    23 0000B6BE BF6601              <1>     mov di, 358
    24                              <1> 
    25                              <1>     .start_displaying:
    26 0000B6C1 31C0                <1>     xor ax, ax
    27 0000B6C3 B88002              <1>     mov ax, 640
    28 0000B6C6 8B16[8965]          <1>     mov dx, [current_roww_index]
    29 0000B6CA F7E2                <1>     mul word dx
    30 0000B6CC 01C7                <1>     add di, ax
    31 0000B6CE 57                  <1>     push di
    32 0000B6CF BE[90B6]            <1>     mov si, well_done_text
    33 0000B6D2 B90900              <1>     mov cx, 9
    34 0000B6D5 B4B1                <1>     mov ah, 10110001b
    35 0000B6D7 BB0000              <1>     mov bx, 0
    36                              <1> 
    37                              <1>     .print_wellDone_text:
    38 0000B6DA 268A15              <1>         mov dl, [es:di]
    39 0000B6DD 8897[A4B6]          <1>         mov byte [store_before_text + bx], dl
    40 0000B6E1 8A04                <1>         mov al, [si]
    41 0000B6E3 268905              <1>         mov [es:di], ax
    42 0000B6E6 83C301              <1>         add bx, 1
    43 0000B6E9 83C708              <1>         add di, 8
    44 0000B6EC 83C601              <1>         add si, 1
    45 0000B6EF 49                  <1>         dec cx
    46 0000B6F0 75E8                <1>         jnz .print_wellDone_text
    47                              <1> 
    48 0000B6F2 B90003              <1>     mov cx, 0x300
    49                              <1>     .stay_there:
    50 0000B6F5 E83702              <1>     call delay
    51 0000B6F8 E2FB                <1>     loop .stay_there
    52                              <1>    
    53 0000B6FA 5F                  <1>     pop di
    54 0000B6FB BB0000              <1>     mov bx, 0
    55 0000B6FE B90900              <1>     mov cx, 9
    56 0000B701 B430                <1>     mov ah, 00110000b
    57                              <1> 
    58                              <1>     .print_previous_again:
    59 0000B703 8A87[A4B6]          <1>         mov al, [store_before_text + bx]
    60 0000B707 268905              <1>         mov [es:di], ax
    61 0000B70A 83C708              <1>         add di, 8
    62 0000B70D 83C301              <1>         add bx, 1
    63 0000B710 49                  <1>         dec cx
    64 0000B711 75F0                <1>         jnz .print_previous_again
    65                              <1> 
    66 0000B713 61                  <1>     popa
    67 0000B714 C3                  <1>     ret
    68                              <1> 
    69                              <1> 
    70                              <1> .one_down:
    71 0000B715 BFC600              <1>     mov di, 198
    72                              <1>     
    73 0000B718 31C0                <1>     xor ax, ax
    74 0000B71A B88002              <1>     mov ax, 640
    75 0000B71D 8B16[8965]          <1>     mov dx, [current_roww_index]
    76 0000B721 83EA06              <1>     sub dx, 6
    77 0000B724 F7E2                <1>     mul word dx
    78 0000B726 01C7                <1>     add di, ax
    79 0000B728 57                  <1>     push di
    80 0000B729 BE[90B6]            <1>     mov si, well_done_text
    81 0000B72C B90900              <1>     mov cx, 9
    82 0000B72F B4B1                <1>     mov ah, 10110001b
    83 0000B731 BB0000              <1>     mov bx, 0
    84                              <1> 
    85                              <1>     .print_wellDone_text0:
    86 0000B734 268A15              <1>         mov dl, [es:di]
    87 0000B737 8897[A4B6]          <1>         mov byte [store_before_text + bx], dl
    88 0000B73B 8A04                <1>         mov al, [si]
    89 0000B73D 268905              <1>         mov [es:di], ax
    90 0000B740 83C301              <1>         add bx, 1
    91 0000B743 83C708              <1>         add di, 8
    92 0000B746 83C601              <1>         add si, 1
    93 0000B749 49                  <1>         dec cx
    94 0000B74A 75E8                <1>         jnz .print_wellDone_text0
    95                              <1> 
    96 0000B74C B90003              <1>     mov cx, 0x300
    97                              <1>     .stay_there0:
    98 0000B74F E8DD01              <1>     call delay
    99 0000B752 E2FB                <1>     loop .stay_there0
   100                              <1>    
   101 0000B754 5F                  <1>     pop di
   102 0000B755 BB0000              <1>     mov bx, 0
   103 0000B758 B90900              <1>     mov cx, 9
   104 0000B75B B430                <1>     mov ah, 00110000b
   105                              <1> 
   106                              <1>     .print_previous_again0:
   107 0000B75D 8A87[A4B6]          <1>         mov al, [store_before_text + bx]
   108 0000B761 268905              <1>         mov [es:di], ax
   109 0000B764 83C708              <1>         add di, 8
   110 0000B767 83C301              <1>         add bx, 1
   111 0000B76A 49                  <1>         dec cx
   112 0000B76B 75F0                <1>         jnz .print_previous_again0
   113                              <1> 
   114 0000B76D 61                  <1>     popa
   115 0000B76E C3                  <1>     ret
   116                              <1> 
   117                              <1> 
   118                              <1> 
   119                              <1> display_vertically:
   120                              <1> 
   121 0000B76F 60                  <1>     pusha
   122                              <1> 
   123 0000B770 31F6                <1>     xor si, si
   124 0000B772 31FF                <1>     xor di, di
   125                              <1> 
   126 0000B774 B800B8              <1>     mov ax, 0xb800
   127 0000B777 8EC0                <1>     mov es, ax
   128                              <1>     
   129 0000B779 833E[87B8]00        <1>     cmp word [grid_flag], 0
   130 0000B77E 7557                <1>     JNE .one_down1 ;if scrolled, then we've to display WOW
   131                              <1> 
   132                              <1>     .two_down1:
   133 0000B780 BF6601              <1>     mov di, 358 ;skip 0th and 1st row
   134                              <1> 
   135                              <1>     .start_displaying1:
   136                              <1>     
   137 0000B783 B80800              <1>     mov ax, 8
   138 0000B786 8B16[8B65]          <1>     mov dx, [current_coll_index]
   139 0000B78A F7E2                <1>     mul dx
   140 0000B78C 01C7                <1>     add di, ax
   141 0000B78E 57                  <1>     push di
   142 0000B78F BE[99B6]            <1>     mov si, superb_text
   143 0000B792 B90600              <1>     mov cx, 6
   144 0000B795 B4B1                <1>     mov ah, 10110001b
   145 0000B797 BB0000              <1>     mov bx, 0
   146                              <1> 
   147                              <1>     .print_wellDone_text1:
   148 0000B79A 268A15              <1>         mov dl, [es:di]
   149 0000B79D 8897[A4B6]          <1>         mov byte [store_before_text + bx], dl
   150 0000B7A1 8A04                <1>         mov al, [si]
   151 0000B7A3 268905              <1>         mov [es:di], ax
   152 0000B7A6 83C301              <1>         add bx, 1
   153 0000B7A9 81C78002            <1>         add di, 640
   154 0000B7AD 83C601              <1>         add si, 1
   155 0000B7B0 49                  <1>         dec cx
   156 0000B7B1 75E7                <1>         jnz .print_wellDone_text1
   157                              <1> 
   158 0000B7B3 B90003              <1>     mov cx, 0x300
   159                              <1> 
   160                              <1>     .stay_there1:
   161 0000B7B6 E87601              <1>     call delay
   162 0000B7B9 E2FB                <1>     loop .stay_there1
   163                              <1> 
   164 0000B7BB 5F                  <1>     pop di
   165 0000B7BC BB0000              <1>     mov bx, 0
   166 0000B7BF B90900              <1>     mov cx, 9
   167 0000B7C2 B430                <1>     mov ah, 00110000b
   168                              <1> 
   169                              <1>     .print_previous_again1:
   170 0000B7C4 8A87[A4B6]          <1>         mov al, [store_before_text + bx]
   171 0000B7C8 268905              <1>         mov [es:di], ax
   172 0000B7CB 81C78002            <1>         add di, 640
   173 0000B7CF 83C301              <1>         add bx, 1
   174 0000B7D2 49                  <1>         dec cx
   175 0000B7D3 75EF                <1>         jnz .print_previous_again1
   176                              <1> 
   177 0000B7D5 61                  <1>     popa
   178 0000B7D6 C3                  <1>     ret
   179                              <1> 
   180                              <1> .one_down1:
   181                              <1> 
   182 0000B7D7 BFC600              <1>     mov di, 198 ;skip 0th row
   183                              <1> 
   184 0000B7DA B80800              <1>     mov ax, 8
   185 0000B7DD 8B16[8B65]          <1>     mov dx, [current_coll_index]
   186 0000B7E1 F7E2                <1>     mul dx
   187 0000B7E3 01C7                <1>     add di, ax
   188 0000B7E5 57                  <1>     push di
   189 0000B7E6 BE[9FB6]            <1>     mov si, wow_text
   190 0000B7E9 B90300              <1>     mov cx, 3
   191 0000B7EC B4B1                <1>     mov ah, 10110001b
   192 0000B7EE BB0000              <1>     mov bx, 0
   193                              <1> 
   194                              <1>     .print_wellDone_text2:
   195 0000B7F1 268A15              <1>         mov dl, [es:di]
   196 0000B7F4 8897[A4B6]          <1>         mov byte [store_before_text + bx], dl
   197 0000B7F8 8A04                <1>         mov al, [si]
   198 0000B7FA 268905              <1>         mov [es:di], ax
   199 0000B7FD 83C301              <1>         add bx, 1
   200 0000B800 81C78002            <1>         add di, 640
   201 0000B804 83C601              <1>         add si, 1
   202 0000B807 49                  <1>         dec cx
   203 0000B808 75E7                <1>         jnz .print_wellDone_text2
   204                              <1> 
   205 0000B80A B90003              <1>     mov cx, 0x300
   206                              <1> 
   207                              <1>     .stay_there2:
   208 0000B80D E81F01              <1>     call delay
   209 0000B810 E2FB                <1>     loop .stay_there2
   210                              <1> 
   211 0000B812 5F                  <1>     pop di
   212 0000B813 BB0000              <1>     mov bx, 0
   213 0000B816 B90300              <1>     mov cx, 3
   214 0000B819 B430                <1>     mov ah, 00110000b
   215                              <1> 
   216                              <1>     .print_previous_again2:
   217 0000B81B 8A87[A4B6]          <1>         mov al, [store_before_text + bx]
   218 0000B81F 268905              <1>         mov [es:di], ax
   219 0000B822 81C78002            <1>         add di, 640
   220 0000B826 83C301              <1>         add bx, 1
   221 0000B829 49                  <1>         dec cx
   222 0000B82A 75EF                <1>         jnz .print_previous_again2
   223                              <1> 
   224 0000B82C 61                  <1> popa
   225 0000B82D C3                  <1> ret
    22                                  
    23                                  
    24                                  ;----------TEXT TO DISPLAY IN GAME------------
    25                                  
    26 0000B82E 444946464943554C54-     difficulty_text: db 'DIFFICULTY:'
    26 0000B837 593A               
    27 0000B839 0B00                    size22: dw size22-difficulty_text
    28 0000B83B 45415359                difficulty_easy: db 'EASY'
    29 0000B83F 0400                    size1: dw size1-difficulty_easy
    30 0000B841 4D454449554D            difficulty_medium: db 'MEDIUM'
    31 0000B847 0600                    size2: dw size2-difficulty_medium
    32 0000B849 48415244                difficulty_hard: db 'HARD'
    33 0000B84D 0400                    size3: dw size3-difficulty_hard
    34 0000B84F 53434F5245203A          score: db 'SCORE :'
    35 0000B856 0700                    size4: dw size4-score
    36 0000B858 30303A3131              timerr: db '00:11'
    37 0000B85D 0500                    size5: dw size5-timerr
    38 0000B85F 54494D45523A            time_display: db 'TIMER:'
    39 0000B865 0600                    size61: dw size61-time_display
    40 0000B867 505245535320605360-     button_go_down: db 'PRESS `S` FOR   '
    40 0000B870 20464F52202020     
    41 0000B877 505245535320605760-     button_go_up:   db 'PRESS `W` FOR   '
    41 0000B880 20464F52202020     
    42 0000B887 0000                    grid_flag: dw 0   ; 0 for upper portion of grid and 1 for lower portion of grid
    43 0000B889 0000                    ending_screen_flag: dw 0
    44 0000B88B 0000                    score_count: dw 0
    45                                  
    46                                  
    47 0000B88D 120016001A001E0022-     grid_locations: dw   18,   22,   26,    30,   34,   38,    42,   46,   50 
    47 0000B896 0026002A002E003200 
    48 0000B89F 5A006E0082009600AA-                     dw   90,  110,  130,   150,  170,  190,   210,  230,  250 
    48 0000B8A8 00BE00D200E600FA00 
    49 0000B8B1 8C0AE40C3C0F9411EC-                     dw 2700, 3300, 3900,  4500, 5100, 5700,  6300, 6900, 7500
    49 0000B8BA 1344169C18F41A4C1D 
    50                                  
    51 0000B8C3 08079808280AB80B48-                     dw 1800, 2200, 2600,  3000, 3400, 3800,  4200, 4600, 5000 
    51 0000B8CC 0DD80E6810F8118813 
    52 0000B8D5 32017601BA01FE0142-                     dw  306,  374,  442,   510,  578,  646,   714,  782,  850 
    52 0000B8DE 028602CA020E035203 
    53 0000B8E7 1A07AE08420AD60B6A-                     dw 1818, 2222, 2626,  3030, 3434, 3838,  4242, 4646, 5050 
    53 0000B8F0 0DFE0E92102612BA13 
    54                                                  
    55 0000B8F9 760202038E031A04A6-                     dw  630,  770,  910,  1050, 1190, 1330,  1470, 1610, 1750
    55 0000B902 043205BE054A06D606 
    56 0000B90B 480058006800780088-                     dw   72,   88,  104,   120,  136,  152,   168,  184,  200
    56 0000B914 009800A800B800C800 
    57 0000B91D 9000B000D000F00010-                     dw  144,  176,  208,   240,  272,  304,   336,  368,  400
    57 0000B926 013001500170019001 
    58                                  
    59                                  ;row 9    150
    60                                  ;row 13   100
    61                                  ;row 21   101
    62                                  ;row 0    35
    63                                  
    64                                  
    65                                  ;---------------------------------------------
    66                                  
    67                                  delay:
    68 0000B92F 51                      	push cx
    69 0000B930 B9FF0F                  	mov cx,0xFFF
    70                                  	
    71                                  lop11: 
    72 0000B933 E2FE                    	loop lop11
    73                                  
    74 0000B935 B9FF0F                  	mov cx,0xFFF
    75                                  	
    76                                  lop22: 
    77 0000B938 E2FE                    	loop lop22
    78                                  
    79 0000B93A 59                      pop cx 
    80 0000B93B C3                      ret
    81                                  
    82                                  
    83                                  ; subroutine to clear the screen
    84                                  
    85                                  clrscreen:
    86                                  
    87 0000B93C 06                       push es
    88 0000B93D 51                       push cx
    89 0000B93E 57                       push di
    90                                  
    91 0000B93F B800B8                   mov ax, 0xb800
    92 0000B942 8EC0                     mov es, ax ; point es to video base
    93 0000B944 31FF                     xor di, di ; point di to top left column
    94 0000B946 B020                     mov al, 0x20 ; space char in normal attribute
    95 0000B948 B9D007                   mov cx, 2000 ; number of screen locations
    96 0000B94B FC                       cld ; auto increment mode
    97 0000B94C F3AB                     rep stosw ; clear the whole screen
    98                                   
    99 0000B94E 5F                       pop di
   100 0000B94F 59                       pop cx
   101 0000B950 07                       pop es
   102                                  
   103 0000B951 C3                       ret
   104                                  
   105                                  section .text
   106 0000B952 E8CC59                          call hide_cursor
   107                                  
   108                                  check_key_press:
   109                                  
   110 0000B955 B400                        mov ah, 0x00
   111 0000B957 CD16                        int 16h
   112                                  
   113 0000B959 3C0D                        cmp al, 0x0D ;it is used for "press any key to start"
   114 0000B95B 7451                        je enter_key_for_startingScreen
   115                                  
   116 0000B95D 80FC48                      cmp ah, 0x48
   117 0000B960 7408                        je up_key
   118                                  
   119 0000B962 80FC50                      cmp ah, 0x50
   120 0000B965 7417                        je down_key
   121                                  
   122 0000B967 E90E01                      jmp key_wait
   123                                  
   124                                  up_key:
   125 0000B96A 803E[900A]01                cmp byte [pointer_flag], 1
   126 0000B96F 7E2F                        jle wrap_to_bottom
   127 0000B971 FE0E[900A]                  dec byte [pointer_flag]
   128 0000B975 E8C4FF                      call clrscreen
   129 0000B978 E82C51                      call menu_printing
   130 0000B97B E9FA00                      jmp key_wait
   131                                  
   132                                  down_key:
   133 0000B97E 803E[900A]03                cmp byte [pointer_flag], 3
   134 0000B983 7D0D                        jge wrap_to_top
   135 0000B985 FE06[900A]                  inc byte [pointer_flag]
   136 0000B989 E8B0FF                      call clrscreen
   137 0000B98C E81851                      call menu_printing
   138 0000B98F E9E600                      jmp key_wait
   139                                  
   140                                  wrap_to_top:
   141 0000B992 C606[900A]01                mov byte [pointer_flag], 1
   142 0000B997 E8A2FF                      call clrscreen
   143 0000B99A E80A51                      call menu_printing
   144 0000B99D E9D800                      jmp key_wait
   145                                  
   146                                  wrap_to_bottom:
   147 0000B9A0 C606[900A]03                mov byte [pointer_flag], 3
   148 0000B9A5 E894FF                      call clrscreen
   149 0000B9A8 E8FC50                      call menu_printing
   150 0000B9AB E9CA00                      jmp key_wait
   151                                  
   152                                  enter_key_for_startingScreen:
   153 0000B9AE 8A1E[900A]                  mov bl, byte [pointer_flag]
   154 0000B9B2 881E[910A]                  mov byte [option], bl
   155                                  
   156 0000B9B6 E883FF                      call clrscreen
   157                                  
   158 0000B9B9 E9C100                      jmp next_start  
   159                                  
   160                                  check_key_press1:
   161 0000B9BC B400                        mov ah, 0x00
   162 0000B9BE CD16                        int 16h
   163                                  
   164 0000B9C0 3C0D                        cmp al, 0x0D  ; Enter key
   165 0000B9C2 7440                        je enter_key
   166                                  
   167 0000B9C4 80FC48                      cmp ah, 0x48  ; Up arrow key
   168 0000B9C7 7407                        je up_key1
   169                                  
   170 0000B9C9 80FC50                      cmp ah, 0x50  ; Down arrow key
   171 0000B9CC 7412                        je down_key1
   172                                  
   173 0000B9CE EBEC                        jmp check_key_press1
   174                                  
   175                                  up_key1:
   176 0000B9D0 803E[900A]01                cmp byte [pointer_flag], 1
   177 0000B9D5 7E23                        jle wraping_to_bottom
   178 0000B9D7 FE0E[900A]                  dec byte [pointer_flag]
   179 0000B9DB E8374F                      call ending_screen
   180 0000B9DE EBDC                        jmp check_key_press1
   181                                  
   182                                  down_key1:
   183 0000B9E0 803E[900A]02                cmp byte [pointer_flag], 2
   184 0000B9E5 7D09                        jge wraping_to_top
   185 0000B9E7 FE06[900A]                  inc byte [pointer_flag]
   186 0000B9EB E8274F                      call ending_screen
   187 0000B9EE EBCC                        jmp check_key_press1
   188                                  
   189                                  wraping_to_top:
   190 0000B9F0 C606[900A]01                mov byte [pointer_flag], 1
   191 0000B9F5 E81D4F                      call ending_screen
   192 0000B9F8 EBC2                        jmp check_key_press1
   193                                  
   194                                  wraping_to_bottom:
   195 0000B9FA C606[900A]02                mov byte [pointer_flag], 2
   196 0000B9FF E8134F                      call ending_screen
   197 0000BA02 EBB8                        jmp check_key_press1
   198                                  
   199                                  enter_key:
   200 0000BA04 8A1E[900A]                  mov bl, byte [pointer_flag]
   201 0000BA08 881E[910A]                  mov byte [option], bl
   202                                  
   203                                  
   204                                  ;---here we will board and its solution according to selected difficulty---
   205                                  
   206                                  
   207                                  ;====================START==========================
   208                                  
   209                                  
   210                                  start:
   211                                  
   212 0000BA0C E8F758                      call clrscr1
   213                                  
   214                                      ;initialize row and col for navigating grid
   215 0000BA0F C706[EC15]0100              mov word [current_row], 1
   216 0000BA15 C706[EE15]1200              mov word [current_col], 18
   217 0000BA1B C706[F415]1500              mov word [max_rows], 21
   218 0000BA21 C706[F615]3200              mov word [max_cols], 50 
   219 0000BA27 C706[F815]0100              mov word [min_rows], 1
   220 0000BA2D C706[FA15]1200              mov word [min_cols], 18
   221 0000BA33 C706[8965]0000              mov word [current_roww_index], 0
   222 0000BA39 C706[8B65]0000              mov word [current_coll_index], 0
   223 0000BA3F C706[87B8]0000              mov word [grid_flag], 0
   224 0000BA45 C706[8765]0000              mov word [mistakes_count], 0
   225 0000BA4B C706[8565]0000              mov word [is_row_or_col_complete], 0
   226 0000BA51 C706[8BB8]0000              mov word[score_count], 0
   227                                  
   228 0000BA57 60                          pusha
   229 0000BA58 E83959                      call show_title
   230 0000BA5B 61                          popa
   231                                  
   232 0000BA5C B401                        MOV ah,0x1 ;interrupt ------idhr enter key bhi aaskti
   233 0000BA5E CD21                        INT 0x21
   234                                  
   235 0000BA60 E8D9FE                      CALL clrscreen
   236                                  
   237 0000BA63 B800B8                      MOV AX, 0xB800
   238 0000BA66 8EC0                        MOV ES, AX
   239 0000BA68 BE0000                      MOV SI, 0
   240                                  
   241 0000BA6B BF0000                      MOV DI, 0
   242 0000BA6E B020                        MOV al,0x20
   243 0000BA70 B437                        MOV ah,00110111b
   244                                  
   245 0000BA72 E8C7FE                      call clrscreen
   246                                  
   247 0000BA75 E82F50                      call menu_printing
   248                                  
   249                                  key_wait:
   250                                  
   251 0000BA78 E8DAFE                      call check_key_press
   252 0000BA7B EBFB                        jmp key_wait
   253                                  
   254                                  next_start:
   255                                  
   256 0000BA7D E8BCFE                      CALL clrscreen
   257 0000BA80 E8985D                      call hook_timer_interrupt    ; Hook the timer interrupt
   258                                  
   259                                  
   260                                      ;-------Blue Background---------   
   261                                  
   262 0000BA83 E89CFB                      call load_board_difficulty 
   263                                  
   264                                  
   265                                  draw_grid:
   266                                  
   267 0000BA86 268905                      MOV [ES:DI], AX
   268 0000BA89 83C702                      ADD DI, 2
   269                                  
   270 0000BA8C 81FFA00F                    CMP DI, 4000
   271 0000BA90 75F4                        JNZ draw_grid
   272                                  
   273 0000BA92 B447                        MOV AH, 0x47
   274 0000BA94 BF6801                      MOV DI,360
   275                                  
   276 0000BA97 E800AD                      call numbers_card_function
   277                                  
   278                                      ;-----Display Difficulty----------
   279                                  
   280 0000BA9A 60                          pusha
   281                                  
   282 0000BA9B BE[2EB8]                    mov si, difficulty_text
   283 0000BA9E BB0000                      mov bx, 0
   284 0000BAA1 BF5202                      mov di, 594
   285 0000BAA4 B435                        mov ah, 00110101b
   286                                  
   287                                      .display_difficulty_textt:
   288 0000BAA6 8A04                            mov al, [si]
   289 0000BAA8 268905                          mov [es:di], ax
   290 0000BAAB 46                              inc si
   291 0000BAAC 83C702                          add di, 2
   292 0000BAAF 43                              inc bx
   293 0000BAB0 3B1E[39B8]                      cmp bx, [size22]
   294 0000BAB4 75F0                            jnz .display_difficulty_textt
   295                                  
   296 0000BAB6 803E[900A]01                CMP byte [pointer_flag], 1
   297 0000BABB 740E                        JE .display_easy
   298 0000BABD 803E[900A]02                CMP byte [pointer_flag], 2
   299 0000BAC2 7410                        JE .display_medium
   300 0000BAC4 803E[900A]03                CMP byte [pointer_flag], 3
   301 0000BAC9 7412                        JE .display_hard
   302                                  
   303                                      .display_easy:
   304                                  
   305 0000BACB BE[3BB8]                    MOV si,difficulty_easy
   306 0000BACE 8B16[3FB8]                  MOV dx, [size1]
   307 0000BAD2 EB12                        jmp .display_difficulty_text
   308                                  
   309                                      .display_medium:
   310                                  
   311 0000BAD4 BE[41B8]                    MOV si,difficulty_medium
   312 0000BAD7 8B16[47B8]                  MOV dx, [size2]
   313 0000BADB EB09                        jmp .display_difficulty_text
   314                                  
   315                                      .display_hard:
   316                                  
   317 0000BADD BE[49B8]                    MOV si,difficulty_hard
   318 0000BAE0 8B16[4DB8]                  MOV dx, [size3]
   319 0000BAE4 EB00                        jmp .display_difficulty_text
   320                                  
   321                                      .display_difficulty_text:
   322                                  
   323 0000BAE6 BF6C02                      MOV di,620
   324 0000BAE9 B431                        MOV ah,00110001b
   325 0000BAEB BB0000                      mov bx, 0
   326                                  
   327                                      difficulty_display:
   328                                  
   329 0000BAEE 8A04                        MOV AL, [si]
   330 0000BAF0 268905                      MOV [ES:DI], AX
   331 0000BAF3 83C702                      ADD DI, 2
   332 0000BAF6 43                          inc bx
   333 0000BAF7 46                          INC SI
   334 0000BAF8 39D3                        CMP bx, dx
   335 0000BAFA 75F2                        JNZ difficulty_display
   336                                  
   337 0000BAFC 61                          popa
   338                                  
   339                                      ;---------Display Score-----------
   340                                  
   341 0000BAFD B435                        MOV ah,00110101b
   342 0000BAFF BE0000                      MOV si,0
   343 0000BB02 BF1A01                      MOV di,282
   344                                  
   345                                      score_display:
   346                                  
   347 0000BB05 8A84[4FB8]                  MOV AL, [score + SI]
   348 0000BB09 268905                      MOV [ES:DI], AX
   349 0000BB0C 83C702                      ADD DI, 2
   350                                  
   351 0000BB0F 46                          INC SI
   352 0000BB10 3B36[56B8]                  CMP SI, [size4]
   353 0000BB14 75EF                        JNZ score_display
   354                                  
   355 0000BB16 FF36[8BB8]                  push word [score_count]
   356 0000BB1A E84F4C                      call printnum
   357                                  
   358                                      ;--------------Display Timer Text---------------
   359                                  
   360 0000BB1D 57                          push di
   361 0000BB1E 56                          push si
   362 0000BB1F 51                          push cx
   363 0000BB20 50                          push ax
   364 0000BB21 BFA200                      mov di, 162
   365 0000BB24 BE[5FB8]                    mov si, time_display
   366 0000BB27 B90000                      mov cx, 0
   367 0000BB2A BB0000                      mov bx, 0
   368 0000BB2D B435                        mov ah, 00110101b
   369                                  
   370                                          .display_time_text:
   371 0000BB2F 8A04                                mov al, [si]
   372 0000BB31 268905                              mov [es:di], ax
   373 0000BB34 83C702                              add di, 2
   374 0000BB37 43                                  inc bx
   375 0000BB38 46                                  inc si
   376 0000BB39 41                                  inc cx
   377 0000BB3A 3B0E[65B8]                          cmp cx, word [size61]
   378 0000BB3E 75EF                                jnz .display_time_text
   379                                      
   380 0000BB40 58                          pop ax
   381 0000BB41 59                          pop cx
   382 0000BB42 5E                          pop si
   383 0000BB43 5F                          pop di
   384                                  
   385                                      ;--------------Display Grid------------------
   386                                  
   387 0000BB44 BE0000                      MOV si,0
   388 0000BB47 BF0000                      MOV di,0
   389                                  
   390 0000BB4A E85545                      CALL print_boxes
   391                                  
   392                                      ;---------BUTTON INSTRUCTION FOR GOING UP------------
   393                                  
   394 0000BB4D 60                          pusha
   395                                  
   396 0000BB4E BF720F                          mov di, 3954
   397 0000BB51 B90E00                          mov cx, 14
   398 0000BB54 BE[67B8]                        mov si, button_go_down
   399 0000BB57 B436                            mov ah, 00110110b
   400                                  
   401                                          .going_down:
   402                                  
   403 0000BB59 8A04                            mov al, [si]
   404 0000BB5B 268905                          mov [es:di], ax
   405 0000BB5E 83C702                          add di, 2
   406 0000BB61 83C601                          add si, 1
   407 0000BB64 49                              dec cx
   408 0000BB65 75F2                            jnz .going_down
   409                                  
   410 0000BB67 B019                            mov al, 25
   411 0000BB69 268905                          mov [es:di], ax
   412                                  
   413 0000BB6C 61                          popa
   414                                  ;---------------------------------------
   415                                  
   416                                  
   417                                      ;-------------Display Options Box-------------
   418                                  
   419 0000BB6D E8DF47                      CALL options_box
   420                                  
   421 0000BB70 E85CF4                      CALL print_notes_on_scrolling
   422                                  
   423 0000BB73 E89C5A                      call navigate_grid
   424                                  
   425                                      ;-------------Ending Screen Code----------------
   426                                  
   427 0000BB76 EB00                        jmp check_arrow_keys
   428                                  
   429                                      ;-------------check arrow keys-----------------
   430                                  
   431                                      check_arrow_keys:
   432 0000BB78 833E[87B8]00                cmp word [grid_flag], 0
   433 0000BB7D 0F844602                    JE print_mistakes_count
   434                                  
   435                                      key_input:
   436                                  
   437 0000BB81 B400                        MOV AH, 0x00       ; BIOS keyboard interrupt to read a key
   438 0000BB83 CD16                        INT 0x16           ; Call BIOS interrupt
   439                                  
   440                                  ;------------FOR SCROLLING---------------------
   441                                  
   442 0000BB85 3C77                        CMP AL, 119       
   443 0000BB87 744F                        JE scroll_up_action ; scroll up if 'w' is pressed
   444                                  
   445 0000BB89 3C73                        CMP AL, 115       
   446 0000BB8B 0F849800                    JE scroll_down_action ; scroll down if 's' is pressed
   447                                  
   448 0000BB8F 3C65                        CMP AL, 101       
   449 0000BB91 0F842902                    JE erase_values_in_grid_box ; erase if 'e' is pressed
   450                                  
   451 0000BB95 3C75                        CMP AL, 117       
   452 0000BB97 0F84A5AF                    JE undoo ; undo if 'u' is pressed
   453                                  
   454 0000BB9B 3C6E                        CMP AL, 'n'       
   455 0000BB9D 0F84D501                    JE enable_notes ; enable notes if 'n' is pressed
   456                                  
   457                                  ;-------------FOR GRID NAVIGATION--------------------
   458                                  
   459 0000BBA1 80FC4D                      CMP AH, 0x4D       
   460 0000BBA4 0F842501                    JE right_arrow_action ; Jump if right arrow key is pressed
   461                                  
   462 0000BBA8 80FC4B                      CMP AH, 0x4B       
   463 0000BBAB 0F844601                    JE left_arrow_action ; Jump if left arrow key is pressed
   464                                  
   465 0000BBAF 80FC48                      CMP AH, 0x48      
   466 0000BBB2 0F846701                    JE up_arrow_action ; Jump if up arrow key is pressed
   467                                  
   468 0000BBB6 80FC50                      CMP AH, 0x50       
   469 0000BBB9 0F848801                    JE down_arrow_action ; Jump if down arrow key is pressed
   470                                  
   471                                  ;-------------ENTER FOR NUMBER NAVIGATION------
   472                                  
   473 0000BBBD 3C0D                        CMP AL, 0x0D       ; Check for Enter key (ASCII 13)
   474 0000BBBF 0F84AA01                    JE calling_number_cards_navigation
   475                                  
   476                                  ;------FOR GAME END / RESTART-----------------------    
   477                                  
   478 0000BBC3 80FC01                      CMP AH, 0x01       
   479 0000BBC6 0F842302                    JE end     ; Jump if Esc key is pressed
   480                                  
   481                                  
   482                                  ;---------IF NONE OF THE ABOVE--------------------
   483                                      
   484                                  
   485                                      ;saving previous data before displaying navigation box
   486 0000BBCA 56                          push si
   487 0000BBCB 8B36[0E16]                  mov si, word [location_for_previous_data]
   488 0000BBCF E8AF5A                      call print_saved_data
   489 0000BBD2 E83D5A                      CALL navigate_grid
   490 0000BBD5 5E                          pop si
   491                                  
   492 0000BBD6 EBA0                        jmp check_arrow_keys ; if none of the above is compared, go back again 
   493                                  
   494                                  
   495                                  ; ---------CODE FOR HANDLING SCROLL UP---------
   496                                  
   497                                      scroll_up_action:
   498 0000BBD8 833E[87B8]01                CMP word [grid_flag], 1
   499 0000BBDD 7503                        JNE .normal_scroll_up
   500                                  
   501 0000BBDF E885F4                      CALL saving_lower_grid
   502                                  
   503                                      .normal_scroll_up:
   504                                  
   505 0000BBE2 BE0000                      MOV si,0
   506 0000BBE5 BF0000                      MOV di,0  
   507 0000BBE8 E851FD                      call clrscreen
   508                                  
   509                                  ; here we are updating the conditions to display navigation box for scroll up grid
   510 0000BBEB C706[EC15]0100              mov word [current_row], 1
   511 0000BBF1 C706[EE15]1200              mov word [current_col], 18
   512 0000BBF7 C706[F415]1500              mov word [max_rows], 21
   513 0000BBFD C706[F615]3200              mov word [max_cols], 50 
   514 0000BC03 C706[F815]0100              mov word [min_rows], 1
   515 0000BC09 C706[FA15]1200              mov word [min_cols], 18
   516 0000BC0F C706[87B8]0000              mov word [grid_flag], 0  
   517 0000BC15 C706[8965]0000              mov word [current_roww_index], 0
   518 0000BC1B C706[8B65]0000              mov word [current_coll_index], 0
   519                                  
   520 0000BC21 E862FE                      call draw_grid ;navigate grid is called inside it
   521                                     
   522 0000BC24 E951FF                      JMP check_arrow_keys
   523                                  
   524                                  ; ---------CODE FOR HANDLING SCROLL DOWN---------
   525                                  
   526                                      scroll_down_action:
   527                                  
   528 0000BC27 E812FD                      call clrscreen
   529                                  
   530 0000BC2A B430                        MOV ah,00110000b
   531 0000BC2C BE0000                      MOV si,0
   532 0000BC2F BF0000                      MOV di,0
   533 0000BC32 E865AB                      call numbers_card_function
   534 0000BC35 E8D948                      call last_3_rows
   535                                  
   536                                  ; here we are updating the conditions to display navigation box for scroll down grid
   537 0000BC38 C706[EC15]0000              mov word [current_row], 0
   538 0000BC3E C706[EE15]1200              mov word [current_col], 18
   539 0000BC44 C706[F415]0800              mov word [max_rows], 8
   540 0000BC4A C706[F615]3200              mov word [max_cols], 50 
   541 0000BC50 C706[F815]0000              mov word [min_rows], 0
   542 0000BC56 C706[FA15]1200              mov word [min_cols], 18
   543 0000BC5C C706[87B8]0100              mov word [grid_flag], 1  
   544 0000BC62 C706[8965]0600              mov word [current_roww_index], 6
   545 0000BC68 C706[8B65]0000              mov word [current_coll_index], 0
   546                                  
   547                                      ;call print_notes_on_scrolling
   548 0000BC6E 833E[45AE]01                CMP word [is_scrolled_once], 1
   549 0000BC73 7503                        JNE .dont_display
   550 0000BC75 E86FF4                      CALL displaying_scrolled_grid
   551                                  
   552                                      .dont_display:
   553 0000BC78 C706[45AE]0100              mov word [is_scrolled_once], 1
   554                                  
   555 0000BC7E 60                          pusha
   556 0000BC7F B435                        MOV ah,00110101b
   557 0000BC81 BE0000                      MOV si,0
   558 0000BC84 BF1A01                      MOV di,282
   559                                  
   560                                      score_display1:
   561                                  
   562 0000BC87 8A84[4FB8]                  MOV AL, [score + SI]
   563 0000BC8B 268905                      MOV [ES:DI], AX
   564 0000BC8E 83C702                      ADD DI, 2
   565                                  
   566 0000BC91 46                          INC SI
   567 0000BC92 3B36[56B8]                  CMP SI, [size4]
   568 0000BC96 75EF                        JNZ score_display1
   569                                  
   570 0000BC98 FF36[8BB8]                  push word [score_count]
   571 0000BC9C E8CD4A                      call printnum
   572 0000BC9F 61                          popa
   573                                  
   574 0000BCA0 57                          push di
   575 0000BCA1 56                          push si
   576 0000BCA2 51                          push cx
   577 0000BCA3 50                          push ax
   578 0000BCA4 BFA200                      mov di, 162
   579 0000BCA7 BE[5FB8]                    mov si, time_display
   580 0000BCAA B90000                      mov cx, 0
   581 0000BCAD BB0000                      mov bx, 0
   582 0000BCB0 B435                        mov ah, 00110101b
   583                                  
   584                                          .display_time_text:
   585 0000BCB2 8A04                                mov al, [si]
   586 0000BCB4 268905                              mov [es:di], ax
   587 0000BCB7 83C702                              add di, 2
   588 0000BCBA 43                                  inc bx
   589 0000BCBB 46                                  inc si
   590 0000BCBC 41                                  inc cx
   591 0000BCBD 3B0E[65B8]                          cmp cx, word [size61]
   592 0000BCC1 75EF                                jnz .display_time_text
   593                                      
   594 0000BCC3 58                          pop ax
   595 0000BCC4 59                          pop cx
   596 0000BCC5 5E                          pop si
   597 0000BCC6 5F                          pop di
   598                                  
   599 0000BCC7 E84859                      call navigate_grid
   600                                  
   601 0000BCCA E9ABFE                      JMP check_arrow_keys
   602                                  
   603                                  ; -------CODE FOR HANDLING RIGHT ARROW KEY PRESS----------
   604                                  
   605                                      right_arrow_action:
   606                                  
   607 0000BCCD FF06[F215]                  inc word [current_col_index]
   608 0000BCD1 A1[F615]                    mov ax, [max_cols]
   609 0000BCD4 3906[EE15]                  cmp word [current_col], ax
   610 0000BCD8 0F849CFE                    jz check_arrow_keys
   611 0000BCDC 8306[EE15]04                add word [current_col], 4
   612 0000BCE1 8306[8B65]01                add word [current_coll_index], 1
   613                                  
   614                                  ; saving previous data before displaying navigation box
   615 0000BCE6 56                          push si
   616 0000BCE7 8B36[0E16]                  mov si, word [location_for_previous_data]
   617 0000BCEB E89359                      call print_saved_data
   618 0000BCEE E82159                      CALL navigate_grid
   619 0000BCF1 5E                          pop si
   620                                  
   621 0000BCF2 E983FE                      JMP check_arrow_keys 
   622                                  
   623                                  ; -------CODE FOR HANDLING LEFT ARROW KEY PRESS----------
   624                                  
   625                                      left_arrow_action:
   626                                  
   627 0000BCF5 FF0E[F215]                  dec word [current_col_index]
   628 0000BCF9 A1[FA15]                    mov ax, [min_cols]
   629 0000BCFC 3906[EE15]                  cmp word [current_col], ax
   630 0000BD00 0F8474FE                    jz check_arrow_keys
   631 0000BD04 832E[EE15]04                sub word [current_col], 4
   632 0000BD09 832E[8B65]01                sub word [current_coll_index], 1
   633                                  
   634                                  ; saving previous data before displaying navigation box
   635 0000BD0E 56                          push si
   636 0000BD0F 8B36[0E16]                  mov si, word [location_for_previous_data]
   637 0000BD13 E86B59                      call print_saved_data
   638 0000BD16 E8F958                      CALL navigate_grid
   639 0000BD19 5E                          pop si
   640                                  
   641 0000BD1A E95BFE                      JMP check_arrow_keys
   642                                  
   643                                  ; -------CODE FOR HANDLING UP ARROW KEY PRESS----------
   644                                  
   645                                      up_arrow_action:
   646                                  
   647 0000BD1D FF0E[F015]                  dec word [current_row_index]
   648 0000BD21 A1[F815]                    mov ax, [min_rows]
   649 0000BD24 3906[EC15]                  cmp word [current_row], ax
   650 0000BD28 0F844CFE                    jz check_arrow_keys
   651 0000BD2C 832E[EC15]04                sub word [current_row], 4
   652 0000BD31 832E[8965]01                sub word [current_roww_index], 1
   653                                  
   654                                  ; saving previous data before displaying navigation box
   655 0000BD36 56                          push si
   656 0000BD37 8B36[0E16]                  mov si, word [location_for_previous_data]
   657 0000BD3B E84359                      call print_saved_data
   658 0000BD3E E8D158                      CALL navigate_grid
   659 0000BD41 5E                          pop si
   660                                  
   661 0000BD42 E933FE                      JMP check_arrow_keys
   662                                  
   663                                  ; -------CODE FOR HANDLING DOWN ARROW KEY PRESS----------
   664                                  
   665                                      down_arrow_action:
   666                                  
   667 0000BD45 FF06[F015]                  inc word [current_row_index]
   668 0000BD49 A1[F415]                    mov ax, word [max_rows]
   669 0000BD4C 3906[EC15]                  cmp word [current_row], ax
   670 0000BD50 0F8424FE                    jz check_arrow_keys
   671 0000BD54 8306[EC15]04                add word [current_row], 4
   672 0000BD59 8306[8965]01                add word [current_roww_index], 1
   673                                  
   674                                  ; saving previous data before displaying navigation box
   675 0000BD5E 56                          push si
   676 0000BD5F 8B36[0E16]                  mov si, word [location_for_previous_data]
   677 0000BD63 E81B59                      call print_saved_data
   678 0000BD66 E8A958                      CALL navigate_grid
   679 0000BD69 5E                          pop si
   680                                  
   681 0000BD6A E90BFE                      JMP check_arrow_keys   
   682                                  
   683                                      calling_number_cards_navigation: 
   684                                  
   685 0000BD6D E857AA                      CALL numbers_card_navigation
   686 0000BD70 E822A8                      CALL is_position_valid
   687                                  
   688 0000BD73 E902FE                      JMP check_arrow_keys
   689                                  
   690                                  ;-------------------TAKE NOTES INPUT-----------------------------
   691                                  
   692                                      enable_notes:
   693                                          
   694 0000BD76 E8CEF0                          CALL input_notes
   695                                  
   696                                      move_navigation_box:
   697                                          
   698 0000BD79 833E[EE15]2E                    CMP word [current_col], 46
   699 0000BD7E 7F10                            JG .increment_rows
   700                                  
   701                                          .increment_cols:
   702 0000BD80 8306[EE15]04                    ADD word [current_col], 4
   703 0000BD85 8306[8B65]01                    ADD word [current_coll_index], 1
   704 0000BD8A E88558                          CALL navigate_grid
   705 0000BD8D E9E8FD                          JMP check_arrow_keys
   706                                  
   707                                          .increment_rows:
   708 0000BD90 833E[87B8]01                    cmp word [grid_flag], 1
   709 0000BD95 7400                            JE .for_scrolled_grid
   710                                  
   711                                          .for_scrolled_grid:
   712 0000BD97 833E[EC15]08                    CMP word [current_row], 8
   713 0000BD9C 7400                            JE .go_left
   714                                  
   715                                          .go_left:
   716 0000BD9E 832E[EE15]04                    SUB word [current_col], 4
   717 0000BDA3 832E[8B65]01                    SUB word [current_coll_index], 1
   718 0000BDA8 E86758                          CALL navigate_grid
   719 0000BDAB E9CAFD                          JMP check_arrow_keys
   720                                          
   721 0000BDAE 8306[EC15]04                    ADD word [current_row], 4
   722 0000BDB3 8306[8965]01                    ADD word [current_roww_index], 1
   723 0000BDB8 E85758                          CALL navigate_grid
   724                                      
   725                                      .increment_end:
   726                                      
   727 0000BDBB E9BAFD                      JMP check_arrow_keys
   728                                  
   729                                  ;------------------ERASE GRID BOX VALUES-------------------------
   730                                  
   731                                  
   732                                      erase_values_in_grid_box:
   733                                  
   734 0000BDBE E8ABF1                          CALL erase_notes
   735 0000BDC1 E8D0AD                          CALL erasee
   736                                  
   737 0000BDC4 E9B1FD                          JMP check_arrow_keys
   738                                  
   739                                  
   740                                  ;-------------------PRINT MISTAKES COUNT-------------------------
   741                                  
   742                                      print_mistakes_count:
   743                                  
   744 0000BDC7 833E[89B8]00                cmp word [ending_screen_flag], 0
   745 0000BDCC 0F85B1FD                    JNE key_input
   746                                  
   747 0000BDD0 B431                        mov ah, 00110001b
   748 0000BDD2 BFAC03                      mov di,940
   749 0000BDD5 A0[8765]                    mov al, [mistakes_count]
   750 0000BDD8 0430                        add al, 48
   751 0000BDDA AB                          stosw
   752                                  
   753 0000BDDB E9A3FD                      JMP key_input
   754                                  
   755                                  ;---------------------ENDING SCREEN-----------------------------
   756                                  
   757                                      display_ending_screen:
   758 0000BDDE C706[89B8]0100              mov word [ending_screen_flag], 1
   759                                  
   760 0000BDE4 E8B65A                      call unhook_timer_interrupt
   761 0000BDE7 E82B4B                      call ending_screen
   762 0000BDEA E98BFD                      JMP check_arrow_keys
   763                                  
   764                                      end:
   765 0000BDED E8AD5A                      call unhook_timer_interrupt
   766 0000BDF0 B8004C                      MOV AX, 0x4C00
   767 0000BDF3 CD21                        INT 0x21
